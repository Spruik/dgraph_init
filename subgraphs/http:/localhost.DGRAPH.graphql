#######################
# Input Schema
#######################

type User @key(fields: "id") {
	id: ID!
	username: String! @id
	name: String
	isType: UserType! @search
	hasRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole] @hasInverse(field: user)
	tasks(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance] @hasInverse(field: assignedUser)
	isActive: Boolean
	hasRoleAggregate(filter: UserRoleFilter): UserRoleAggregateResult
	tasksAggregate(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult
}

type UserRole {
	id: ID!
	role(filter: RoleFilter): Role! @hasInverse(field: hasMembers)
	user(filter: UserFilter): User! @hasInverse(field: hasRole)
	responsibilities(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]! @hasInverse(field: userRoles)
	isActive: Boolean
	responsibilitiesAggregate(filter: EquipmentFilter): EquipmentAggregateResult
}

enum UserType {
	USER
	ADMIN
}

type Role {
	name: String! @id
	hasMembers(filter: UserRoleFilter, first: Int, offset: Int): [UserRole] @hasInverse(field: role)
	hasGrantedRights(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight] @hasInverse(field: forRole)
	isActive: Boolean
	workflowNodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @hasInverse(field: role)
	hasMembersAggregate(filter: UserRoleFilter): UserRoleAggregateResult
	hasGrantedRightsAggregate(filter: AccessRightFilter): AccessRightAggregateResult
	workflowNodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
}

type AccessRight {
	id: ID!
	name: AccessRights @search
	forRole(filter: RoleFilter): Role @hasInverse(field: hasGrantedRights)
	isActive: Boolean
}

enum AccessRights {
	isAdmin
	getUser
	queryUser
	aggregateUser
	getUserRole
	queryUserRole
	aggregateUserRole
	getRole
	queryRole
	aggregateRole
	getAccessRight
	queryAccessRight
	aggregateAccessRight
	getACL
	queryACL
	aggregateACL
	getMenu
	queryMenu
	aggregateMenu
	getOperationsRequest
	queryOperationsRequest
	aggregateOperationsRequest
	getRequestState
	queryRequestState
	aggregateRequestState
	getOperationsDefinition
	queryOperationsDefinition
	aggregateOperationsDefinition
	getBillOfMaterial
	queryBillOfMaterial
	aggregateBillOfMaterial
	getOperationsSegment
	queryOperationsSegment
	aggregateOperationsSegment
	getTransitionEventRuleset
	queryTransitionEventRuleset
	aggregateTransitionEventRuleset
	getStateEventRuleset
	queryStateEventRuleset
	aggregateStateEventRuleset
	getMaterialEventRuleset
	queryMaterialEventRuleset
	aggregateMaterialEventRuleset
	getOrderStartRuleset
	queryOrderStartRuleset
	aggregateOrderStartRuleset
	getSegmentInvoiceSetting
	querySegmentInvoiceSetting
	aggregateSegmentInvoiceSetting
	getSegmentDependency
	querySegmentDependency
	aggregateSegmentDependency
	getJobOrder
	queryJobOrder
	aggregateJobOrder
	getJobResponse
	queryJobResponse
	aggregateJobResponse
	getEventLog
	queryEventLog
	aggregateEventLog
	getQuantityLog
	queryQuantityLog
	aggregateQuantityLog
	getEquipmentSpecification
	queryEquipmentSpecification
	aggregateEquipmentSpecification
	getMaterialSpecification
	queryMaterialSpecification
	aggregateMaterialSpecification
	getPersonnelSpecification
	queryPersonnelSpecification
	aggregatePersonnelSpecification
	getEquipment
	queryEquipment
	aggregateEquipment
	getEquipmentNameAlias
	queryEquipmentNameAlias
	aggregateEquipmentNameAlias
	getPropertyNameAlias
	queryPropertyNameAlias
	aggregatePropertyNameAlias
	getPropertyValueAlias
	queryPropertyValueAlias
	aggregatePropertyValueAlias
	getEquipmentReasonOverride
	queryEquipmentReasonOverride
	aggregateEquipmentReasonOverride
	getEquipmentClass
	queryEquipmentClass
	aggregateEquipmentClass
	getProperty
	queryProperty
	aggregateProperty
	getEquipmentPropertyOverride
	queryEquipmentPropertyOverride
	aggregateEquipmentPropertyOverride
	getEventDefinition
	queryEventDefinition
	aggregateEventDefinition
	getPayloadFieldDefinition
	queryPayloadFieldDefinition
	aggregatePayloadFieldDefinition
	getReason
	queryReason
	aggregateReason
	getReasonCategory
	queryReasonCategory
	aggregateReasonCategory
	getMaterialClass
	queryMaterialClass
	aggregateMaterialClass
	getMaterialDefinition
	queryMaterialDefinition
	aggregateMaterialDefinition
	getMaterialAlternate
	queryMaterialAlternate
	aggregateMaterialAlternate
	getCarrier
	queryCarrier
	aggregateCarrier
	getMaterialLot
	queryMaterialLot
	aggregateMaterialLot
	getMaterialSubLot
	queryMaterialSubLot
	aggregateMaterialSubLot
	getMaterialUnit
	queryMaterialUnit
	aggregateMaterialUnit
	getMaterialEquipment
	queryMaterialEquipment
	aggregateMaterialEquipment
	getUnitOfMeasure
	queryUnitOfMeasure
	aggregateUnitOfMeasure
	getUnitOfMeasureConversion
	queryUnitOfMeasureConversion
	aggregateUnitOfMeasureConversion
	getMaterialStatus
	queryMaterialStatus
	aggregateMaterialStatus
	getMaterialStateModel
	queryMaterialStateModel
	aggregateMaterialStateModel
	getMaterialStateTransition
	queryMaterialStateTransition
	aggregateMaterialStateTransition
	getPersonnelClass
	queryPersonnelClass
	aggregatePersonnelClass
	getPerson
	queryPerson
	aggregatePerson
	getTestSpecification
	queryTestSpecification
	aggregateTestSpecification
	getTestResult
	queryTestResult
	aggregateTestResult
	getWorkCalendarDefinitionEntry
	queryWorkCalendarDefinitionEntry
	aggregateWorkCalendarDefinitionEntry
	getWorkCalendarEntry
	queryWorkCalendarEntry
	aggregateWorkCalendarEntry
	getWorkCalendar
	queryWorkCalendar
	aggregateWorkCalendar
	getWorkflowSpecification
	queryWorkflowSpecification
	aggregateWorkflowSpecification
	getWorkflowInstance
	queryWorkflowInstance
	aggregateWorkflowInstance
	getWorkflowNode
	queryWorkflowNode
	aggregateWorkflowNode
	getWorkflowNodeInstance
	queryWorkflowNodeInstance
	aggregateWorkflowNodeInstance
	getWorkflowNodeEvent
	queryWorkflowNodeEvent
	aggregateWorkflowNodeEvent
	getWorkflowNodeType
	queryWorkflowNodeType
	aggregateWorkflowNodeType
	getWorkflowConnection
	queryWorkflowConnection
	aggregateWorkflowConnection
	getWorkflowConnectionType
	queryWorkflowConnectionType
	aggregateWorkflowConnectionType
	getWorkflowProperty
	queryWorkflowProperty
	aggregateWorkflowProperty
	getWorkflowPropertyInstance
	queryWorkflowPropertyInstance
	aggregateWorkflowPropertyInstance
	getWorkflowPropertyValue
	queryWorkflowPropertyValue
	aggregateWorkflowPropertyValue
	getForm
	queryForm
	aggregateForm
	getPartner
	queryPartner
	aggregatePartner
	getInventoryHandlingPolicy
	queryInventoryHandlingPolicy
	aggregateInventoryHandlingPolicy
	getInventoryHandlingRule
	queryInventoryHandlingRule
	aggregateInventoryHandlingRule
	getAddress
	queryAddress
	aggregateAddress
	getOrder
	queryOrder
	aggregateOrder
	getOrderLine
	queryOrderLine
	aggregateOrderLine
	getShipment
	queryShipment
	aggregateShipment
	getShipmentItem
	queryShipmentItem
	aggregateShipmentItem
	getBox
	queryBox
	aggregateBox
	getGeneralLedgerAccount
	queryGeneralLedgerAccount
	aggregateGeneralLedgerAccount
	addUser
	updateUser
	deleteUser
	addUserRole
	updateUserRole
	deleteUserRole
	addRole
	updateRole
	deleteRole
	addAccessRight
	updateAccessRight
	deleteAccessRight
	addACL
	updateACL
	deleteACL
	addMenu
	updateMenu
	deleteMenu
	addOperationsRequest
	updateOperationsRequest
	deleteOperationsRequest
	addRequestState
	updateRequestState
	deleteRequestState
	addOperationsDefinition
	updateOperationsDefinition
	deleteOperationsDefinition
	addBillOfMaterial
	updateBillOfMaterial
	deleteBillOfMaterial
	addOperationsSegment
	updateOperationsSegment
	deleteOperationsSegment
	addTransitionEventRuleset
	updateTransitionEventRuleset
	deleteTransitionEventRuleset
	addStateEventRuleset
	updateStateEventRuleset
	deleteStateEventRuleset
	addMaterialEventRuleset
	updateMaterialEventRuleset
	deleteMaterialEventRuleset
	addOrderStartRuleset
	updateOrderStartRuleset
	deleteOrderStartRuleset
	addSegmentInvoiceSetting
	updateSegmentInvoiceSetting
	deleteSegmentInvoiceSetting
	addSegmentDependency
	updateSegmentDependency
	deleteSegmentDependency
	addJobOrder
	updateJobOrder
	deleteJobOrder
	addJobResponse
	updateJobResponse
	deleteJobResponse
	addEventLog
	updateEventLog
	deleteEventLog
	addQuantityLog
	updateQuantityLog
	deleteQuantityLog
	addEquipmentSpecification
	updateEquipmentSpecification
	deleteEquipmentSpecification
	addMaterialSpecification
	updateMaterialSpecification
	deleteMaterialSpecification
	addPersonnelSpecification
	updatePersonnelSpecification
	deletePersonnelSpecification
	addEquipment
	updateEquipment
	deleteEquipment
	addEquipmentNameAlias
	updateEquipmentNameAlias
	deleteEquipmentNameAlias
	addPropertyNameAlias
	updatePropertyNameAlias
	deletePropertyNameAlias
	addPropertyValueAlias
	updatePropertyValueAlias
	deletePropertyValueAlias
	addEquipmentReasonOverride
	updateEquipmentReasonOverride
	deleteEquipmentReasonOverride
	addEquipmentClass
	updateEquipmentClass
	deleteEquipmentClass
	addProperty
	updateProperty
	deleteProperty
	addEquipmentPropertyOverride
	updateEquipmentPropertyOverride
	deleteEquipmentPropertyOverride
	addEventDefinition
	updateEventDefinition
	deleteEventDefinition
	addPayloadFieldDefinition
	updatePayloadFieldDefinition
	deletePayloadFieldDefinition
	addReason
	updateReason
	deleteReason
	addReasonCategory
	updateReasonCategory
	deleteReasonCategory
	addMaterialClass
	updateMaterialClass
	deleteMaterialClass
	addMaterialDefinition
	updateMaterialDefinition
	deleteMaterialDefinition
	addMaterialAlternate
	updateMaterialAlternate
	deleteMaterialAlternate
	addCarrier
	updateCarrier
	deleteCarrier
	addMaterialLot
	updateMaterialLot
	deleteMaterialLot
	addMaterialSubLot
	updateMaterialSubLot
	deleteMaterialSubLot
	addMaterialUnit
	updateMaterialUnit
	deleteMaterialUnit
	addMaterialEquipment
	updateMaterialEquipment
	deleteMaterialEquipment
	addUnitOfMeasure
	updateUnitOfMeasure
	deleteUnitOfMeasure
	addUnitOfMeasureConversion
	updateUnitOfMeasureConversion
	deleteUnitOfMeasureConversion
	addMaterialStatus
	updateMaterialStatus
	deleteMaterialStatus
	addMaterialStateModel
	updateMaterialStateModel
	deleteMaterialStateModel
	addMaterialStateTransition
	updateMaterialStateTransition
	deleteMaterialStateTransition
	addPersonnelClass
	updatePersonnelClass
	deletePersonnelClass
	addPerson
	updatePerson
	deletePerson
	addTestSpecification
	updateTestSpecification
	deleteTestSpecification
	addTestResult
	updateTestResult
	deleteTestResult
	addWorkCalendarDefinitionEntry
	updateWorkCalendarDefinitionEntry
	deleteWorkCalendarDefinitionEntry
	addWorkCalendarEntry
	updateWorkCalendarEntry
	deleteWorkCalendarEntry
	addWorkCalendar
	updateWorkCalendar
	deleteWorkCalendar
	addWorkflowSpecification
	updateWorkflowSpecification
	deleteWorkflowSpecification
	addWorkflowInstance
	updateWorkflowInstance
	deleteWorkflowInstance
	addWorkflowNode
	updateWorkflowNode
	deleteWorkflowNode
	addWorkflowNodeInstance
	updateWorkflowNodeInstance
	deleteWorkflowNodeInstance
	addWorkflowNodeEvent
	updateWorkflowNodeEvent
	deleteWorkflowNodeEvent
	addWorkflowNodeType
	updateWorkflowNodeType
	deleteWorkflowNodeType
	addWorkflowConnection
	updateWorkflowConnection
	deleteWorkflowConnection
	addWorkflowConnectionType
	updateWorkflowConnectionType
	deleteWorkflowConnectionType
	addWorkflowProperty
	updateWorkflowProperty
	deleteWorkflowProperty
	addWorkflowPropertyInstance
	updateWorkflowPropertyInstance
	deleteWorkflowPropertyInstance
	addWorkflowPropertyValue
	updateWorkflowPropertyValue
	deleteWorkflowPropertyValue
	addForm
	updateForm
	deleteForm
	addPartner
	updatePartner
	deletePartner
	addInventoryHandlingPolicy
	updateInventoryHandlingPolicy
	deleteInventoryHandlingPolicy
	addInventoryHandlingRule
	updateInventoryHandlingRule
	deleteInventoryHandlingRule
	addAddress
	updateAddress
	deleteAddress
	addOrder
	updateOrder
	deleteOrder
	addOrderLine
	updateOrderLine
	deleteOrderLine
	addShipment
	updateShipment
	deleteShipment
	addShipmentItem
	updateShipmentItem
	deleteShipmentItem
	addBox
	updateBox
	deleteBox
	addGeneralLedgerAccount
	updateGeneralLedgerAccount
	deleteGeneralLedgerAccount
}

type ACL {
	id: ID!
	isActive: Boolean @search
	level: AccessLevel
	grants(filter: RoleFilter): Role
}

enum AccessLevel {
	VIEWER
	MODERATOR
	OWNER
}

"""Store the heartbeat timestamps of connected libre-services.
microservices can subscribe to this entity to check the status of their subscription"""
type LibreService @withSubscription @key(fields: "id") {
	id: ID!
	name: String! @id
	heartbeat: DateTime
}

type Menu {
	id: ID!
	label: String! @search(by: [hash])
	access(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role!]!
	parent(filter: MenuFilter): Menu @hasInverse(field: children)
	children(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu!] @hasInverse(field: parent)
	menuPage: String
	icon: String
	isSection: Boolean!
	isPage: Boolean!
	orderNumber: Int
	accessAggregate(filter: RoleFilter): RoleAggregateResult
	childrenAggregate(filter: MenuFilter): MenuAggregateResult
}

"""A request for operations to be performed is an operations schedule.
The schedule may apply to operations, maintenance, quality or inventory operations"""
type OperationsRequest @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id
	operationsType: WorkType!
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition!
	requestState(filter: RequestStateFilter): RequestState!
	quantity: Float!
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure!
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: operationsRequest)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: operationsRequests)
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: operationsRequest)
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
}

type RequestState @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	description: String
}

"""An identification of the resources and workflow required to perform a specified unit of work
shall be defined as a work definition. The work definition may apply to production, maintenance, quality and inventory
activities."""
enum WorkType {
	Production
	Maintenance
	Quality
	Inventory
	Mixed
}

type OperationsDefinition @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	material(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: operationsDefinitions)
	version: String
	description: String
	operationsType: WorkType!
	hierarchyScope: String
	billOfMaterial(filter: BillOfMaterialFilter): BillOfMaterial @hasInverse(field: operationsDefinition)
	segments(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: operationsDefinition)
	segmentsAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
}

type BillOfMaterial @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	version: String!
	description: String
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: billOfMaterial)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: billOfMaterial)
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
}

type OperationsSegment @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @search(by: [hash])
	version: String
	type: SegmentType
	uiComponent: String
	description: String @search(by: [hash])
	parent(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: children)
	children(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment] @hasInverse(field: parent)
	workType: WorkType @search
	workDefinitionType: String @search(by: [hash])
	duration: Float
	glAccountWIP: String
	glAccountWIPInvoice: String
	glAccountFixedOverhead: String
	glAccountVariableOverhead: String
	glAccountDirectLabour: String
	invoiceSettings(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
	costAmountFixedOverhead: Float
	costDriverFixedOverhead: CostDriver
	costAmountVariableOverhead: Float
	costAmountDirectLabourRate: Float
	durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	orderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRuleset @hasInverse(field: segment)
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: operationsSegment)
	materialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRuleset @hasInverse(field: segment)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: operationsSegment)
	stateEventRuleset(filter: StateEventRulesetFilter): StateEventRuleset @hasInverse(field: segment)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: operationsSegment)
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: operationsSegment)
	hierarchyScope: String
	inflows(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency] @hasInverse(field: to)
	outflows(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency] @hasInverse(field: from)
	operationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinition @hasInverse(field: segments)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: operationsSegment)
	mpmPlanRate: Float
	mpmIdealSetupTime: Float
	mpmIdealChangeoverTime: Float
	mpmEnableSmartChangeover: Boolean
	mpmChangeoverFamily: String
	mpmThresholdRunRate: Float
	mpmThresholdRunDuration: Float
	mpmThresholdSlowRate: Float
	mpmThresholdSlowDuration: Float
	mpmThresholdMicrostopDuration: Float
	mpmEnableAutoIdent: Boolean
	mpmAutoIdentMatchCode(filter: PropertyFilter): Property
	positionX: Int
	positionY: Int
	childrenAggregate(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	invoiceSettingsAggregate(filter: SegmentInvoiceSettingFilter): SegmentInvoiceSettingAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	inflowsAggregate(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult
	outflowsAggregate(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
}

type TransitionEventRuleset @withSubscription {
	id: ID!
	name: String!
	segmentDependency(filter: SegmentDependencyFilter): SegmentDependency @hasInverse(field: transitionEventRuleset)
	eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: transitionEventRuleset)
	eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type StateEventRuleset @withSubscription {
	id: ID!
	name: String!
	triggerWhen: [RulesetTriggerOption]
	segment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: stateEventRuleset)
	targetState: String!
	eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: stateEventRuleset)
	eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type MaterialEventRuleset @withSubscription {
	id: ID!
	name: String!
	triggerWhen: [RulesetTriggerOption]
	segment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: materialEventRuleset)
	targetMaterial: String!
	targetMaterialOp: String!
	eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: materialEventRuleset)
	eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

type OrderStartRuleset @withSubscription {
	id: ID!
	name: String!
	segment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: orderStartRuleset)
	eventDefs(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: orderStartRuleset)
	eventDefsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
}

enum RulesetTriggerOption {
	ORDER_START
	ORDER_END
}

enum SegmentType {
	USER_TASK
	SYSTEM_TASK
	EMBED_SUBPROCESS
}

type SegmentInvoiceSetting @key(fields: "id") {
	id: ID!
	partner(filter: PartnerFilter): Partner
	costPerHour: Float
	costPerUnit: Float
}

type SegmentDependency @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	description: String
	from(filter: OperationsSegmentFilter): OperationsSegment! @hasInverse(field: outflows)
	to(filter: OperationsSegmentFilter): OperationsSegment! @hasInverse(field: inflows)
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	condition: String
	transitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRuleset @hasInverse(field: segmentDependency)
	jobOrderDependencies(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency] @hasInverse(field: segmentDependency)
	jobOrderDependenciesAggregate(filter: JobOrderDependencyFilter): JobOrderDependencyAggregateResult
}

enum DependencyType {
	StartAfterStart
	StartAfterEnd
	EndAfterEnd
	EndAfterStart
	CanRunParallel
	CannotRunParallel
}

type JobOrder @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	createdDateTime: DateTime @search
	name: String! @id @search(by: [hash,regexp])
	version: String
	description: String @search(by: [hash])
	parent(filter: JobOrderFilter): JobOrder @hasInverse(field: children)
	children(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: parent)
	workType: WorkType @search
	workDefinitionType: String @search(by: [hash])
	duration: Float
	durationUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: jobOrder)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: jobOrder)
	personnelSpecifications(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification] @hasInverse(field: jobOrder)
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: jobOrder)
	scheduledStartDateTime: DateTime @search
	scheduledEndDateTime: DateTime @search
	scheduledDuration: Float
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: jobOrders)
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	priority: Int
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: jobOrder)
	hierarchyScope: String
	dispatchStatus: DispatchStatus @search(by: [hash])
	operationsRequest(filter: OperationsRequestFilter): OperationsRequest @hasInverse(field: jobOrders)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: jobOrders)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: jobOrder)
	jobOrderNotes(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote] @hasInverse(field: jobOrder)
	inflows(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency] @hasInverse(field: to)
	outflows(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency] @hasInverse(field: from)
	previous(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: next)
	next(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: previous)
	childrenAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	materialSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	personnelSpecificationsAggregate(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	jobOrderNotesAggregate(filter: JobOrderNoteFilter): JobOrderNoteAggregateResult
	inflowsAggregate(filter: JobOrderDependencyFilter): JobOrderDependencyAggregateResult
	outflowsAggregate(filter: JobOrderDependencyFilter): JobOrderDependencyAggregateResult
	previousAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	nextAggregate(filter: JobOrderFilter): JobOrderAggregateResult
}

""" Defines the planned relationship between JobOrders. The JobOrderDependency is created from a copy
of the SegmentDependency during the production dispatch activity """
type JobOrderDependency {
	id: ID!
	isActive: Boolean @search
	description: String
	from(filter: JobOrderFilter): JobOrder! @hasInverse(field: outflows)
	to(filter: JobOrderFilter): JobOrder! @hasInverse(field: inflows)
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	condition: String
	segmentDependency(filter: SegmentDependencyFilter): SegmentDependency @hasInverse(field: jobOrderDependencies)
}

enum DispatchStatus {
	CREATED
	RELEASED
	PENDING
	ACTIVE
	PARKED
	COMPLETE
	CLOSED
	CANCELED
}

""" Define the allowable DispatchStatus transitions for JobOrder.dispatchStatus"""
type JobOrderDispatchStateModel {
	fromStatus: DispatchStatus!
	allowedTransition: [DispatchStatus]
}

type JobOrderNote {
	id: ID!
	comment: String
	createdDateTime: DateTime
	editedDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedBy(filter: UserFilter): User
	isActive: Boolean
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: jobOrderNotes)
}

type JobResponse @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	createdDateTime: DateTime
	modifiedDateTime: DateTime
	operator(filter: UserFilter): User
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: jobResponses)
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	productionDate: String @search(by: [hash])
	actualDuration: Float
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: jobResponses)
	events(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog] @hasInverse(field: jobResponse)
	quantities(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog] @hasInverse(field: jobResponse)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: jobResponse)
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: jobResponse)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: jobResponse)
	eventsAggregate(filter: EventLogFilter): EventLogAggregateResult
	quantitiesAggregate(filter: QuantityLogFilter): QuantityLogAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
}

type PersonnelActual @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobResponse(filter: JobResponseFilter): JobResponse! @hasInverse(field: personnelActual)
	person(filter: PersonFilter): Person @hasInverse(field: personnelActual)
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
}

type EquipmentActual @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobResponse(filter: JobResponseFilter): JobResponse! @hasInverse(field: equipmentActual)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: equipmentActual)
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
}

type MaterialActual @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobResponse(filter: JobResponseFilter): JobResponse! @hasInverse(field: materialActual)
	materialDefinition(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: materialActual)
	materialLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: materialActual)
	materialSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: materialActual)
	materialUse: MaterialUse
	quantity: Float
	quantityUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
}

type EventLog @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobResponse(filter: JobResponseFilter): JobResponse! @hasInverse(field: events)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: events)
	startDateTime: DateTime @search
	endDateTime: DateTime @search
	duration: Float
	reasonCode: String @search(by: [hash])
	reasonText: String @search(by: [hash])
	reasonCategoryCode: String @search(by: [hash])
	reasonValue: Float
	reasonValueUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	comments: String @search(by: [hash])
}

type QuantityLog @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobResponse(filter: JobResponseFilter): JobResponse! @hasInverse(field: quantities)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: quantities)
	type: MaterialUse! @search
	timestamp: DateTime @search
	quantity: Float!
	reasonCode: String @search(by: [hash])
	reasonText: String @search(by: [hash])
	comments: String @search(by: [hash])
}

type EquipmentSpecification @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: equipmentSpecifications)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: equipmentSpecifications)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: workSpecifications)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: equipmentSpecifications)
	description: String
	quantity: Float
	uom(filter: UnitOfMeasureFilter): UnitOfMeasure
}

type MaterialSpecification @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: materialSpecifications)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: materialSpecifications)
	billOfMaterial(filter: BillOfMaterialFilter): BillOfMaterial @hasInverse(field: materialSpecifications)
	material(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: workSpecifications)
	materialClass(filter: MaterialClassFilter): MaterialClass
	description: String
	materialUse: MaterialUse! @search(by: [hash])
	allowedStates(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	isTracked: Boolean
	isBackFlushed: Boolean @search
	backFlushFromLocation(filter: EquipmentFilter): Equipment
	quantity: Float
	uom(filter: UnitOfMeasureFilter): UnitOfMeasure
	allowedStatesAggregate(filter: MaterialStatusFilter): MaterialStatusAggregateResult
}

type PersonnelSpecification @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: personnelSpecifications)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: personnelSpecifications)
	person(filter: PersonFilter): Person
	personnelClass(filter: PersonnelClassFilter): PersonnelClass
	description: String
	personnelUse: String
	quantity: Float
	uom(filter: UnitOfMeasureFilter): UnitOfMeasure
}

type ParameterSpecification @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: parameterSpecifications)
	operationsSegment(filter: OperationsSegmentFilter): OperationsSegment @hasInverse(field: parameterSpecifications)
	material(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: parameterSpecifications)
	property(filter: PropertyFilter): Property! @hasInverse(field: parameterSpecifications)
	valueDefault: String
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
}

enum MaterialUse {
	Initial
	Produced
	ByProduct
	CoProduct
	Consumable
	Consumed
	Transferred
	Scrap
	Rework
	Received
	Packed
	Shipped
}

type DashboardConfig {
	id: ID!
	name: String! @id
	isActive: Boolean @search
	panels(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig] @hasInverse(field: dashboard)
	panelsAggregate(filter: DashboardPanelConfigFilter): DashboardPanelConfigAggregateResult
}

type DashboardPanelConfig {
	id: ID!
	dashboard(filter: DashboardConfigFilter): DashboardConfig @hasInverse(field: panels)
	widgetName: String @search(by: [hash])
	properties(filter: DashboardWidgetConfigPropertyFilter, order: DashboardWidgetConfigPropertyOrder, first: Int, offset: Int): [DashboardWidgetConfigProperty] @hasInverse(field: panel)
	x: Int
	y: Int
	w: Int
	h: Int
	propertiesAggregate(filter: DashboardWidgetConfigPropertyFilter): DashboardWidgetConfigPropertyAggregateResult
}

type DashboardWidgetConfigProperty {
	id: ID!
	panel(filter: DashboardPanelConfigFilter): DashboardPanelConfig @hasInverse(field: properties)
	key: String!
	value: String!
}

type Equipment @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	userRoles(filter: UserRoleFilter, first: Int, offset: Int): [UserRole] @hasInverse(field: responsibilities)
	name: String! @search(by: [hash])
	label: String @search(by: [hash])
	displayName: String @search(by: [hash])
	description: String @search(by: [hash])
	erpAssetID: String @search(by: [hash])
	parent(filter: EquipmentFilter): Equipment @hasInverse(field: children)
	children(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @hasInverse(field: parent)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: equipments)
	equipmentLevel: EquipmentElementLevel @search
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual] @hasInverse(field: equipment)
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: equipment)
	propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @hasInverse(field: equipment)
	carriers(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier] @hasInverse(field: storageLocation)
	materialSubLots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: storageLocation)
	inventoryHandlingRules(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @hasInverse(field: warehouse)
	operationsRequests(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest] @hasInverse(field: equipment)
	dataProvider: DataProvider
	dataProviderConnection: String
	addressTemplate: String
	timeZoneName: String
	workSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: equipment)
	workflowInstances(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @hasInverse(field: equipment)
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: equipment)
	jobResponses(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse] @hasInverse(field: equipment)
	jobOrders(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder] @hasInverse(field: equipment)
	shipments(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @hasInverse(field: warehouse)
	shipmentItems(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @hasInverse(field: bin)
	orders(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @hasInverse(field: warehouse)
	events(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog] @hasInverse(field: equipment)
	quantities(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog] @hasInverse(field: equipment)
	allowAdhocWorklog: Boolean
	reasons(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @hasInverse(field: equipment)
	reasonOverrides(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride] @hasInverse(field: equipment)
	propertyOverrides(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @hasInverse(field: equipment)
	mpmEnableJobInterlock: Boolean
	mpmPermissiveOutputName: String
	mpmEnableAutoIdentMatching: Boolean
	mpmAutoIdentMatchSource: String
	mpmEnableSetupStartDetection: Boolean
	mpmEnableSetupCloseDetection: Boolean
	mpmEnableORCWarning: Boolean
	mpmORCWarnTrigger: mpmORCWarnTriggers
	mpmEnableORCRevokePermissive: Boolean
	mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
	mpmEnableORCBlockNextOrder: Boolean
	mpmEnableCallMaintenanceEvent: Boolean
	mpmEnableMaintenanceHandover: Boolean
	mpmEnableManualShiftStart: Boolean
	mpmEnableManualShiftEnd: Boolean
	mpmEnableManualBreak: Boolean
	mpmEnableManualPlannedMaint: Boolean
	ocsEnabled: Boolean
	ocsPageState: String
	ocsWorkflowSelector: String
	ocsChosenStopTime: DateTime
	inflows(filter: EquipmentRelationFilter, first: Int, offset: Int): [EquipmentRelation] @hasInverse(field: to)
	outflows(filter: EquipmentRelationFilter, first: Int, offset: Int): [EquipmentRelation] @hasInverse(field: from)
	userRolesAggregate(filter: UserRoleFilter): UserRoleAggregateResult
	childrenAggregate(filter: EquipmentFilter): EquipmentAggregateResult
	equipmentActualAggregate(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	carriersAggregate(filter: CarrierFilter): CarrierAggregateResult
	materialSubLotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	inventoryHandlingRulesAggregate(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult
	operationsRequestsAggregate(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	workSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	workflowInstancesAggregate(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult
	jobResponsesAggregate(filter: JobResponseFilter): JobResponseAggregateResult
	jobOrdersAggregate(filter: JobOrderFilter): JobOrderAggregateResult
	shipmentsAggregate(filter: ShipmentFilter): ShipmentAggregateResult
	shipmentItemsAggregate(filter: ShipmentItemFilter): ShipmentItemAggregateResult
	ordersAggregate(filter: OrderFilter): OrderAggregateResult
	eventsAggregate(filter: EventLogFilter): EventLogAggregateResult
	quantitiesAggregate(filter: QuantityLogFilter): QuantityLogAggregateResult
	reasonsAggregate(filter: ReasonFilter): ReasonAggregateResult
	reasonOverridesAggregate(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult
	propertyOverridesAggregate(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	inflowsAggregate(filter: EquipmentRelationFilter): EquipmentRelationAggregateResult
	outflowsAggregate(filter: EquipmentRelationFilter): EquipmentRelationAggregateResult
}

type EquipmentRelation {
	id: ID!
	isActive: Boolean @search
	from(filter: EquipmentFilter): Equipment! @hasInverse(field: outflows)
	to(filter: EquipmentFilter): Equipment @hasInverse(field: inflows)
	type: EquipmentRelationshipType!
}

enum EquipmentRelationshipType {
	PERMANENT
	TEMPORARY
}

type EquipmentNameAlias @withSubscription {
	id: ID!
	equipment(filter: EquipmentFilter): Equipment!
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}

type PropertyNameAlias @withSubscription {
	id: ID!
	property(filter: PropertyFilter): Property! @hasInverse(field: propertyNameAliases)
	equipment(filter: EquipmentFilter): Equipment! @hasInverse(field: propertyNameAliases)
	alias: String! @search(by: [fulltext,hash])
	system: String! @search(by: [fulltext,hash])
}

type PropertyValueAlias @withSubscription {
	id: ID!
	property(filter: PropertyFilter): Property!
	value: String! @search(by: [fulltext])
	alias: String! @search(by: [fulltext])
	system: String! @search(by: [fulltext])
}

enum mpmORCWarnTriggers {
	FIFTEEN_MINUTES
	THIRTY_MINUTES
	FORTYFIVE_MINUTES
	SIXTY_MINUTES
	ORDER_CLOSE
	BREAK_TIME_START
	BREAK_TIME_END
}

enum mpmORCRevokeTriggers {
	FIFTEEN_MINUTES
	THIRTY_MINUTES
	FORTYFIVE_MINUTES
	SIXTY_MINUTES
	ORDER_CLOSE
	BREAK_TIME_START
	BREAK_TIME_END
}

"""EquipmentReasonOverrides are used to make equipment specific changes to equipment class reasons.
This allows 'Master Lists' of reasons to be defined on the equipment class and for overrides to the master
reasons to be made at the equipment level"""
type EquipmentReasonOverride @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: reasonOverrides)
	reason(filter: ReasonFilter): Reason @hasInverse(field: equipmentOverrides)
	ignore: Boolean
	standardValue: Float
}

"""EquipmentClasses are used to manage configuration that is common to a number of similar equipment
The data properties that an equipment is expected to have are defined on the equipment class"""
type EquipmentClass @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @search(by: [hash])
	label: String @search(by: [hash])
	displayName: String @search(by: [hash])
	description: String @search(by: [hash])
	parent(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: children)
	children(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass] @hasInverse(field: parent)
	equipments(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @hasInverse(field: equipmentClass)
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: equipmentClass)
	eventDefinitions(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: equipmentClass)
	equipmentSpecifications(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification] @hasInverse(field: equipmentClass)
	reasons(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @hasInverse(field: equipmentClass)
	equipmentLevel: EquipmentElementLevel
	addressTemplate: String
	image: String
	dashboardConfig(filter: DashboardConfigFilter): DashboardConfig
	childrenAggregate(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	equipmentsAggregate(filter: EquipmentFilter): EquipmentAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	eventDefinitionsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
	equipmentSpecificationsAggregate(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	reasonsAggregate(filter: ReasonFilter): ReasonAggregateResult
}

enum DataType {
	BOOL
	INT
	INT32
	FLOAT64
	FLOAT
	STRING
}

"""Data Providers are the client libraries that have been implemented in the edge agent.
We need to make these plugins that that the library can be extended easily.
At the moment, MQTT is all we have. We will add OPC-UA next"""
enum DataProvider {
	MQTT
	OPCUA
}

enum EquipmentElementLevel {
	Enterprise
	Site
	Area
	ProcessCell
	Unit
	ProductionLine
	WorkCell
	ProductionUnit
	Warehouse
	StorageZone
	StorageUnit
	WorkCenter
	WorkUnit
	EquipmentModule
	ControlModule
	Other
}

type Property @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	type: PropertyType @search(by: [hash])
	name: String! @search(by: [hash])
	description: String! @search(by: [hash])
	dataType: DataType
	definedBy(filter: PropertyFilter): Property
	address: String
	expression: String
	value: String
	unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	storeHistory: Boolean
	isTestedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: properties)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: properties)
	materialClass(filter: MaterialClassFilter): MaterialClass @hasInverse(field: properties)
	operationsRequest(filter: OperationsRequestFilter): OperationsRequest @hasInverse(field: properties)
	jobOrder(filter: JobOrderFilter): JobOrder @hasInverse(field: properties)
	propertyOverrides(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride] @hasInverse(field: property)
	propertyNameAliases(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias] @hasInverse(field: property)
	eventTriggers(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: triggerProperties)
	eventPayloads(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition] @hasInverse(field: payloadProperties)
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: property)
	isTestedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	propertyOverridesAggregate(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	propertyNameAliasesAggregate(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	eventTriggersAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
	eventPayloadsAggregate(filter: EventDefinitionFilter): EventDefinitionAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
}

enum PropertyType {
	BOUND
	CALCULATED
	REFERENCED
}

type EquipmentPropertyOverride @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	equipment(filter: EquipmentFilter): Equipment! @hasInverse(field: propertyOverrides)
	property(filter: PropertyFilter): Property! @hasInverse(field: propertyOverrides)
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

"""Multiple equipment events can be defined for an Equipment Template."""
type EventDefinition @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @search(by: [hash])
	messageClass: MessageClass!
	triggerProperties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: eventTriggers)
	triggerExpression: String!
	delayOption: Boolean
	delayTime: Int
	payloadProperties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: eventPayloads)
	payloadFields(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	orderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRuleset @hasInverse(field: eventDefs)
	stateEventRuleset(filter: StateEventRulesetFilter): StateEventRuleset @hasInverse(field: eventDefs)
	materialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRuleset @hasInverse(field: eventDefs)
	transitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRuleset @hasInverse(field: eventDefs)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: eventDefinitions)
	triggerPropertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	payloadPropertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	payloadFieldsAggregate(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult
}

type PayloadFieldDefinition @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String!
	expression: String!
	fieldType: PayloadFieldType
}

enum PayloadFieldType {
	Tag
	Field
	Other
}

type Reason @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	class: ReasonClass! @search(by: [hash])
	category(filter: ReasonCategoryFilter): ReasonCategory @hasInverse(field: reason)
	label: String! @search(by: [hash])
	text: String! @search(by: [hash])
	erpCode: String! @search(by: [hash])
	standardValue: Float
	valueUoM(filter: UnitOfMeasureFilter): UnitOfMeasure
	parent(filter: ReasonFilter): Reason @hasInverse(field: children)
	children(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @hasInverse(field: parent)
	equipmentClass(filter: EquipmentClassFilter): EquipmentClass @hasInverse(field: reasons)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: reasons)
	equipmentOverrides(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride] @hasInverse(field: reason)
	childrenAggregate(filter: ReasonFilter): ReasonAggregateResult
	equipmentOverridesAggregate(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult
}

enum ReasonClass {
	Time
	Scrap
}

enum MessageClass {
	EventLog
	QuantityLog
	PerformanceLog
	AttendanceLog
	JobRequest
	JobResponse
	OperationsRequestStart
	JobOrderStateChange
	JobOrderTransition
}

enum MachineState {
	Stopped
	Resetting
	Idle
	Starting
	Execute
	Unholding
	Held
	Holding
	Completing
	Complete
	Unsuspending
	Suspended
	Suspending
	Aborting
	Aborted
	Clearing
	Stopping
}

type ReasonCategory @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason] @hasInverse(field: category)
	code: String! @id
	timeCategory: TimeCategory!
	reasonAggregate(filter: ReasonFilter): ReasonAggregateResult
}

"""Time Category abbreviations are defined in ISO 22400 and are used
to calculate the ISO standard KPI"""
enum TimeCategory {
	"""APT is the actual production time is the time during a work unit is producing. It includes only the value-adding functions."""
	APT
	"""AUST is the actual setup time is the time actually consumed for the preparation of an order at a work unit."""
	AUST
	"""ADET is the actual unit delay times are actual times associated with malfunction-caused interrupts, minor stoppages,
and other unplanned time intervals that occur while tasks are being completed that lead to unwanted extension
of the order processing time"""
	ADET
	"""ADOT is the actual unit down time is the time when the work unit is not running with orders, although it is available."""
	ADOT
	"""PSDT is the time in which the work unit is planned to be out of operation"""
	PSDT
	"""PDOT is time, included in the planned operation time, in which the work unit is planned for no operations within the operation time period"""
	PDOT
	"""TTR is the time interval during which an item is in a down state due to a failure (IEC 60050-191)"""
	TTR
}

"""A unique identification of a specific material class, within the scope
of the information exchanged (production capability, production
schedule, production performance, …)
The ID shall be used in other parts of the model when the material
class needs to be identified, such as the production capability for
this material class, or a production response identifying the
material class used."""
type MaterialClass @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id
	description: String
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property] @hasInverse(field: materialClass)
	scheduleSortOrder: Int
	parent(filter: MaterialClassFilter): MaterialClass @hasInverse(field: children)
	children(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @hasInverse(field: parent)
	inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicy @hasInverse(field: materialClass)
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	childrenAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
}

type MaterialDefinition @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id
	name: String @search(by: [hash])
	materialClass(filter: MaterialClassFilter): MaterialClass
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialDefinition)
	description: String
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	parameterSpecifications(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification] @hasInverse(field: material)
	scheduleSortOrder: Int
	baseUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure!
	uomConversions(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion] @hasInverse(field: material)
	workSpecifications(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification] @hasInverse(field: material)
	operationsDefinitions(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition] @hasInverse(field: material)
	lots(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: material)
	sublots(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: material)
	units(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit] @hasInverse(field: material)
	value: Float
	valueCurrency: String
	weightKG: Float
	supplier: String
	serialMask: String
	inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicy
	inventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy] @hasInverse(field: material)
	alternates(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate] @hasInverse(field: material)
	shipmentItems(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @hasInverse(field: material)
	OrderLines(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @hasInverse(field: material)
	transferrableMaterials(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	customerMaterialCode: String @search(by: [hash])
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	parameterSpecificationsAggregate(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	uomConversionsAggregate(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult
	workSpecificationsAggregate(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	operationsDefinitionsAggregate(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	lotsAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	sublotsAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	unitsAggregate(filter: MaterialUnitFilter): MaterialUnitAggregateResult
	inventoryHoldingPolicyAggregate(filter: InventoryHoldingPolicyFilter): InventoryHoldingPolicyAggregateResult
	alternatesAggregate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult
	shipmentItemsAggregate(filter: ShipmentItemFilter): ShipmentItemAggregateResult
	OrderLinesAggregate(filter: OrderLineFilter): OrderLineAggregateResult
	transferrableMaterialsAggregate(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
}

type MaterialAlternate @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: alternates)
	alternateMaterial(filter: MaterialDefinitionFilter): MaterialDefinition!
	effectiveDateTime: DateTime!
	priorityOrder: Int!
}

type Carrier @key(fields: "id") {
	id: ID!
	code: String! @id
	isActive: Boolean @search
	storageLocation(filter: EquipmentFilter): Equipment! @hasInverse(field: carriers)
	status(filter: MaterialStatusFilter): MaterialStatus!
	barcodeImage: String
	owner(filter: PartnerFilter): Partner @hasInverse(field: carriers)
}

"""A uniquely identified specific amount of material, either countable or weighable shall be presented as a material lot.
A material lot describes the planned or actual total quantity or amount of material available, its current state
and its specific property values.
ref-IEC62264-2 5.4.6"""
type MaterialLot @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id
	description: String
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: lots)
	quantity: String
	dataType: DataType
	unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialLot)
	isAssembledFromLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: isComponentOfLot)
	isComponentOfLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: isAssembledFromLot)
	isAssembledFromSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: isComponentOfLot)
	isComponentOfSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: isAssembledFromLot)
	childSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: parentLot)
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	isAssembledFromLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	isComponentOfLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	isAssembledFromSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	isComponentOfSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	childSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
}

"""Each separately identifiable quantity of the same material lot shall be presented as a material sublot.
A material lot by be stored in separately identifiable quantities. All material sublots are part of the
material lot, so they have the material lot's property values. A material sublot may be just a single item.
ref-IEC62264-2 5.4.8"""
type MaterialSubLot @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: sublots)
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual] @hasInverse(field: materialSubLot)
	description: String
	status(filter: MaterialStatusFilter): MaterialStatus!
	storageLocation(filter: EquipmentFilter): Equipment @hasInverse(field: materialSubLots)
	isAssembledFromSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: isComponentOfSubLot)
	isComponentOfSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot] @hasInverse(field: isAssembledFromSubLot)
	isComponentOfLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: isAssembledFromSubLot)
	isAssembledFromLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot] @hasInverse(field: isComponentOfSubLot)
	parentLot(filter: MaterialLotFilter): MaterialLot @hasInverse(field: childSubLot)
	parentSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: childSubLot)
	childSubLot(filter: MaterialSubLotFilter): MaterialSubLot @hasInverse(field: parentSubLot)
	quantity: String
	dataType: DataType
	unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	materialActualAggregate(filter: MaterialActualFilter): MaterialActualAggregateResult
	isAssembledFromSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	isComponentOfSubLotAggregate(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	isComponentOfLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	isAssembledFromLotAggregate(filter: MaterialLotFilter): MaterialLotAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
}

type MaterialUnit @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	serialNumber: String! @id @search(by: [hash])
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: units)
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
}

"""The settings used to plan for when more material should be processed or purchased"""
type InventoryHoldingPolicy @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: inventoryHoldingPolicy)
	inventoryHandlingRule(filter: InventoryHandlingRuleFilter): InventoryHandlingRule! @hasInverse(field: inventoryHoldingPolicy)
	materialStatus(filter: MaterialStatusFilter): MaterialStatus! @hasInverse(field: inventoryHoldingPolicy)
	inventoryMax: Int
	inventoryMin: Int
}

type UnitOfMeasure @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id
	dataType: DataType
}

type UnitOfMeasureConversion @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	fromUoM(filter: UnitOfMeasureFilter): UnitOfMeasure!
	toUoM(filter: UnitOfMeasureFilter): UnitOfMeasure!
	numerator: Float!
	denominator: Float!
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: uomConversions)
}

type MaterialStatus @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	code: String! @id @search(by: [hash])
	inventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy] @hasInverse(field: materialStatus)
	inventoryHoldingPolicyAggregate(filter: InventoryHoldingPolicyFilter): InventoryHoldingPolicyAggregateResult
}

type MaterialStateModel @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id @search(by: [hash])
	states(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition!]!
	inventoryHandlingRules(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @hasInverse(field: stateModel)
	statesAggregate(filter: MaterialStateTransitionFilter): MaterialStateTransitionAggregateResult
	inventoryHandlingRulesAggregate(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult
}

type MaterialStateTransition @key(fields: "id") {
	id: ID!
	status(filter: MaterialStatusFilter): MaterialStatus!
	to(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	canReceive: Boolean @search
	canPack: Boolean @search
	isPlanned: Boolean @search
	toAggregate(filter: MaterialStatusFilter): MaterialStatusAggregateResult
}

"""Personnel Class represents a grouping of personnel with similar characteristics"""
type PersonnelClass @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	description: String
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	persons(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person] @hasInverse(field: memberOf)
	isTestedBy(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	personsAggregate(filter: PersonFilter): PersonAggregateResult
	isTestedByAggregate(filter: TestSpecificationFilter): TestSpecificationAggregateResult
}

type Person @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	description: String
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	memberOf(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass] @hasInverse(field: persons)
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual] @hasInverse(field: person)
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	memberOfAggregate(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	personnelActualAggregate(filter: PersonnelActualFilter): PersonnelActualAggregateResult
}

type TestSpecification @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	description: String
	version: String
}

type TestResult @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	description: String
	result: String
	uom(filter: UnitOfMeasureFilter): UnitOfMeasure
	testDateTime: DateTime
}

"""Work Calendar domain describes the definition of shift patterns and non-working days
The Work Calendar Definition defines the rule used to determine work calendar entries.
It contains the recurrence time for the rule, the duration of the entry, the entry type, and properties associated with the entry.
Standard Entry Types include Working Time and Non-Working Time. The entry may include property definitions.
The definition uses the rrule.js library to generate calendar events, and the fields available match
the configuration fields required by rrule.js"""
type WorkCalendarDefinitionEntry @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	description: String
	hierarchyScope(filter: EquipmentFilter): Equipment
	freq: Frequency!
	startDateTime: DateTime!
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType!
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	calendarEntries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @hasInverse(field: definition)
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: definition)
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
	calendarEntriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
}

enum Frequency {
	YEARLY
	MONTHLY
	WEEKLY
	DAILY
	HOURLY
	MINUTELY
	SECONDLY
}

enum Weekday {
	MO
	TU
	WE
	TH
	FR
	SA
	SU
}

type WorkCalendarEntry @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	description: String
	definition(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntry @hasInverse(field: calendarEntries)
	hierarchyScope(filter: EquipmentFilter): Equipment
	startDateTime: DateTime! @search
	finishDateTime: DateTime! @search
	entryType: WorkCalendarEntryType! @search
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	workCalendar(filter: WorkCalendarFilter): WorkCalendar @hasInverse(field: entries)
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
}

type WorkCalendar @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	description: String
	definition(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry] @hasInverse(field: workCalendar)
	entries(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry] @hasInverse(field: workCalendar)
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment] @hasInverse(field: workCalendar)
	definitionAggregate(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
	entriesAggregate(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
	equipmentAggregate(filter: EquipmentFilter): EquipmentAggregateResult
}

enum WorkCalendarEntryType {
	PlannedBusyTime
	PlannedDowntime
	PlannedShutdown
}

type WorkflowSpecification @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	name: String! @search(by: [hash])
	description: String!
	nodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @hasInverse(field: workflowSpecification)
	connections(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @hasInverse(field: workflowSpecification)
	instances(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @hasInverse(field: workflowSpecification)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	nodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
	connectionsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult
	instancesAggregate(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult
}

type WorkflowInstance @withSubscription @key(fields: "id") {
	id: ID!
	createdDateTime: DateTime @search
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	status: WorkflowNodeStatus @search
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification @hasInverse(field: instances)
	equipment(filter: EquipmentFilter): Equipment @hasInverse(field: workflowInstances)
	parent(filter: WorkflowInstanceFilter): WorkflowInstance @hasInverse(field: children)
	children(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance] @hasInverse(field: parent)
	nodeInstances(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance] @hasInverse(field: workflowInstance)
	propertyInstances(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance] @hasInverse(field: workflowInstance)
	properties(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty] @hasInverse(field: workflowInstance)
	orderLines(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @hasInverse(field: workflowInstance)
	childrenAggregate(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult
	nodeInstancesAggregate(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult
	propertyInstancesAggregate(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult
	propertiesAggregate(filter: WorkflowInstancePropertyFilter): WorkflowInstancePropertyAggregateResult
	orderLinesAggregate(filter: OrderLineFilter): OrderLineAggregateResult
}

type WorkflowInstanceProperty @withSubscription @key(fields: "id") {
	id: ID!
	key: String! @id
	workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance @hasInverse(field: properties)
	name: String!
	values(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
	valuesAggregate(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult
}

type WorkflowNode @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	name: String! @search(by: [hash])
	description: String!
	uiComponent: String
	form(filter: FormFilter): Form @hasInverse(field: workflowNodes)
	role(filter: RoleFilter): Role @hasInverse(field: workflowNodes)
	nodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeType! @hasInverse(field: nodes)
	inflows(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @hasInverse(field: to)
	outflows(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @hasInverse(field: from)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @hasInverse(field: nodes)
	properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @hasInverse(field: node)
	nodeInstances(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance] @hasInverse(field: node)
	positionX: Int
	positionY: Int
	width: Int
	height: Int
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	inflowsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult
	outflowsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult
	propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult
	nodeInstancesAggregate(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult
}

type WorkflowNodeInstance @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime @search
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	status: WorkflowNodeStatus @search
	assignedUser(filter: UserFilter): User @hasInverse(field: tasks)
	workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance! @hasInverse(field: nodeInstances)
	node(filter: WorkflowNodeFilter): WorkflowNode! @hasInverse(field: nodeInstances)
	events(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent] @hasInverse(field: nodeInstance)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	eventsAggregate(filter: WorkflowNodeEventFilter): WorkflowNodeEventAggregateResult
}

type WorkflowNodeEvent @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime @search
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	nodeInstance(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstance @hasInverse(field: events)
	previous(filter: WorkflowNodeEventFilter): WorkflowNodeEvent @hasInverse(field: next)
	next(filter: WorkflowNodeEventFilter): WorkflowNodeEvent @hasInverse(field: previous)
	status: WorkflowNodeStatus @search
	isProcessed: Boolean @search
	value: String
	accessAggregate(filter: ACLFilter): ACLAggregateResult
}

enum WorkflowNodeStatus {
	CREATED
	CLAIMED
	STARTED
	PAUSED
	COMPLETED
}

type WorkflowNodeType @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	name: String!
	description: String!
	nodeClass: WorkflowNodeClass!
	nodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @hasInverse(field: nodeType)
	properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @hasInverse(field: nodeType)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	nodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
	propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult
}

enum WorkflowNodeClass {
	EVENT_START
	EVENT_END
	EVENT_INTERMEDIATE
	GATEWAY
	TASK_USER
	TASK_SYSTEM
	SUBPROCESS
}

type WorkflowConnection @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	connectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionType! @hasInverse(field: connections)
	workflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecification! @hasInverse(field: connections)
	from(filter: WorkflowNodeFilter): WorkflowNode! @hasInverse(field: outflows)
	to(filter: WorkflowNodeFilter): WorkflowNode! @hasInverse(field: inflows)
	condition: String
	properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @hasInverse(field: connection)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult
}

type WorkflowConnectionType @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	name: String!
	description: String!
	connections(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection] @hasInverse(field: connectionType)
	properties(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty] @hasInverse(field: connectionType)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	connectionsAggregate(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult
	propertiesAggregate(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult
}

type WorkflowProperty @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	propertyType: WorkflowPropertyType!
	name: String! @search(by: [hash])
	description: String! @search(by: [hash])
	definedBy(filter: WorkflowPropertyFilter): WorkflowProperty
	dataType: DataType
	unitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasure
	value: String
	nodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeType @hasInverse(field: properties)
	node(filter: WorkflowNodeFilter): WorkflowNode @hasInverse(field: properties)
	connectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionType @hasInverse(field: properties)
	connection(filter: WorkflowConnectionFilter): WorkflowConnection @hasInverse(field: properties)
	instances(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance] @hasInverse(field: workflowProperty)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	instancesAggregate(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult
}

type WorkflowPropertyInstance @withSubscription @key(fields: "id") {
	id: ID!
	access(filter: ACLFilter, first: Int, offset: Int): [ACL]
	isActive: Boolean @search
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance @hasInverse(field: propertyInstances)
	workflowProperty(filter: WorkflowPropertyFilter): WorkflowProperty @hasInverse(field: instances)
	values(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue] @hasInverse(field: propertyInstance)
	accessAggregate(filter: ACLFilter): ACLAggregateResult
	valuesAggregate(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult
}

type WorkflowPropertyValue @withSubscription @key(fields: "id") {
	id: ID!
	createdDateTime: DateTime
	createdBy(filter: UserFilter): User
	modifiedDateTime: DateTime
	modifiedBy(filter: UserFilter): User
	propertyInstance(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstance! @hasInverse(field: values)
	value: String
	previous(filter: WorkflowPropertyValueFilter): WorkflowPropertyValue @hasInverse(field: next)
	next(filter: WorkflowPropertyValueFilter): WorkflowPropertyValue @hasInverse(field: previous)
}

enum WorkflowPropertyType {
	STATIC
	CONFIG
	VARIABLE
}

type Form @withSubscription @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id
	workflowNodes(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode] @hasInverse(field: form)
	jsonSchema: String
	uiSchema: String
	workflowNodesAggregate(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
}

type Partner @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	companyCode: String! @search(by: [hash])
	name: String @search(by: [hash])
	vatNumber: String
	registrationNumber: String
	contactName: String
	contactEmail: String
	contactPhone: String
	shippingAddress(filter: AddressFilter): Address
	billingAddress(filter: AddressFilter): Address
	isMerchant: Boolean @search
	isRepairer: Boolean @search
	isSupplier: Boolean @search
	isTransport: Boolean @search
	isCustomer: Boolean @search
	isInventoryOwner: Boolean @search
	carriers(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier] @hasInverse(field: owner)
	fromOrders(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @hasInverse(field: shipFromPartner)
	toOrders(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order] @hasInverse(field: shipToPartner)
	shippingAccounts(filter: ShippingAccountFilter, order: ShippingAccountOrder, first: Int, offset: Int): [ShippingAccount] @hasInverse(field: partner)
	carriersAggregate(filter: CarrierFilter): CarrierAggregateResult
	fromOrdersAggregate(filter: OrderFilter): OrderAggregateResult
	toOrdersAggregate(filter: OrderFilter): OrderAggregateResult
	shippingAccountsAggregate(filter: ShippingAccountFilter): ShippingAccountAggregateResult
}

type ShippingAccount @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	partner(filter: PartnerFilter): Partner @hasInverse(field: shippingAccounts)
	transportCompany: TransportCompany @search
	warehouse(filter: EquipmentFilter): Equipment
	accountNumber: String
	username: String
	secret: String
}

enum StockType {
	NEW_STOCK
	REPAIRED
	RETURNED
}

type InventoryHandlingPolicy @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String! @id @search(by: [hash])
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass] @hasInverse(field: inventoryHandlingPolicy)
	verifySerialNumberOnReceipt: Boolean
	verifySerialNumberOnPacking: Boolean
	trackBySerialNumber: Boolean
	trackByCarrier: Boolean
	rules(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule] @hasInverse(field: inventoryHandlingPolicy)
	materialClassAggregate(filter: MaterialClassFilter): MaterialClassAggregateResult
	rulesAggregate(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult
}

type InventoryHandlingRule @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	customer(filter: PartnerFilter): Partner!
	stockType: StockType! @search(by: [hash])
	warehouse(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment!]! @hasInverse(field: inventoryHandlingRules)
	stateModel(filter: MaterialStateModelFilter): MaterialStateModel! @hasInverse(field: inventoryHandlingRules)
	inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicy! @hasInverse(field: rules)
	inventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy] @hasInverse(field: inventoryHandlingRule)
	warehouseAggregate(filter: EquipmentFilter): EquipmentAggregateResult
	inventoryHoldingPolicyAggregate(filter: InventoryHoldingPolicyFilter): InventoryHoldingPolicyAggregateResult
}

type Address @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	name: String @search(by: [hash])
	street1: String
	street2: String
	number: String
	city: String
	state: String
	postCode: String
	countryCode: String
}

type Delivery @key(fields: "id") {
	id: ID!
	dateTime: DateTime!
	shipments(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @hasInverse(field: delivered)
	location(filter: EquipmentFilter): Equipment
	operator(filter: UserFilter): User
	partner(filter: PartnerFilter): Partner
	transportCompany: TransportCompany
	transportCompanyDeliveryId: String
	shipmentsAggregate(filter: ShipmentFilter): ShipmentAggregateResult
}

"""An outbound Sales Order to be fulfilled"""
type Order @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	orderType: OrderType! @search
	customerOrderNumber: String @search(by: [hash,fulltext])
	customerReference: String
	deliveryTerms: IncoTerms
	status: OrderStatus!
	shipFromPartner(filter: PartnerFilter): Partner @hasInverse(field: fromOrders)
	shipToPartner(filter: PartnerFilter): Partner @hasInverse(field: toOrders)
	invoiceFromPartner(filter: PartnerFilter): Partner
	invoiceToPartner(filter: PartnerFilter): Partner
	warehouse(filter: EquipmentFilter): Equipment @hasInverse(field: orders)
	lines(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine] @hasInverse(field: order)
	shipments(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment] @hasInverse(field: order)
	notes: String
	createdDateTime: DateTime
	linesAggregate(filter: OrderLineFilter): OrderLineAggregateResult
	shipmentsAggregate(filter: ShipmentFilter): ShipmentAggregateResult
}

enum OrderType {
	SALES_ORDER
	RETURN_ORDER
	REPLACE_ORDER
	REPAIR_ORDER
	PURCHASE_ORDER
}

type OrderLine @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	order(filter: OrderFilter): Order @hasInverse(field: lines)
	orderLineNumber: Int!
	material(filter: MaterialDefinitionFilter): MaterialDefinition! @hasInverse(field: OrderLines)
	quantity: Int!
	defectiveSerialNumbers: String
	isReturn: Boolean
	workflowInstance(filter: WorkflowInstanceFilter): WorkflowInstance @hasInverse(field: orderLines)
}

enum IncoTerms {
	DAP
	DDP
	CPT
}

enum OrderStatus {
	CREATED
	RECEIVED
	PACKED
	SHIPPED
	DELIVERED
	COMPLETE
}

"""A shipment represents a consignment of goods being sent or received into a warehouse"""
type Shipment @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	type: ShipmentType! @search(by: [hash])
	transportCompany: TransportCompany
	transportCompanyShipmentId: String
	transportCompanyProductCode: String
	reference: String @search(by: [hash,regexp])
	items(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem] @hasInverse(field: shipment)
	customerReference: String
	emailTrackingEnabled: Boolean
	from(filter: AddressFilter): Address
	to(filter: AddressFilter): Address
	order(filter: OrderFilter): Order! @hasInverse(field: shipments)
	warehouse(filter: EquipmentFilter): Equipment! @hasInverse(field: shipments)
	consignmentNumber: String @search(by: [hash,fulltext])
	properties(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	dateTimeReceivedUTC: DateTime @search
	dateTimeDeliveredUTC: DateTime @search
	dateTimePackedUTC: DateTime @search
	dateTimeCreatedUTC: DateTime @search
	delivered(filter: DeliveryFilter): Delivery @hasInverse(field: shipments)
	status: ShipmentStatus @search(by: [hash])
	itemsAggregate(filter: ShipmentItemFilter): ShipmentItemAggregateResult
	propertiesAggregate(filter: PropertyFilter): PropertyAggregateResult
}

enum ShipmentType {
	INBOUND
	OUTBOUND
	RETURN
}

enum ShipmentStatus {
	CREATED
	PACKED
	SHIPPED
	DELIVERED
	COMPLETE
	RECEIVED
	UNPACKED
}

"""A shipment item represents an individual package or line item within the shipment"""
type ShipmentItem @key(fields: "id") {
	id: ID!
	isActive: Boolean @search
	transportCompanyItemReference: String
	transportCompanyItemId: String
	trackingDetailsArticleId: String
	trackingDetailsBarcodeId: String
	trackingDetailsConsignmentId: String
	shipment(filter: ShipmentFilter): Shipment @hasInverse(field: items)
	status: ShipmentItemStatus! @search(by: [hash])
	material(filter: MaterialDefinitionFilter): MaterialDefinition @hasInverse(field: shipmentItems)
	plannedQuantity: Int
	isParcel: Boolean @search
	bin(filter: EquipmentFilter): Equipment @hasInverse(field: shipmentItems)
	box(filter: BoxFilter): Box
	weightKg: Float
}

type Box {
	id: ID!
	name: String
	sizeHeightCm: Int
	sizeWidthCm: Int
	sizeDepthCm: Int
}

enum ShipmentItemStatus {
	CREATED
	PACKED
	SHIPPED
	DELIVERED
	DELETED
}

"""Companies that we have API integration with should be listed here.
Manual is used to indicate that no API is available."""
enum TransportCompany {
	AUSPOST
	MANUAL
}

type GeneralLedgerAccount {
	id: ID!
	code: String! @id
	name: String
	type: String
}

enum CostDriver {
	PER_HOUR
	PER_UNIT
}

type InterfaceMessageLog {
	id: ID!
	createdDateTime: DateTime @search
	level: String @search
	message: String @search
	component: String @search
	status: String @search
	errorMessage: String
	payload: String
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Extended Apollo Definitions
#######################
union _Entity = User | LibreService | OperationsRequest | RequestState | OperationsDefinition | BillOfMaterial | OperationsSegment | SegmentInvoiceSetting | SegmentDependency | JobOrder | JobResponse | PersonnelActual | EquipmentActual | MaterialActual | EventLog | QuantityLog | EquipmentSpecification | MaterialSpecification | PersonnelSpecification | ParameterSpecification | Equipment | EquipmentReasonOverride | EquipmentClass | Property | EquipmentPropertyOverride | EventDefinition | PayloadFieldDefinition | Reason | ReasonCategory | MaterialClass | MaterialDefinition | MaterialAlternate | Carrier | MaterialLot | MaterialSubLot | MaterialUnit | InventoryHoldingPolicy | UnitOfMeasure | UnitOfMeasureConversion | MaterialStatus | MaterialStateModel | MaterialStateTransition | PersonnelClass | Person | TestSpecification | TestResult | WorkCalendarDefinitionEntry | WorkCalendarEntry | WorkCalendar | WorkflowSpecification | WorkflowInstance | WorkflowInstanceProperty | WorkflowNode | WorkflowNodeInstance | WorkflowNodeEvent | WorkflowNodeType | WorkflowConnection | WorkflowConnectionType | WorkflowProperty | WorkflowPropertyInstance | WorkflowPropertyValue | Form | Partner | ShippingAccount | InventoryHandlingPolicy | InventoryHandlingRule | Address | Delivery | Order | OrderLine | Shipment | ShipmentItem

scalar _Any
scalar _FieldSet

type _Service {
	sdl: String
}

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT | INTERFACE

#######################
# Generated Types
#######################

type ACLAggregateResult {
	count: Int
}

type AccessRightAggregateResult {
	count: Int
}

type AddACLPayload {
	aCL(filter: ACLFilter, first: Int, offset: Int): [ACL]
	numUids: Int
}

type AddAccessRightPayload {
	accessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
	numUids: Int
}

type AddAddressPayload {
	address(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
	numUids: Int
}

type AddBillOfMaterialPayload {
	billOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
	numUids: Int
}

type AddBoxPayload {
	box(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
	numUids: Int
}

type AddCarrierPayload {
	carrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
	numUids: Int
}

type AddDashboardConfigPayload {
	dashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
	numUids: Int
}

type AddDashboardPanelConfigPayload {
	dashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
	numUids: Int
}

type AddDashboardWidgetConfigPropertyPayload {
	dashboardWidgetConfigProperty(filter: DashboardWidgetConfigPropertyFilter, order: DashboardWidgetConfigPropertyOrder, first: Int, offset: Int): [DashboardWidgetConfigProperty]
	numUids: Int
}

type AddDeliveryPayload {
	delivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
	numUids: Int
}

type AddEquipmentActualPayload {
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	numUids: Int
}

type AddEquipmentClassPayload {
	equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	numUids: Int
}

type AddEquipmentNameAliasPayload {
	equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	numUids: Int
}

type AddEquipmentPayload {
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	numUids: Int
}

type AddEquipmentPropertyOverridePayload {
	equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	numUids: Int
}

type AddEquipmentReasonOverridePayload {
	equipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
	numUids: Int
}

type AddEquipmentRelationPayload {
	equipmentRelation(filter: EquipmentRelationFilter, first: Int, offset: Int): [EquipmentRelation]
	numUids: Int
}

type AddEquipmentSpecificationPayload {
	equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	numUids: Int
}

type AddEventDefinitionPayload {
	eventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
	numUids: Int
}

type AddEventLogPayload {
	eventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
	numUids: Int
}

type AddFormPayload {
	form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	numUids: Int
}

type AddGeneralLedgerAccountPayload {
	generalLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
	numUids: Int
}

type AddInterfaceMessageLogPayload {
	interfaceMessageLog(filter: InterfaceMessageLogFilter, order: InterfaceMessageLogOrder, first: Int, offset: Int): [InterfaceMessageLog]
	numUids: Int
}

type AddInventoryHandlingPolicyPayload {
	inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
	numUids: Int
}

type AddInventoryHandlingRulePayload {
	inventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
	numUids: Int
}

type AddInventoryHoldingPolicyPayload {
	inventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy]
	numUids: Int
}

type AddJobOrderDependencyPayload {
	jobOrderDependency(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency]
	numUids: Int
}

type AddJobOrderDispatchStateModelPayload {
	jobOrderDispatchStateModel(filter: JobOrderDispatchStateModelFilter, first: Int, offset: Int): [JobOrderDispatchStateModel]
	numUids: Int
}

type AddJobOrderNotePayload {
	jobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
	numUids: Int
}

type AddJobOrderPayload {
	jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	numUids: Int
}

type AddJobResponsePayload {
	jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	numUids: Int
}

type AddLibreServicePayload {
	libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	numUids: Int
}

type AddMaterialActualPayload {
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	numUids: Int
}

type AddMaterialAlternatePayload {
	materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	numUids: Int
}

type AddMaterialClassPayload {
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	numUids: Int
}

type AddMaterialDefinitionPayload {
	materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	numUids: Int
}

type AddMaterialEventRulesetPayload {
	materialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
	numUids: Int
}

type AddMaterialLotPayload {
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	numUids: Int
}

type AddMaterialSpecificationPayload {
	materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	numUids: Int
}

type AddMaterialStateModelPayload {
	materialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
	numUids: Int
}

type AddMaterialStateTransitionPayload {
	materialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
	numUids: Int
}

type AddMaterialStatusPayload {
	materialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	numUids: Int
}

type AddMaterialSubLotPayload {
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	numUids: Int
}

type AddMaterialUnitPayload {
	materialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
	numUids: Int
}

type AddMenuPayload {
	menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	numUids: Int
}

type AddOperationsDefinitionPayload {
	operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	numUids: Int
}

type AddOperationsRequestPayload {
	operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	numUids: Int
}

type AddOperationsSegmentPayload {
	operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	numUids: Int
}

type AddOrderLinePayload {
	orderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
	numUids: Int
}

type AddOrderPayload {
	order(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
	numUids: Int
}

type AddOrderStartRulesetPayload {
	orderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
	numUids: Int
}

type AddParameterSpecificationPayload {
	parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	numUids: Int
}

type AddPartnerPayload {
	partner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
	numUids: Int
}

type AddPayloadFieldDefinitionPayload {
	payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	numUids: Int
}

type AddPersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

type AddPersonnelActualPayload {
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	numUids: Int
}

type AddPersonnelClassPayload {
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	numUids: Int
}

type AddPersonnelSpecificationPayload {
	personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	numUids: Int
}

type AddPropertyNameAliasPayload {
	propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	numUids: Int
}

type AddPropertyPayload {
	property(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	numUids: Int
}

type AddPropertyValueAliasPayload {
	propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	numUids: Int
}

type AddQuantityLogPayload {
	quantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
	numUids: Int
}

type AddReasonCategoryPayload {
	reasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
	numUids: Int
}

type AddReasonPayload {
	reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
	numUids: Int
}

type AddRequestStatePayload {
	requestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
	numUids: Int
}

type AddRolePayload {
	role(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
	numUids: Int
}

type AddSegmentDependencyPayload {
	segmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
	numUids: Int
}

type AddSegmentInvoiceSettingPayload {
	segmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
	numUids: Int
}

type AddShipmentItemPayload {
	shipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
	numUids: Int
}

type AddShipmentPayload {
	shipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
	numUids: Int
}

type AddShippingAccountPayload {
	shippingAccount(filter: ShippingAccountFilter, order: ShippingAccountOrder, first: Int, offset: Int): [ShippingAccount]
	numUids: Int
}

type AddStateEventRulesetPayload {
	stateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
	numUids: Int
}

type AddTestResultPayload {
	testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	numUids: Int
}

type AddTestSpecificationPayload {
	testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	numUids: Int
}

type AddTransitionEventRulesetPayload {
	transitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
	numUids: Int
}

type AddUnitOfMeasureConversionPayload {
	unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	numUids: Int
}

type AddUnitOfMeasurePayload {
	unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	numUids: Int
}

type AddUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type AddUserRolePayload {
	userRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
	numUids: Int
}

type AddWorkCalendarDefinitionEntryPayload {
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	numUids: Int
}

type AddWorkCalendarEntryPayload {
	workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	numUids: Int
}

type AddWorkCalendarPayload {
	workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	numUids: Int
}

type AddWorkflowConnectionPayload {
	workflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
	numUids: Int
}

type AddWorkflowConnectionTypePayload {
	workflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
	numUids: Int
}

type AddWorkflowInstancePayload {
	workflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
	numUids: Int
}

type AddWorkflowInstancePropertyPayload {
	workflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
	numUids: Int
}

type AddWorkflowNodeEventPayload {
	workflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
	numUids: Int
}

type AddWorkflowNodeInstancePayload {
	workflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
	numUids: Int
}

type AddWorkflowNodePayload {
	workflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
	numUids: Int
}

type AddWorkflowNodeTypePayload {
	workflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
	numUids: Int
}

type AddWorkflowPropertyInstancePayload {
	workflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
	numUids: Int
}

type AddWorkflowPropertyPayload {
	workflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
	numUids: Int
}

type AddWorkflowPropertyValuePayload {
	workflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
	numUids: Int
}

type AddWorkflowSpecificationPayload {
	workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	numUids: Int
}

type AddressAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	street1Min: String
	street1Max: String
	street2Min: String
	street2Max: String
	numberMin: String
	numberMax: String
	cityMin: String
	cityMax: String
	stateMin: String
	stateMax: String
	postCodeMin: String
	postCodeMax: String
	countryCodeMin: String
	countryCodeMax: String
}

type BillOfMaterialAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
}

type BoxAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	sizeHeightCmMin: Int
	sizeHeightCmMax: Int
	sizeHeightCmSum: Int
	sizeHeightCmAvg: Float
	sizeWidthCmMin: Int
	sizeWidthCmMax: Int
	sizeWidthCmSum: Int
	sizeWidthCmAvg: Float
	sizeDepthCmMin: Int
	sizeDepthCmMax: Int
	sizeDepthCmSum: Int
	sizeDepthCmAvg: Float
}

type CarrierAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	barcodeImageMin: String
	barcodeImageMax: String
}

type DashboardConfigAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type DashboardPanelConfigAggregateResult {
	count: Int
	widgetNameMin: String
	widgetNameMax: String
	xMin: Int
	xMax: Int
	xSum: Int
	xAvg: Float
	yMin: Int
	yMax: Int
	ySum: Int
	yAvg: Float
	wMin: Int
	wMax: Int
	wSum: Int
	wAvg: Float
	hMin: Int
	hMax: Int
	hSum: Int
	hAvg: Float
}

type DashboardWidgetConfigPropertyAggregateResult {
	count: Int
	keyMin: String
	keyMax: String
	valueMin: String
	valueMax: String
}

type DeleteACLPayload {
	aCL(filter: ACLFilter, first: Int, offset: Int): [ACL]
	msg: String
	numUids: Int
}

type DeleteAccessRightPayload {
	accessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
	msg: String
	numUids: Int
}

type DeleteAddressPayload {
	address(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
	msg: String
	numUids: Int
}

type DeleteBillOfMaterialPayload {
	billOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
	msg: String
	numUids: Int
}

type DeleteBoxPayload {
	box(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
	msg: String
	numUids: Int
}

type DeleteCarrierPayload {
	carrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
	msg: String
	numUids: Int
}

type DeleteDashboardConfigPayload {
	dashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
	msg: String
	numUids: Int
}

type DeleteDashboardPanelConfigPayload {
	dashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
	msg: String
	numUids: Int
}

type DeleteDashboardWidgetConfigPropertyPayload {
	dashboardWidgetConfigProperty(filter: DashboardWidgetConfigPropertyFilter, order: DashboardWidgetConfigPropertyOrder, first: Int, offset: Int): [DashboardWidgetConfigProperty]
	msg: String
	numUids: Int
}

type DeleteDeliveryPayload {
	delivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
	msg: String
	numUids: Int
}

type DeleteEquipmentActualPayload {
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	msg: String
	numUids: Int
}

type DeleteEquipmentClassPayload {
	equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	msg: String
	numUids: Int
}

type DeleteEquipmentNameAliasPayload {
	equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	msg: String
	numUids: Int
}

type DeleteEquipmentPayload {
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	msg: String
	numUids: Int
}

type DeleteEquipmentPropertyOverridePayload {
	equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	msg: String
	numUids: Int
}

type DeleteEquipmentReasonOverridePayload {
	equipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
	msg: String
	numUids: Int
}

type DeleteEquipmentRelationPayload {
	equipmentRelation(filter: EquipmentRelationFilter, first: Int, offset: Int): [EquipmentRelation]
	msg: String
	numUids: Int
}

type DeleteEquipmentSpecificationPayload {
	equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	msg: String
	numUids: Int
}

type DeleteEventDefinitionPayload {
	eventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
	msg: String
	numUids: Int
}

type DeleteEventLogPayload {
	eventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
	msg: String
	numUids: Int
}

type DeleteFormPayload {
	form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	msg: String
	numUids: Int
}

type DeleteGeneralLedgerAccountPayload {
	generalLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
	msg: String
	numUids: Int
}

type DeleteInterfaceMessageLogPayload {
	interfaceMessageLog(filter: InterfaceMessageLogFilter, order: InterfaceMessageLogOrder, first: Int, offset: Int): [InterfaceMessageLog]
	msg: String
	numUids: Int
}

type DeleteInventoryHandlingPolicyPayload {
	inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
	msg: String
	numUids: Int
}

type DeleteInventoryHandlingRulePayload {
	inventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
	msg: String
	numUids: Int
}

type DeleteInventoryHoldingPolicyPayload {
	inventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy]
	msg: String
	numUids: Int
}

type DeleteJobOrderDependencyPayload {
	jobOrderDependency(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency]
	msg: String
	numUids: Int
}

type DeleteJobOrderDispatchStateModelPayload {
	jobOrderDispatchStateModel(filter: JobOrderDispatchStateModelFilter, first: Int, offset: Int): [JobOrderDispatchStateModel]
	msg: String
	numUids: Int
}

type DeleteJobOrderNotePayload {
	jobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
	msg: String
	numUids: Int
}

type DeleteJobOrderPayload {
	jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	msg: String
	numUids: Int
}

type DeleteJobResponsePayload {
	jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	msg: String
	numUids: Int
}

type DeleteLibreServicePayload {
	libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	msg: String
	numUids: Int
}

type DeleteMaterialActualPayload {
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	msg: String
	numUids: Int
}

type DeleteMaterialAlternatePayload {
	materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	msg: String
	numUids: Int
}

type DeleteMaterialClassPayload {
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	msg: String
	numUids: Int
}

type DeleteMaterialDefinitionPayload {
	materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	msg: String
	numUids: Int
}

type DeleteMaterialEventRulesetPayload {
	materialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
	msg: String
	numUids: Int
}

type DeleteMaterialLotPayload {
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	msg: String
	numUids: Int
}

type DeleteMaterialSpecificationPayload {
	materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	msg: String
	numUids: Int
}

type DeleteMaterialStateModelPayload {
	materialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
	msg: String
	numUids: Int
}

type DeleteMaterialStateTransitionPayload {
	materialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
	msg: String
	numUids: Int
}

type DeleteMaterialStatusPayload {
	materialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	msg: String
	numUids: Int
}

type DeleteMaterialSubLotPayload {
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	msg: String
	numUids: Int
}

type DeleteMaterialUnitPayload {
	materialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
	msg: String
	numUids: Int
}

type DeleteMenuPayload {
	menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	msg: String
	numUids: Int
}

type DeleteOperationsDefinitionPayload {
	operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	msg: String
	numUids: Int
}

type DeleteOperationsRequestPayload {
	operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	msg: String
	numUids: Int
}

type DeleteOperationsSegmentPayload {
	operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	msg: String
	numUids: Int
}

type DeleteOrderLinePayload {
	orderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
	msg: String
	numUids: Int
}

type DeleteOrderPayload {
	order(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
	msg: String
	numUids: Int
}

type DeleteOrderStartRulesetPayload {
	orderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
	msg: String
	numUids: Int
}

type DeleteParameterSpecificationPayload {
	parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	msg: String
	numUids: Int
}

type DeletePartnerPayload {
	partner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
	msg: String
	numUids: Int
}

type DeletePayloadFieldDefinitionPayload {
	payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	msg: String
	numUids: Int
}

type DeletePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	msg: String
	numUids: Int
}

type DeletePersonnelActualPayload {
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	msg: String
	numUids: Int
}

type DeletePersonnelClassPayload {
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	msg: String
	numUids: Int
}

type DeletePersonnelSpecificationPayload {
	personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	msg: String
	numUids: Int
}

type DeletePropertyNameAliasPayload {
	propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	msg: String
	numUids: Int
}

type DeletePropertyPayload {
	property(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	msg: String
	numUids: Int
}

type DeletePropertyValueAliasPayload {
	propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	msg: String
	numUids: Int
}

type DeleteQuantityLogPayload {
	quantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
	msg: String
	numUids: Int
}

type DeleteReasonCategoryPayload {
	reasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
	msg: String
	numUids: Int
}

type DeleteReasonPayload {
	reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
	msg: String
	numUids: Int
}

type DeleteRequestStatePayload {
	requestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
	msg: String
	numUids: Int
}

type DeleteRolePayload {
	role(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
	msg: String
	numUids: Int
}

type DeleteSegmentDependencyPayload {
	segmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
	msg: String
	numUids: Int
}

type DeleteSegmentInvoiceSettingPayload {
	segmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
	msg: String
	numUids: Int
}

type DeleteShipmentItemPayload {
	shipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
	msg: String
	numUids: Int
}

type DeleteShipmentPayload {
	shipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
	msg: String
	numUids: Int
}

type DeleteShippingAccountPayload {
	shippingAccount(filter: ShippingAccountFilter, order: ShippingAccountOrder, first: Int, offset: Int): [ShippingAccount]
	msg: String
	numUids: Int
}

type DeleteStateEventRulesetPayload {
	stateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
	msg: String
	numUids: Int
}

type DeleteTestResultPayload {
	testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	msg: String
	numUids: Int
}

type DeleteTestSpecificationPayload {
	testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	msg: String
	numUids: Int
}

type DeleteTransitionEventRulesetPayload {
	transitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
	msg: String
	numUids: Int
}

type DeleteUnitOfMeasureConversionPayload {
	unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	msg: String
	numUids: Int
}

type DeleteUnitOfMeasurePayload {
	unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	msg: String
	numUids: Int
}

type DeleteUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	msg: String
	numUids: Int
}

type DeleteUserRolePayload {
	userRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarDefinitionEntryPayload {
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarEntryPayload {
	workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	msg: String
	numUids: Int
}

type DeleteWorkCalendarPayload {
	workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	msg: String
	numUids: Int
}

type DeleteWorkflowConnectionPayload {
	workflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
	msg: String
	numUids: Int
}

type DeleteWorkflowConnectionTypePayload {
	workflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
	msg: String
	numUids: Int
}

type DeleteWorkflowInstancePayload {
	workflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
	msg: String
	numUids: Int
}

type DeleteWorkflowInstancePropertyPayload {
	workflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowNodeEventPayload {
	workflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
	msg: String
	numUids: Int
}

type DeleteWorkflowNodeInstancePayload {
	workflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
	msg: String
	numUids: Int
}

type DeleteWorkflowNodePayload {
	workflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
	msg: String
	numUids: Int
}

type DeleteWorkflowNodeTypePayload {
	workflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
	msg: String
	numUids: Int
}

type DeleteWorkflowPropertyInstancePayload {
	workflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
	msg: String
	numUids: Int
}

type DeleteWorkflowPropertyPayload {
	workflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
	msg: String
	numUids: Int
}

type DeleteWorkflowPropertyValuePayload {
	workflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
	msg: String
	numUids: Int
}

type DeleteWorkflowSpecificationPayload {
	workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	msg: String
	numUids: Int
}

type DeliveryAggregateResult {
	count: Int
	dateTimeMin: DateTime
	dateTimeMax: DateTime
	transportCompanyDeliveryIdMin: String
	transportCompanyDeliveryIdMax: String
}

type EquipmentActualAggregateResult {
	count: Int
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EquipmentAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	labelMin: String
	labelMax: String
	displayNameMin: String
	displayNameMax: String
	descriptionMin: String
	descriptionMax: String
	erpAssetIDMin: String
	erpAssetIDMax: String
	dataProviderConnectionMin: String
	dataProviderConnectionMax: String
	addressTemplateMin: String
	addressTemplateMax: String
	timeZoneNameMin: String
	timeZoneNameMax: String
	mpmPermissiveOutputNameMin: String
	mpmPermissiveOutputNameMax: String
	mpmAutoIdentMatchSourceMin: String
	mpmAutoIdentMatchSourceMax: String
	ocsPageStateMin: String
	ocsPageStateMax: String
	ocsWorkflowSelectorMin: String
	ocsWorkflowSelectorMax: String
	ocsChosenStopTimeMin: DateTime
	ocsChosenStopTimeMax: DateTime
}

type EquipmentClassAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	labelMin: String
	labelMax: String
	displayNameMin: String
	displayNameMax: String
	descriptionMin: String
	descriptionMax: String
	addressTemplateMin: String
	addressTemplateMax: String
	imageMin: String
	imageMax: String
}

type EquipmentNameAliasAggregateResult {
	count: Int
	aliasMin: String
	aliasMax: String
	systemMin: String
	systemMax: String
}

type EquipmentPropertyOverrideAggregateResult {
	count: Int
	addressMin: String
	addressMax: String
	expressionMin: String
	expressionMax: String
	valueMin: String
	valueMax: String
}

type EquipmentReasonOverrideAggregateResult {
	count: Int
	standardValueMin: Float
	standardValueMax: Float
	standardValueSum: Float
	standardValueAvg: Float
}

type EquipmentRelationAggregateResult {
	count: Int
}

type EquipmentSpecificationAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type EventDefinitionAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	triggerExpressionMin: String
	triggerExpressionMax: String
	delayTimeMin: Int
	delayTimeMax: Int
	delayTimeSum: Int
	delayTimeAvg: Float
}

type EventLogAggregateResult {
	count: Int
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	reasonCodeMin: String
	reasonCodeMax: String
	reasonTextMin: String
	reasonTextMax: String
	reasonCategoryCodeMin: String
	reasonCategoryCodeMax: String
	reasonValueMin: Float
	reasonValueMax: Float
	reasonValueSum: Float
	reasonValueAvg: Float
	commentsMin: String
	commentsMax: String
}

type FormAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	jsonSchemaMin: String
	jsonSchemaMax: String
	uiSchemaMin: String
	uiSchemaMax: String
}

type GeneralLedgerAccountAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	nameMin: String
	nameMax: String
	typeMin: String
	typeMax: String
}

type InterfaceMessageLogAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	levelMin: String
	levelMax: String
	messageMin: String
	messageMax: String
	componentMin: String
	componentMax: String
	statusMin: String
	statusMax: String
	errorMessageMin: String
	errorMessageMax: String
	payloadMin: String
	payloadMax: String
}

type InventoryHandlingPolicyAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type InventoryHandlingRuleAggregateResult {
	count: Int
}

type InventoryHoldingPolicyAggregateResult {
	count: Int
	inventoryMaxMin: Int
	inventoryMaxMax: Int
	inventoryMaxSum: Int
	inventoryMaxAvg: Float
	inventoryMinMin: Int
	inventoryMinMax: Int
	inventoryMinSum: Int
	inventoryMinAvg: Float
}

type JobOrderAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	nameMin: String
	nameMax: String
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
	workDefinitionTypeMin: String
	workDefinitionTypeMax: String
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	scheduledStartDateTimeMin: DateTime
	scheduledStartDateTimeMax: DateTime
	scheduledEndDateTimeMin: DateTime
	scheduledEndDateTimeMax: DateTime
	scheduledDurationMin: Float
	scheduledDurationMax: Float
	scheduledDurationSum: Float
	scheduledDurationAvg: Float
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
	priorityMin: Int
	priorityMax: Int
	prioritySum: Int
	priorityAvg: Float
	hierarchyScopeMin: String
	hierarchyScopeMax: String
}

type JobOrderDependencyAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	dependencyFactorMin: Float
	dependencyFactorMax: Float
	dependencyFactorSum: Float
	dependencyFactorAvg: Float
	conditionMin: String
	conditionMax: String
}

type JobOrderDispatchStateModelAggregateResult {
	count: Int
}

type JobOrderNoteAggregateResult {
	count: Int
	commentMin: String
	commentMax: String
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	editedDateTimeMin: DateTime
	editedDateTimeMax: DateTime
}

type JobResponseAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	productionDateMin: String
	productionDateMax: String
	actualDurationMin: Float
	actualDurationMax: Float
	actualDurationSum: Float
	actualDurationAvg: Float
}

type LibreServiceAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	heartbeatMin: DateTime
	heartbeatMax: DateTime
}

type MaterialActualAggregateResult {
	count: Int
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialAlternateAggregateResult {
	count: Int
	effectiveDateTimeMin: DateTime
	effectiveDateTimeMax: DateTime
	priorityOrderMin: Int
	priorityOrderMax: Int
	priorityOrderSum: Int
	priorityOrderAvg: Float
}

type MaterialClassAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	descriptionMin: String
	descriptionMax: String
	scheduleSortOrderMin: Int
	scheduleSortOrderMax: Int
	scheduleSortOrderSum: Int
	scheduleSortOrderAvg: Float
}

type MaterialDefinitionAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	scheduleSortOrderMin: Int
	scheduleSortOrderMax: Int
	scheduleSortOrderSum: Int
	scheduleSortOrderAvg: Float
	valueMin: Float
	valueMax: Float
	valueSum: Float
	valueAvg: Float
	valueCurrencyMin: String
	valueCurrencyMax: String
	weightKGMin: Float
	weightKGMax: Float
	weightKGSum: Float
	weightKGAvg: Float
	supplierMin: String
	supplierMax: String
	serialMaskMin: String
	serialMaskMax: String
	customerMaterialCodeMin: String
	customerMaterialCodeMax: String
}

type MaterialEventRulesetAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	targetMaterialMin: String
	targetMaterialMax: String
	targetMaterialOpMin: String
	targetMaterialOpMax: String
}

type MaterialLotAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	descriptionMin: String
	descriptionMax: String
	quantityMin: String
	quantityMax: String
}

type MaterialSpecificationAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type MaterialStateModelAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type MaterialStateTransitionAggregateResult {
	count: Int
}

type MaterialStatusAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
}

type MaterialSubLotAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	descriptionMin: String
	descriptionMax: String
	quantityMin: String
	quantityMax: String
}

type MaterialUnitAggregateResult {
	count: Int
	serialNumberMin: String
	serialNumberMax: String
}

type MenuAggregateResult {
	count: Int
	labelMin: String
	labelMax: String
	menuPageMin: String
	menuPageMax: String
	iconMin: String
	iconMax: String
	orderNumberMin: Int
	orderNumberMax: Int
	orderNumberSum: Int
	orderNumberAvg: Float
}

type OperationsDefinitionAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	versionMin: String
	versionMax: String
	descriptionMin: String
	descriptionMax: String
	hierarchyScopeMin: String
	hierarchyScopeMax: String
}

type OperationsRequestAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
	plannedStartDateTimeMin: DateTime
	plannedStartDateTimeMax: DateTime
	plannedEndDateTimeMin: DateTime
	plannedEndDateTimeMax: DateTime
	priorityMin: String
	priorityMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type OperationsSegmentAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	versionMin: String
	versionMax: String
	uiComponentMin: String
	uiComponentMax: String
	descriptionMin: String
	descriptionMax: String
	workDefinitionTypeMin: String
	workDefinitionTypeMax: String
	durationMin: Float
	durationMax: Float
	durationSum: Float
	durationAvg: Float
	glAccountWIPMin: String
	glAccountWIPMax: String
	glAccountWIPInvoiceMin: String
	glAccountWIPInvoiceMax: String
	glAccountFixedOverheadMin: String
	glAccountFixedOverheadMax: String
	glAccountVariableOverheadMin: String
	glAccountVariableOverheadMax: String
	glAccountDirectLabourMin: String
	glAccountDirectLabourMax: String
	costAmountFixedOverheadMin: Float
	costAmountFixedOverheadMax: Float
	costAmountFixedOverheadSum: Float
	costAmountFixedOverheadAvg: Float
	costAmountVariableOverheadMin: Float
	costAmountVariableOverheadMax: Float
	costAmountVariableOverheadSum: Float
	costAmountVariableOverheadAvg: Float
	costAmountDirectLabourRateMin: Float
	costAmountDirectLabourRateMax: Float
	costAmountDirectLabourRateSum: Float
	costAmountDirectLabourRateAvg: Float
	hierarchyScopeMin: String
	hierarchyScopeMax: String
	mpmPlanRateMin: Float
	mpmPlanRateMax: Float
	mpmPlanRateSum: Float
	mpmPlanRateAvg: Float
	mpmIdealSetupTimeMin: Float
	mpmIdealSetupTimeMax: Float
	mpmIdealSetupTimeSum: Float
	mpmIdealSetupTimeAvg: Float
	mpmIdealChangeoverTimeMin: Float
	mpmIdealChangeoverTimeMax: Float
	mpmIdealChangeoverTimeSum: Float
	mpmIdealChangeoverTimeAvg: Float
	mpmChangeoverFamilyMin: String
	mpmChangeoverFamilyMax: String
	mpmThresholdRunRateMin: Float
	mpmThresholdRunRateMax: Float
	mpmThresholdRunRateSum: Float
	mpmThresholdRunRateAvg: Float
	mpmThresholdRunDurationMin: Float
	mpmThresholdRunDurationMax: Float
	mpmThresholdRunDurationSum: Float
	mpmThresholdRunDurationAvg: Float
	mpmThresholdSlowRateMin: Float
	mpmThresholdSlowRateMax: Float
	mpmThresholdSlowRateSum: Float
	mpmThresholdSlowRateAvg: Float
	mpmThresholdSlowDurationMin: Float
	mpmThresholdSlowDurationMax: Float
	mpmThresholdSlowDurationSum: Float
	mpmThresholdSlowDurationAvg: Float
	mpmThresholdMicrostopDurationMin: Float
	mpmThresholdMicrostopDurationMax: Float
	mpmThresholdMicrostopDurationSum: Float
	mpmThresholdMicrostopDurationAvg: Float
	positionXMin: Int
	positionXMax: Int
	positionXSum: Int
	positionXAvg: Float
	positionYMin: Int
	positionYMax: Int
	positionYSum: Int
	positionYAvg: Float
}

type OrderAggregateResult {
	count: Int
	customerOrderNumberMin: String
	customerOrderNumberMax: String
	customerReferenceMin: String
	customerReferenceMax: String
	notesMin: String
	notesMax: String
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
}

type OrderLineAggregateResult {
	count: Int
	orderLineNumberMin: Int
	orderLineNumberMax: Int
	orderLineNumberSum: Int
	orderLineNumberAvg: Float
	quantityMin: Int
	quantityMax: Int
	quantitySum: Int
	quantityAvg: Float
	defectiveSerialNumbersMin: String
	defectiveSerialNumbersMax: String
}

type OrderStartRulesetAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type ParameterSpecificationAggregateResult {
	count: Int
	valueDefaultMin: String
	valueDefaultMax: String
	valueSetPointMin: String
	valueSetPointMax: String
	valueUpperSpecLimitMin: Float
	valueUpperSpecLimitMax: Float
	valueUpperSpecLimitSum: Float
	valueUpperSpecLimitAvg: Float
	valueLowerSpecLimitMin: Float
	valueLowerSpecLimitMax: Float
	valueLowerSpecLimitSum: Float
	valueLowerSpecLimitAvg: Float
	valueUpperControlLimitMin: Float
	valueUpperControlLimitMax: Float
	valueUpperControlLimitSum: Float
	valueUpperControlLimitAvg: Float
	valueLowerControlLimitMin: Float
	valueLowerControlLimitMax: Float
	valueLowerControlLimitSum: Float
	valueLowerControlLimitAvg: Float
}

type PartnerAggregateResult {
	count: Int
	companyCodeMin: String
	companyCodeMax: String
	nameMin: String
	nameMax: String
	vatNumberMin: String
	vatNumberMax: String
	registrationNumberMin: String
	registrationNumberMax: String
	contactNameMin: String
	contactNameMax: String
	contactEmailMin: String
	contactEmailMax: String
	contactPhoneMin: String
	contactPhoneMax: String
}

type PayloadFieldDefinitionAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	expressionMin: String
	expressionMax: String
}

type PersonAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type PersonnelActualAggregateResult {
	count: Int
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PersonnelClassAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type PersonnelSpecificationAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	personnelUseMin: String
	personnelUseMax: String
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
}

type PropertyAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	addressMin: String
	addressMax: String
	expressionMin: String
	expressionMax: String
	valueMin: String
	valueMax: String
}

type PropertyNameAliasAggregateResult {
	count: Int
	aliasMin: String
	aliasMax: String
	systemMin: String
	systemMax: String
}

type PropertyValueAliasAggregateResult {
	count: Int
	valueMin: String
	valueMax: String
	aliasMin: String
	aliasMax: String
	systemMin: String
	systemMax: String
}

type QuantityLogAggregateResult {
	count: Int
	timestampMin: DateTime
	timestampMax: DateTime
	quantityMin: Float
	quantityMax: Float
	quantitySum: Float
	quantityAvg: Float
	reasonCodeMin: String
	reasonCodeMax: String
	reasonTextMin: String
	reasonTextMax: String
	commentsMin: String
	commentsMax: String
}

type ReasonAggregateResult {
	count: Int
	labelMin: String
	labelMax: String
	textMin: String
	textMax: String
	erpCodeMin: String
	erpCodeMax: String
	standardValueMin: Float
	standardValueMax: Float
	standardValueSum: Float
	standardValueAvg: Float
}

type ReasonCategoryAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
}

type RequestStateAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type RoleAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type SegmentDependencyAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	dependencyFactorMin: Float
	dependencyFactorMax: Float
	dependencyFactorSum: Float
	dependencyFactorAvg: Float
	conditionMin: String
	conditionMax: String
}

type SegmentInvoiceSettingAggregateResult {
	count: Int
	costPerHourMin: Float
	costPerHourMax: Float
	costPerHourSum: Float
	costPerHourAvg: Float
	costPerUnitMin: Float
	costPerUnitMax: Float
	costPerUnitSum: Float
	costPerUnitAvg: Float
}

type ShipmentAggregateResult {
	count: Int
	transportCompanyShipmentIdMin: String
	transportCompanyShipmentIdMax: String
	transportCompanyProductCodeMin: String
	transportCompanyProductCodeMax: String
	referenceMin: String
	referenceMax: String
	customerReferenceMin: String
	customerReferenceMax: String
	consignmentNumberMin: String
	consignmentNumberMax: String
	dateTimeReceivedUTCMin: DateTime
	dateTimeReceivedUTCMax: DateTime
	dateTimeDeliveredUTCMin: DateTime
	dateTimeDeliveredUTCMax: DateTime
	dateTimePackedUTCMin: DateTime
	dateTimePackedUTCMax: DateTime
	dateTimeCreatedUTCMin: DateTime
	dateTimeCreatedUTCMax: DateTime
}

type ShipmentItemAggregateResult {
	count: Int
	transportCompanyItemReferenceMin: String
	transportCompanyItemReferenceMax: String
	transportCompanyItemIdMin: String
	transportCompanyItemIdMax: String
	trackingDetailsArticleIdMin: String
	trackingDetailsArticleIdMax: String
	trackingDetailsBarcodeIdMin: String
	trackingDetailsBarcodeIdMax: String
	trackingDetailsConsignmentIdMin: String
	trackingDetailsConsignmentIdMax: String
	plannedQuantityMin: Int
	plannedQuantityMax: Int
	plannedQuantitySum: Int
	plannedQuantityAvg: Float
	weightKgMin: Float
	weightKgMax: Float
	weightKgSum: Float
	weightKgAvg: Float
}

type ShippingAccountAggregateResult {
	count: Int
	accountNumberMin: String
	accountNumberMax: String
	usernameMin: String
	usernameMax: String
	secretMin: String
	secretMax: String
}

type StateEventRulesetAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	targetStateMin: String
	targetStateMax: String
}

type TestResultAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	resultMin: String
	resultMax: String
	testDateTimeMin: DateTime
	testDateTimeMax: DateTime
}

type TestSpecificationAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	versionMin: String
	versionMax: String
}

type TransitionEventRulesetAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type UnitOfMeasureAggregateResult {
	count: Int
	codeMin: String
	codeMax: String
}

type UnitOfMeasureConversionAggregateResult {
	count: Int
	numeratorMin: Float
	numeratorMax: Float
	numeratorSum: Float
	numeratorAvg: Float
	denominatorMin: Float
	denominatorMax: Float
	denominatorSum: Float
	denominatorAvg: Float
}

type UpdateACLPayload {
	aCL(filter: ACLFilter, first: Int, offset: Int): [ACL]
	numUids: Int
}

type UpdateAccessRightPayload {
	accessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
	numUids: Int
}

type UpdateAddressPayload {
	address(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
	numUids: Int
}

type UpdateBillOfMaterialPayload {
	billOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
	numUids: Int
}

type UpdateBoxPayload {
	box(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
	numUids: Int
}

type UpdateCarrierPayload {
	carrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
	numUids: Int
}

type UpdateDashboardConfigPayload {
	dashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
	numUids: Int
}

type UpdateDashboardPanelConfigPayload {
	dashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
	numUids: Int
}

type UpdateDashboardWidgetConfigPropertyPayload {
	dashboardWidgetConfigProperty(filter: DashboardWidgetConfigPropertyFilter, order: DashboardWidgetConfigPropertyOrder, first: Int, offset: Int): [DashboardWidgetConfigProperty]
	numUids: Int
}

type UpdateDeliveryPayload {
	delivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
	numUids: Int
}

type UpdateEquipmentActualPayload {
	equipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	numUids: Int
}

type UpdateEquipmentClassPayload {
	equipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	numUids: Int
}

type UpdateEquipmentNameAliasPayload {
	equipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	numUids: Int
}

type UpdateEquipmentPayload {
	equipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	numUids: Int
}

type UpdateEquipmentPropertyOverridePayload {
	equipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	numUids: Int
}

type UpdateEquipmentReasonOverridePayload {
	equipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
	numUids: Int
}

type UpdateEquipmentRelationPayload {
	equipmentRelation(filter: EquipmentRelationFilter, first: Int, offset: Int): [EquipmentRelation]
	numUids: Int
}

type UpdateEquipmentSpecificationPayload {
	equipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	numUids: Int
}

type UpdateEventDefinitionPayload {
	eventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
	numUids: Int
}

type UpdateEventLogPayload {
	eventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
	numUids: Int
}

type UpdateFormPayload {
	form(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	numUids: Int
}

type UpdateGeneralLedgerAccountPayload {
	generalLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
	numUids: Int
}

type UpdateInterfaceMessageLogPayload {
	interfaceMessageLog(filter: InterfaceMessageLogFilter, order: InterfaceMessageLogOrder, first: Int, offset: Int): [InterfaceMessageLog]
	numUids: Int
}

type UpdateInventoryHandlingPolicyPayload {
	inventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
	numUids: Int
}

type UpdateInventoryHandlingRulePayload {
	inventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
	numUids: Int
}

type UpdateInventoryHoldingPolicyPayload {
	inventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy]
	numUids: Int
}

type UpdateJobOrderDependencyPayload {
	jobOrderDependency(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency]
	numUids: Int
}

type UpdateJobOrderDispatchStateModelPayload {
	jobOrderDispatchStateModel(filter: JobOrderDispatchStateModelFilter, first: Int, offset: Int): [JobOrderDispatchStateModel]
	numUids: Int
}

type UpdateJobOrderNotePayload {
	jobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
	numUids: Int
}

type UpdateJobOrderPayload {
	jobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	numUids: Int
}

type UpdateJobResponsePayload {
	jobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	numUids: Int
}

type UpdateLibreServicePayload {
	libreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	numUids: Int
}

type UpdateMaterialActualPayload {
	materialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	numUids: Int
}

type UpdateMaterialAlternatePayload {
	materialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	numUids: Int
}

type UpdateMaterialClassPayload {
	materialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	numUids: Int
}

type UpdateMaterialDefinitionPayload {
	materialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	numUids: Int
}

type UpdateMaterialEventRulesetPayload {
	materialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
	numUids: Int
}

type UpdateMaterialLotPayload {
	materialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	numUids: Int
}

type UpdateMaterialSpecificationPayload {
	materialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	numUids: Int
}

type UpdateMaterialStateModelPayload {
	materialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
	numUids: Int
}

type UpdateMaterialStateTransitionPayload {
	materialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
	numUids: Int
}

type UpdateMaterialStatusPayload {
	materialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	numUids: Int
}

type UpdateMaterialSubLotPayload {
	materialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	numUids: Int
}

type UpdateMaterialUnitPayload {
	materialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
	numUids: Int
}

type UpdateMenuPayload {
	menu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	numUids: Int
}

type UpdateOperationsDefinitionPayload {
	operationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	numUids: Int
}

type UpdateOperationsRequestPayload {
	operationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	numUids: Int
}

type UpdateOperationsSegmentPayload {
	operationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	numUids: Int
}

type UpdateOrderLinePayload {
	orderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
	numUids: Int
}

type UpdateOrderPayload {
	order(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
	numUids: Int
}

type UpdateOrderStartRulesetPayload {
	orderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
	numUids: Int
}

type UpdateParameterSpecificationPayload {
	parameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	numUids: Int
}

type UpdatePartnerPayload {
	partner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
	numUids: Int
}

type UpdatePayloadFieldDefinitionPayload {
	payloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	numUids: Int
}

type UpdatePersonPayload {
	person(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	numUids: Int
}

type UpdatePersonnelActualPayload {
	personnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	numUids: Int
}

type UpdatePersonnelClassPayload {
	personnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	numUids: Int
}

type UpdatePersonnelSpecificationPayload {
	personnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	numUids: Int
}

type UpdatePropertyNameAliasPayload {
	propertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	numUids: Int
}

type UpdatePropertyPayload {
	property(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	numUids: Int
}

type UpdatePropertyValueAliasPayload {
	propertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	numUids: Int
}

type UpdateQuantityLogPayload {
	quantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
	numUids: Int
}

type UpdateReasonCategoryPayload {
	reasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
	numUids: Int
}

type UpdateReasonPayload {
	reason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
	numUids: Int
}

type UpdateRequestStatePayload {
	requestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
	numUids: Int
}

type UpdateRolePayload {
	role(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
	numUids: Int
}

type UpdateSegmentDependencyPayload {
	segmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
	numUids: Int
}

type UpdateSegmentInvoiceSettingPayload {
	segmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
	numUids: Int
}

type UpdateShipmentItemPayload {
	shipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
	numUids: Int
}

type UpdateShipmentPayload {
	shipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
	numUids: Int
}

type UpdateShippingAccountPayload {
	shippingAccount(filter: ShippingAccountFilter, order: ShippingAccountOrder, first: Int, offset: Int): [ShippingAccount]
	numUids: Int
}

type UpdateStateEventRulesetPayload {
	stateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
	numUids: Int
}

type UpdateTestResultPayload {
	testResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	numUids: Int
}

type UpdateTestSpecificationPayload {
	testSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	numUids: Int
}

type UpdateTransitionEventRulesetPayload {
	transitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
	numUids: Int
}

type UpdateUnitOfMeasureConversionPayload {
	unitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	numUids: Int
}

type UpdateUnitOfMeasurePayload {
	unitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	numUids: Int
}

type UpdateUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type UpdateUserRolePayload {
	userRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
	numUids: Int
}

type UpdateWorkCalendarDefinitionEntryPayload {
	workCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	numUids: Int
}

type UpdateWorkCalendarEntryPayload {
	workCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	numUids: Int
}

type UpdateWorkCalendarPayload {
	workCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	numUids: Int
}

type UpdateWorkflowConnectionPayload {
	workflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
	numUids: Int
}

type UpdateWorkflowConnectionTypePayload {
	workflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
	numUids: Int
}

type UpdateWorkflowInstancePayload {
	workflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
	numUids: Int
}

type UpdateWorkflowInstancePropertyPayload {
	workflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
	numUids: Int
}

type UpdateWorkflowNodeEventPayload {
	workflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
	numUids: Int
}

type UpdateWorkflowNodeInstancePayload {
	workflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
	numUids: Int
}

type UpdateWorkflowNodePayload {
	workflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
	numUids: Int
}

type UpdateWorkflowNodeTypePayload {
	workflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
	numUids: Int
}

type UpdateWorkflowPropertyInstancePayload {
	workflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
	numUids: Int
}

type UpdateWorkflowPropertyPayload {
	workflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
	numUids: Int
}

type UpdateWorkflowPropertyValuePayload {
	workflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
	numUids: Int
}

type UpdateWorkflowSpecificationPayload {
	workflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	numUids: Int
}

type UserAggregateResult {
	count: Int
	usernameMin: String
	usernameMax: String
	nameMin: String
	nameMax: String
}

type UserRoleAggregateResult {
	count: Int
}

type WorkCalendarAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type WorkCalendarDefinitionEntryAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	endDateTimeMin: DateTime
	endDateTimeMax: DateTime
	countMin: Int
	countMax: Int
	countSum: Int
	countAvg: Float
	intervalMin: Int
	intervalMax: Int
	intervalSum: Int
	intervalAvg: Float
	durationMin: String
	durationMax: String
}

type WorkCalendarEntryAggregateResult {
	count: Int
	descriptionMin: String
	descriptionMax: String
	startDateTimeMin: DateTime
	startDateTimeMax: DateTime
	finishDateTimeMin: DateTime
	finishDateTimeMax: DateTime
}

type WorkflowConnectionAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	conditionMin: String
	conditionMax: String
}

type WorkflowConnectionTypeAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type WorkflowInstanceAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
}

type WorkflowInstancePropertyAggregateResult {
	count: Int
	keyMin: String
	keyMax: String
	nameMin: String
	nameMax: String
}

type WorkflowNodeAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	uiComponentMin: String
	uiComponentMax: String
	positionXMin: Int
	positionXMax: Int
	positionXSum: Int
	positionXAvg: Float
	positionYMin: Int
	positionYMax: Int
	positionYSum: Int
	positionYAvg: Float
	widthMin: Int
	widthMax: Int
	widthSum: Int
	widthAvg: Float
	heightMin: Int
	heightMax: Int
	heightSum: Int
	heightAvg: Float
}

type WorkflowNodeEventAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	valueMin: String
	valueMax: String
}

type WorkflowNodeInstanceAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
}

type WorkflowNodeTypeAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

type WorkflowPropertyAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
	valueMin: String
	valueMax: String
}

type WorkflowPropertyInstanceAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
}

type WorkflowPropertyValueAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	valueMin: String
	valueMax: String
}

type WorkflowSpecificationAggregateResult {
	count: Int
	createdDateTimeMin: DateTime
	createdDateTimeMax: DateTime
	modifiedDateTimeMin: DateTime
	modifiedDateTimeMax: DateTime
	nameMin: String
	nameMax: String
	descriptionMin: String
	descriptionMax: String
}

#######################
# Generated Enums
#######################

enum ACLHasFilter {
	isActive
	level
	grants
}

enum AccessRightHasFilter {
	name
	forRole
	isActive
}

enum AddressHasFilter {
	isActive
	name
	street1
	street2
	number
	city
	state
	postCode
	countryCode
}

enum AddressOrderable {
	name
	street1
	street2
	number
	city
	state
	postCode
	countryCode
}

enum BillOfMaterialHasFilter {
	isActive
	name
	version
	description
	materialSpecifications
	operationsDefinition
}

enum BillOfMaterialOrderable {
	name
	version
	description
}

enum BoxHasFilter {
	name
	sizeHeightCm
	sizeWidthCm
	sizeDepthCm
}

enum BoxOrderable {
	name
	sizeHeightCm
	sizeWidthCm
	sizeDepthCm
}

enum CarrierHasFilter {
	code
	isActive
	storageLocation
	status
	barcodeImage
	owner
}

enum CarrierOrderable {
	code
	barcodeImage
}

enum DashboardConfigHasFilter {
	name
	isActive
	panels
}

enum DashboardConfigOrderable {
	name
}

enum DashboardPanelConfigHasFilter {
	dashboard
	widgetName
	properties
	x
	y
	w
	h
}

enum DashboardPanelConfigOrderable {
	widgetName
	x
	y
	w
	h
}

enum DashboardWidgetConfigPropertyHasFilter {
	panel
	key
	value
}

enum DashboardWidgetConfigPropertyOrderable {
	key
	value
}

enum DeliveryHasFilter {
	dateTime
	shipments
	location
	operator
	partner
	transportCompany
	transportCompanyDeliveryId
}

enum DeliveryOrderable {
	dateTime
	transportCompanyDeliveryId
}

enum EquipmentActualHasFilter {
	isActive
	jobResponse
	equipment
	quantity
	quantityUoM
}

enum EquipmentActualOrderable {
	quantity
}

enum EquipmentClassHasFilter {
	isActive
	name
	label
	displayName
	description
	parent
	children
	equipments
	properties
	eventDefinitions
	equipmentSpecifications
	reasons
	equipmentLevel
	addressTemplate
	image
	dashboardConfig
}

enum EquipmentClassOrderable {
	name
	label
	displayName
	description
	addressTemplate
	image
}

enum EquipmentHasFilter {
	isActive
	userRoles
	name
	label
	displayName
	description
	erpAssetID
	parent
	children
	equipmentClass
	equipmentLevel
	equipmentActual
	properties
	propertyNameAliases
	carriers
	materialSubLots
	inventoryHandlingRules
	operationsRequests
	dataProvider
	dataProviderConnection
	addressTemplate
	timeZoneName
	workSpecifications
	workflowInstances
	workCalendar
	jobResponses
	jobOrders
	shipments
	shipmentItems
	orders
	events
	quantities
	allowAdhocWorklog
	reasons
	reasonOverrides
	propertyOverrides
	mpmEnableJobInterlock
	mpmPermissiveOutputName
	mpmEnableAutoIdentMatching
	mpmAutoIdentMatchSource
	mpmEnableSetupStartDetection
	mpmEnableSetupCloseDetection
	mpmEnableORCWarning
	mpmORCWarnTrigger
	mpmEnableORCRevokePermissive
	mpmORCRevokePermissiveTrigger
	mpmEnableORCBlockNextOrder
	mpmEnableCallMaintenanceEvent
	mpmEnableMaintenanceHandover
	mpmEnableManualShiftStart
	mpmEnableManualShiftEnd
	mpmEnableManualBreak
	mpmEnableManualPlannedMaint
	ocsEnabled
	ocsPageState
	ocsWorkflowSelector
	ocsChosenStopTime
	inflows
	outflows
}

enum EquipmentNameAliasHasFilter {
	equipment
	alias
	system
}

enum EquipmentNameAliasOrderable {
	alias
	system
}

enum EquipmentOrderable {
	name
	label
	displayName
	description
	erpAssetID
	dataProviderConnection
	addressTemplate
	timeZoneName
	mpmPermissiveOutputName
	mpmAutoIdentMatchSource
	ocsPageState
	ocsWorkflowSelector
	ocsChosenStopTime
}

enum EquipmentPropertyOverrideHasFilter {
	isActive
	equipment
	property
	address
	expression
	value
	storeHistory
	ignore
}

enum EquipmentPropertyOverrideOrderable {
	address
	expression
	value
}

enum EquipmentReasonOverrideHasFilter {
	isActive
	equipment
	reason
	ignore
	standardValue
}

enum EquipmentReasonOverrideOrderable {
	standardValue
}

enum EquipmentRelationHasFilter {
	isActive
	from
	to
	type
}

enum EquipmentSpecificationHasFilter {
	isActive
	jobOrder
	operationsSegment
	equipment
	equipmentClass
	description
	quantity
	uom
}

enum EquipmentSpecificationOrderable {
	description
	quantity
}

enum EventDefinitionHasFilter {
	isActive
	name
	messageClass
	triggerProperties
	triggerExpression
	delayOption
	delayTime
	payloadProperties
	payloadFields
	orderStartRuleset
	stateEventRuleset
	materialEventRuleset
	transitionEventRuleset
	equipmentClass
}

enum EventDefinitionOrderable {
	name
	triggerExpression
	delayTime
}

enum EventLogHasFilter {
	isActive
	jobResponse
	equipment
	startDateTime
	endDateTime
	duration
	reasonCode
	reasonText
	reasonCategoryCode
	reasonValue
	reasonValueUoM
	comments
}

enum EventLogOrderable {
	startDateTime
	endDateTime
	duration
	reasonCode
	reasonText
	reasonCategoryCode
	reasonValue
	comments
}

enum FormHasFilter {
	isActive
	name
	workflowNodes
	jsonSchema
	uiSchema
}

enum FormOrderable {
	name
	jsonSchema
	uiSchema
}

enum GeneralLedgerAccountHasFilter {
	code
	name
	type
}

enum GeneralLedgerAccountOrderable {
	code
	name
	type
}

enum InterfaceMessageLogHasFilter {
	createdDateTime
	level
	message
	component
	status
	errorMessage
	payload
}

enum InterfaceMessageLogOrderable {
	createdDateTime
	level
	message
	component
	status
	errorMessage
	payload
}

enum InventoryHandlingPolicyHasFilter {
	isActive
	name
	materialClass
	verifySerialNumberOnReceipt
	verifySerialNumberOnPacking
	trackBySerialNumber
	trackByCarrier
	rules
}

enum InventoryHandlingPolicyOrderable {
	name
}

enum InventoryHandlingRuleHasFilter {
	isActive
	customer
	stockType
	warehouse
	stateModel
	inventoryHandlingPolicy
	inventoryHoldingPolicy
}

enum InventoryHoldingPolicyHasFilter {
	isActive
	material
	inventoryHandlingRule
	materialStatus
	inventoryMax
	inventoryMin
}

enum InventoryHoldingPolicyOrderable {
	inventoryMax
	inventoryMin
}

enum JobOrderDependencyHasFilter {
	isActive
	description
	from
	to
	dependencyType
	dependencyFactor
	factorUoM
	condition
	segmentDependency
}

enum JobOrderDependencyOrderable {
	description
	dependencyFactor
	condition
}

enum JobOrderDispatchStateModelHasFilter {
	fromStatus
	allowedTransition
}

enum JobOrderHasFilter {
	isActive
	createdDateTime
	name
	version
	description
	parent
	children
	workType
	workDefinitionType
	duration
	durationUoM
	materialSpecifications
	equipmentSpecifications
	personnelSpecifications
	parameterSpecifications
	scheduledStartDateTime
	scheduledEndDateTime
	scheduledDuration
	equipment
	quantity
	quantityUoM
	priority
	properties
	hierarchyScope
	dispatchStatus
	operationsRequest
	operationsSegment
	jobResponses
	jobOrderNotes
	inflows
	outflows
	previous
	next
}

enum JobOrderNoteHasFilter {
	comment
	createdDateTime
	editedDateTime
	createdBy
	modifiedBy
	isActive
	jobOrder
}

enum JobOrderNoteOrderable {
	comment
	createdDateTime
	editedDateTime
}

enum JobOrderOrderable {
	createdDateTime
	name
	version
	description
	workDefinitionType
	duration
	scheduledStartDateTime
	scheduledEndDateTime
	scheduledDuration
	quantity
	priority
	hierarchyScope
}

enum JobResponseHasFilter {
	isActive
	createdDateTime
	modifiedDateTime
	operator
	equipment
	startDateTime
	endDateTime
	productionDate
	actualDuration
	jobOrder
	events
	quantities
	personnelActual
	equipmentActual
	materialActual
}

enum JobResponseOrderable {
	createdDateTime
	modifiedDateTime
	startDateTime
	endDateTime
	productionDate
	actualDuration
}

enum LibreServiceHasFilter {
	name
	heartbeat
}

enum LibreServiceOrderable {
	name
	heartbeat
}

enum MaterialActualHasFilter {
	isActive
	jobResponse
	materialDefinition
	materialLot
	materialSubLot
	materialUse
	quantity
	quantityUoM
}

enum MaterialActualOrderable {
	quantity
}

enum MaterialAlternateHasFilter {
	isActive
	material
	alternateMaterial
	effectiveDateTime
	priorityOrder
}

enum MaterialAlternateOrderable {
	effectiveDateTime
	priorityOrder
}

enum MaterialClassHasFilter {
	isActive
	code
	description
	properties
	scheduleSortOrder
	parent
	children
	inventoryHandlingPolicy
}

enum MaterialClassOrderable {
	code
	description
	scheduleSortOrder
}

enum MaterialDefinitionHasFilter {
	isActive
	code
	name
	materialClass
	materialActual
	description
	properties
	parameterSpecifications
	scheduleSortOrder
	baseUnitOfMeasure
	uomConversions
	workSpecifications
	operationsDefinitions
	lots
	sublots
	units
	value
	valueCurrency
	weightKG
	supplier
	serialMask
	inventoryHandlingPolicy
	inventoryHoldingPolicy
	alternates
	shipmentItems
	OrderLines
	transferrableMaterials
	customerMaterialCode
}

enum MaterialDefinitionOrderable {
	code
	name
	description
	scheduleSortOrder
	value
	valueCurrency
	weightKG
	supplier
	serialMask
	customerMaterialCode
}

enum MaterialEventRulesetHasFilter {
	name
	triggerWhen
	segment
	targetMaterial
	targetMaterialOp
	eventDefs
}

enum MaterialEventRulesetOrderable {
	name
	targetMaterial
	targetMaterialOp
}

enum MaterialLotHasFilter {
	isActive
	code
	description
	properties
	material
	quantity
	dataType
	unitOfMeasure
	materialActual
	isAssembledFromLot
	isComponentOfLot
	isAssembledFromSubLot
	isComponentOfSubLot
	childSubLot
}

enum MaterialLotOrderable {
	code
	description
	quantity
}

enum MaterialSpecificationHasFilter {
	isActive
	jobOrder
	operationsSegment
	billOfMaterial
	material
	materialClass
	description
	materialUse
	allowedStates
	isTracked
	isBackFlushed
	backFlushFromLocation
	quantity
	uom
}

enum MaterialSpecificationOrderable {
	description
	quantity
}

enum MaterialStateModelHasFilter {
	isActive
	name
	states
	inventoryHandlingRules
}

enum MaterialStateModelOrderable {
	name
}

enum MaterialStateTransitionHasFilter {
	status
	to
	canReceive
	canPack
	isPlanned
}

enum MaterialStatusHasFilter {
	isActive
	code
	inventoryHoldingPolicy
}

enum MaterialStatusOrderable {
	code
}

enum MaterialSubLotHasFilter {
	isActive
	code
	material
	materialActual
	description
	status
	storageLocation
	isAssembledFromSubLot
	isComponentOfSubLot
	isComponentOfLot
	isAssembledFromLot
	parentLot
	parentSubLot
	childSubLot
	quantity
	dataType
	unitOfMeasure
	properties
}

enum MaterialSubLotOrderable {
	code
	description
	quantity
}

enum MaterialUnitHasFilter {
	isActive
	serialNumber
	material
	properties
}

enum MaterialUnitOrderable {
	serialNumber
}

enum MenuHasFilter {
	label
	access
	parent
	children
	menuPage
	icon
	isSection
	isPage
	orderNumber
}

enum MenuOrderable {
	label
	menuPage
	icon
	orderNumber
}

enum OperationsDefinitionHasFilter {
	isActive
	name
	material
	version
	description
	operationsType
	hierarchyScope
	billOfMaterial
	segments
}

enum OperationsDefinitionOrderable {
	name
	version
	description
	hierarchyScope
}

enum OperationsRequestHasFilter {
	isActive
	code
	operationsType
	plannedStartDateTime
	plannedEndDateTime
	priority
	operationsDefinition
	requestState
	quantity
	quantityUoM
	jobOrders
	equipment
	properties
}

enum OperationsRequestOrderable {
	code
	plannedStartDateTime
	plannedEndDateTime
	priority
	quantity
}

enum OperationsSegmentHasFilter {
	isActive
	name
	version
	type
	uiComponent
	description
	parent
	children
	workType
	workDefinitionType
	duration
	glAccountWIP
	glAccountWIPInvoice
	glAccountFixedOverhead
	glAccountVariableOverhead
	glAccountDirectLabour
	invoiceSettings
	costAmountFixedOverhead
	costDriverFixedOverhead
	costAmountVariableOverhead
	costAmountDirectLabourRate
	durationUoM
	orderStartRuleset
	materialSpecifications
	materialEventRuleset
	equipmentSpecifications
	stateEventRuleset
	personnelSpecifications
	parameterSpecifications
	hierarchyScope
	inflows
	outflows
	operationsDefinition
	jobOrders
	mpmPlanRate
	mpmIdealSetupTime
	mpmIdealChangeoverTime
	mpmEnableSmartChangeover
	mpmChangeoverFamily
	mpmThresholdRunRate
	mpmThresholdRunDuration
	mpmThresholdSlowRate
	mpmThresholdSlowDuration
	mpmThresholdMicrostopDuration
	mpmEnableAutoIdent
	mpmAutoIdentMatchCode
	positionX
	positionY
}

enum OperationsSegmentOrderable {
	name
	version
	uiComponent
	description
	workDefinitionType
	duration
	glAccountWIP
	glAccountWIPInvoice
	glAccountFixedOverhead
	glAccountVariableOverhead
	glAccountDirectLabour
	costAmountFixedOverhead
	costAmountVariableOverhead
	costAmountDirectLabourRate
	hierarchyScope
	mpmPlanRate
	mpmIdealSetupTime
	mpmIdealChangeoverTime
	mpmChangeoverFamily
	mpmThresholdRunRate
	mpmThresholdRunDuration
	mpmThresholdSlowRate
	mpmThresholdSlowDuration
	mpmThresholdMicrostopDuration
	positionX
	positionY
}

enum OrderHasFilter {
	isActive
	orderType
	customerOrderNumber
	customerReference
	deliveryTerms
	status
	shipFromPartner
	shipToPartner
	invoiceFromPartner
	invoiceToPartner
	warehouse
	lines
	shipments
	notes
	createdDateTime
}

enum OrderLineHasFilter {
	isActive
	order
	orderLineNumber
	material
	quantity
	defectiveSerialNumbers
	isReturn
	workflowInstance
}

enum OrderLineOrderable {
	orderLineNumber
	quantity
	defectiveSerialNumbers
}

enum OrderOrderable {
	customerOrderNumber
	customerReference
	notes
	createdDateTime
}

enum OrderStartRulesetHasFilter {
	name
	segment
	eventDefs
}

enum OrderStartRulesetOrderable {
	name
}

enum ParameterSpecificationHasFilter {
	isActive
	jobOrder
	operationsSegment
	material
	property
	valueDefault
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum ParameterSpecificationOrderable {
	valueDefault
	valueSetPoint
	valueUpperSpecLimit
	valueLowerSpecLimit
	valueUpperControlLimit
	valueLowerControlLimit
}

enum PartnerHasFilter {
	isActive
	companyCode
	name
	vatNumber
	registrationNumber
	contactName
	contactEmail
	contactPhone
	shippingAddress
	billingAddress
	isMerchant
	isRepairer
	isSupplier
	isTransport
	isCustomer
	isInventoryOwner
	carriers
	fromOrders
	toOrders
	shippingAccounts
}

enum PartnerOrderable {
	companyCode
	name
	vatNumber
	registrationNumber
	contactName
	contactEmail
	contactPhone
}

enum PayloadFieldDefinitionHasFilter {
	isActive
	name
	expression
	fieldType
}

enum PayloadFieldDefinitionOrderable {
	name
	expression
}

enum PersonHasFilter {
	isActive
	name
	description
	properties
	memberOf
	personnelActual
}

enum PersonOrderable {
	name
	description
}

enum PersonnelActualHasFilter {
	isActive
	jobResponse
	person
	quantity
	quantityUoM
}

enum PersonnelActualOrderable {
	quantity
}

enum PersonnelClassHasFilter {
	isActive
	name
	description
	properties
	persons
	isTestedBy
}

enum PersonnelClassOrderable {
	name
	description
}

enum PersonnelSpecificationHasFilter {
	isActive
	jobOrder
	operationsSegment
	person
	personnelClass
	description
	personnelUse
	quantity
	uom
}

enum PersonnelSpecificationOrderable {
	description
	personnelUse
	quantity
}

enum PropertyHasFilter {
	isActive
	type
	name
	description
	dataType
	definedBy
	address
	expression
	value
	unitOfMeasure
	storeHistory
	isTestedBy
	equipment
	equipmentClass
	materialClass
	operationsRequest
	jobOrder
	propertyOverrides
	propertyNameAliases
	eventTriggers
	eventPayloads
	parameterSpecifications
}

enum PropertyNameAliasHasFilter {
	property
	equipment
	alias
	system
}

enum PropertyNameAliasOrderable {
	alias
	system
}

enum PropertyOrderable {
	name
	description
	address
	expression
	value
}

enum PropertyValueAliasHasFilter {
	property
	value
	alias
	system
}

enum PropertyValueAliasOrderable {
	value
	alias
	system
}

enum QuantityLogHasFilter {
	isActive
	jobResponse
	equipment
	type
	timestamp
	quantity
	reasonCode
	reasonText
	comments
}

enum QuantityLogOrderable {
	timestamp
	quantity
	reasonCode
	reasonText
	comments
}

enum ReasonCategoryHasFilter {
	isActive
	reason
	code
	timeCategory
}

enum ReasonCategoryOrderable {
	code
}

enum ReasonHasFilter {
	isActive
	class
	category
	label
	text
	erpCode
	standardValue
	valueUoM
	parent
	children
	equipmentClass
	equipment
	equipmentOverrides
}

enum ReasonOrderable {
	label
	text
	erpCode
	standardValue
}

enum RequestStateHasFilter {
	isActive
	name
	description
}

enum RequestStateOrderable {
	name
	description
}

enum RoleHasFilter {
	name
	hasMembers
	hasGrantedRights
	isActive
	workflowNodes
}

enum RoleOrderable {
	name
}

enum SegmentDependencyHasFilter {
	isActive
	description
	from
	to
	dependencyType
	dependencyFactor
	factorUoM
	condition
	transitionEventRuleset
	jobOrderDependencies
}

enum SegmentDependencyOrderable {
	description
	dependencyFactor
	condition
}

enum SegmentInvoiceSettingHasFilter {
	partner
	costPerHour
	costPerUnit
}

enum SegmentInvoiceSettingOrderable {
	costPerHour
	costPerUnit
}

enum ShipmentHasFilter {
	isActive
	type
	transportCompany
	transportCompanyShipmentId
	transportCompanyProductCode
	reference
	items
	customerReference
	emailTrackingEnabled
	from
	to
	order
	warehouse
	consignmentNumber
	properties
	dateTimeReceivedUTC
	dateTimeDeliveredUTC
	dateTimePackedUTC
	dateTimeCreatedUTC
	delivered
	status
}

enum ShipmentItemHasFilter {
	isActive
	transportCompanyItemReference
	transportCompanyItemId
	trackingDetailsArticleId
	trackingDetailsBarcodeId
	trackingDetailsConsignmentId
	shipment
	status
	material
	plannedQuantity
	isParcel
	bin
	box
	weightKg
}

enum ShipmentItemOrderable {
	transportCompanyItemReference
	transportCompanyItemId
	trackingDetailsArticleId
	trackingDetailsBarcodeId
	trackingDetailsConsignmentId
	plannedQuantity
	weightKg
}

enum ShipmentOrderable {
	transportCompanyShipmentId
	transportCompanyProductCode
	reference
	customerReference
	consignmentNumber
	dateTimeReceivedUTC
	dateTimeDeliveredUTC
	dateTimePackedUTC
	dateTimeCreatedUTC
}

enum ShippingAccountHasFilter {
	isActive
	partner
	transportCompany
	warehouse
	accountNumber
	username
	secret
}

enum ShippingAccountOrderable {
	accountNumber
	username
	secret
}

enum StateEventRulesetHasFilter {
	name
	triggerWhen
	segment
	targetState
	eventDefs
}

enum StateEventRulesetOrderable {
	name
	targetState
}

enum TestResultHasFilter {
	isActive
	description
	result
	uom
	testDateTime
}

enum TestResultOrderable {
	description
	result
	testDateTime
}

enum TestSpecificationHasFilter {
	isActive
	description
	version
}

enum TestSpecificationOrderable {
	description
	version
}

enum TransitionEventRulesetHasFilter {
	name
	segmentDependency
	eventDefs
}

enum TransitionEventRulesetOrderable {
	name
}

enum UnitOfMeasureConversionHasFilter {
	isActive
	fromUoM
	toUoM
	numerator
	denominator
	material
}

enum UnitOfMeasureConversionOrderable {
	numerator
	denominator
}

enum UnitOfMeasureHasFilter {
	isActive
	code
	dataType
}

enum UnitOfMeasureOrderable {
	code
}

enum UserHasFilter {
	username
	name
	isType
	hasRole
	tasks
	isActive
}

enum UserOrderable {
	username
	name
}

enum UserRoleHasFilter {
	role
	user
	responsibilities
	isActive
}

enum WorkCalendarDefinitionEntryHasFilter {
	isActive
	description
	hierarchyScope
	freq
	startDateTime
	endDateTime
	count
	interval
	wkst
	byWeekDay
	byMonth
	bySetPos
	byMonthDay
	byYearDay
	byWeekNo
	byHour
	byMinute
	bySecond
	duration
	entryType
	properties
	calendarEntries
	workCalendar
}

enum WorkCalendarDefinitionEntryOrderable {
	description
	startDateTime
	endDateTime
	count
	interval
	duration
}

enum WorkCalendarEntryHasFilter {
	isActive
	description
	definition
	hierarchyScope
	startDateTime
	finishDateTime
	entryType
	properties
	workCalendar
}

enum WorkCalendarEntryOrderable {
	description
	startDateTime
	finishDateTime
}

enum WorkCalendarHasFilter {
	isActive
	name
	description
	definition
	entries
	equipment
}

enum WorkCalendarOrderable {
	name
	description
}

enum WorkflowConnectionHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	connectionType
	workflowSpecification
	from
	to
	condition
	properties
}

enum WorkflowConnectionOrderable {
	createdDateTime
	modifiedDateTime
	condition
}

enum WorkflowConnectionTypeHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	name
	description
	connections
	properties
}

enum WorkflowConnectionTypeOrderable {
	createdDateTime
	modifiedDateTime
	name
	description
}

enum WorkflowInstanceHasFilter {
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	status
	workflowSpecification
	equipment
	parent
	children
	nodeInstances
	propertyInstances
	properties
	orderLines
}

enum WorkflowInstanceOrderable {
	createdDateTime
	modifiedDateTime
}

enum WorkflowInstancePropertyHasFilter {
	key
	workflowInstance
	name
	values
}

enum WorkflowInstancePropertyOrderable {
	key
	name
}

enum WorkflowNodeEventHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	nodeInstance
	previous
	next
	status
	isProcessed
	value
}

enum WorkflowNodeEventOrderable {
	createdDateTime
	modifiedDateTime
	value
}

enum WorkflowNodeHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	name
	description
	uiComponent
	form
	role
	nodeType
	inflows
	outflows
	workflowSpecification
	properties
	nodeInstances
	positionX
	positionY
	width
	height
}

enum WorkflowNodeInstanceHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	status
	assignedUser
	workflowInstance
	node
	events
}

enum WorkflowNodeInstanceOrderable {
	createdDateTime
	modifiedDateTime
}

enum WorkflowNodeOrderable {
	createdDateTime
	modifiedDateTime
	name
	description
	uiComponent
	positionX
	positionY
	width
	height
}

enum WorkflowNodeTypeHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	name
	description
	nodeClass
	nodes
	properties
}

enum WorkflowNodeTypeOrderable {
	createdDateTime
	modifiedDateTime
	name
	description
}

enum WorkflowPropertyHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	propertyType
	name
	description
	definedBy
	dataType
	unitOfMeasure
	value
	nodeType
	node
	connectionType
	connection
	instances
}

enum WorkflowPropertyInstanceHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	workflowInstance
	workflowProperty
	values
}

enum WorkflowPropertyInstanceOrderable {
	createdDateTime
	modifiedDateTime
}

enum WorkflowPropertyOrderable {
	createdDateTime
	modifiedDateTime
	name
	description
	value
}

enum WorkflowPropertyValueHasFilter {
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	propertyInstance
	value
	previous
	next
}

enum WorkflowPropertyValueOrderable {
	createdDateTime
	modifiedDateTime
	value
}

enum WorkflowSpecificationHasFilter {
	access
	isActive
	createdDateTime
	createdBy
	modifiedDateTime
	modifiedBy
	name
	description
	nodes
	connections
	instances
}

enum WorkflowSpecificationOrderable {
	createdDateTime
	modifiedDateTime
	name
	description
}

#######################
# Generated Inputs
#######################

input ACLFilter {
	id: [ID!]
	isActive: Boolean
	has: [ACLHasFilter]
	and: [ACLFilter]
	or: [ACLFilter]
	not: ACLFilter
}

input ACLPatch {
	isActive: Boolean
	level: AccessLevel
	grants: RoleRef
}

input ACLRef {
	id: ID
	isActive: Boolean
	level: AccessLevel
	grants: RoleRef
}

input AccessRightFilter {
	id: [ID!]
	name: AccessRights_hash
	has: [AccessRightHasFilter]
	and: [AccessRightFilter]
	or: [AccessRightFilter]
	not: AccessRightFilter
}

input AccessRightPatch {
	name: AccessRights
	forRole: RoleRef
	isActive: Boolean
}

input AccessRightRef {
	id: ID
	name: AccessRights
	forRole: RoleRef
	isActive: Boolean
}

input AccessRights_hash {
	eq: AccessRights
	in: [AccessRights]
}

input AddACLInput {
	isActive: Boolean
	level: AccessLevel
	grants: RoleRef
}

input AddAccessRightInput {
	name: AccessRights
	forRole: RoleRef
	isActive: Boolean
}

input AddAddressInput {
	isActive: Boolean
	name: String
	street1: String
	street2: String
	number: String
	city: String
	state: String
	postCode: String
	countryCode: String
}

input AddBillOfMaterialInput {
	isActive: Boolean
	name: String!
	version: String!
	description: String
	materialSpecifications: [MaterialSpecificationRef]
	operationsDefinition: OperationsDefinitionRef
}

input AddBoxInput {
	name: String
	sizeHeightCm: Int
	sizeWidthCm: Int
	sizeDepthCm: Int
}

input AddCarrierInput {
	code: String!
	isActive: Boolean
	storageLocation: EquipmentRef!
	status: MaterialStatusRef!
	barcodeImage: String
	owner: PartnerRef
}

input AddDashboardConfigInput {
	name: String!
	isActive: Boolean
	panels: [DashboardPanelConfigRef]
}

input AddDashboardPanelConfigInput {
	dashboard: DashboardConfigRef
	widgetName: String
	properties: [DashboardWidgetConfigPropertyRef]
	x: Int
	y: Int
	w: Int
	h: Int
}

input AddDashboardWidgetConfigPropertyInput {
	panel: DashboardPanelConfigRef
	key: String!
	value: String!
}

input AddDeliveryInput {
	dateTime: DateTime!
	shipments: [ShipmentRef]
	location: EquipmentRef
	operator: UserRef
	partner: PartnerRef
	transportCompany: TransportCompany
	transportCompanyDeliveryId: String
}

input AddEquipmentActualInput {
	isActive: Boolean
	jobResponse: JobResponseRef!
	equipment: EquipmentRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input AddEquipmentClassInput {
	isActive: Boolean
	name: String!
	label: String
	displayName: String
	description: String
	parent: EquipmentClassRef
	children: [EquipmentClassRef]
	equipments: [EquipmentRef]
	properties: [PropertyRef]
	eventDefinitions: [EventDefinitionRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	reasons: [ReasonRef]
	equipmentLevel: EquipmentElementLevel
	addressTemplate: String
	image: String
	dashboardConfig: DashboardConfigRef
}

input AddEquipmentInput {
	isActive: Boolean
	userRoles: [UserRoleRef]
	name: String!
	label: String
	displayName: String
	description: String
	erpAssetID: String
	parent: EquipmentRef
	children: [EquipmentRef]
	equipmentClass: EquipmentClassRef
	equipmentLevel: EquipmentElementLevel
	equipmentActual: [EquipmentActualRef]
	properties: [PropertyRef]
	propertyNameAliases: [PropertyNameAliasRef]
	carriers: [CarrierRef]
	materialSubLots: [MaterialSubLotRef]
	inventoryHandlingRules: [InventoryHandlingRuleRef]
	operationsRequests: [OperationsRequestRef]
	dataProvider: DataProvider
	dataProviderConnection: String
	addressTemplate: String
	timeZoneName: String
	workSpecifications: [EquipmentSpecificationRef]
	workflowInstances: [WorkflowInstanceRef]
	workCalendar: WorkCalendarRef
	jobResponses: [JobResponseRef]
	jobOrders: [JobOrderRef]
	shipments: [ShipmentRef]
	shipmentItems: [ShipmentItemRef]
	orders: [OrderRef]
	events: [EventLogRef]
	quantities: [QuantityLogRef]
	allowAdhocWorklog: Boolean
	reasons: [ReasonRef]
	reasonOverrides: [EquipmentReasonOverrideRef]
	propertyOverrides: [EquipmentPropertyOverrideRef]
	mpmEnableJobInterlock: Boolean
	mpmPermissiveOutputName: String
	mpmEnableAutoIdentMatching: Boolean
	mpmAutoIdentMatchSource: String
	mpmEnableSetupStartDetection: Boolean
	mpmEnableSetupCloseDetection: Boolean
	mpmEnableORCWarning: Boolean
	mpmORCWarnTrigger: mpmORCWarnTriggers
	mpmEnableORCRevokePermissive: Boolean
	mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
	mpmEnableORCBlockNextOrder: Boolean
	mpmEnableCallMaintenanceEvent: Boolean
	mpmEnableMaintenanceHandover: Boolean
	mpmEnableManualShiftStart: Boolean
	mpmEnableManualShiftEnd: Boolean
	mpmEnableManualBreak: Boolean
	mpmEnableManualPlannedMaint: Boolean
	ocsEnabled: Boolean
	ocsPageState: String
	ocsWorkflowSelector: String
	ocsChosenStopTime: DateTime
	inflows: [EquipmentRelationRef]
	outflows: [EquipmentRelationRef]
}

input AddEquipmentNameAliasInput {
	equipment: EquipmentRef!
	alias: String!
	system: String!
}

input AddEquipmentPropertyOverrideInput {
	isActive: Boolean
	equipment: EquipmentRef!
	property: PropertyRef!
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

input AddEquipmentReasonOverrideInput {
	isActive: Boolean
	equipment: EquipmentRef
	reason: ReasonRef
	ignore: Boolean
	standardValue: Float
}

input AddEquipmentRelationInput {
	isActive: Boolean
	from: EquipmentRef!
	to: EquipmentRef
	type: EquipmentRelationshipType!
}

input AddEquipmentSpecificationInput {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	equipment: EquipmentRef
	equipmentClass: EquipmentClassRef
	description: String
	quantity: Float
	uom: UnitOfMeasureRef
}

input AddEventDefinitionInput {
	isActive: Boolean
	name: String!
	messageClass: MessageClass!
	triggerProperties: [PropertyRef]
	triggerExpression: String!
	delayOption: Boolean
	delayTime: Int
	payloadProperties: [PropertyRef]
	payloadFields: [PayloadFieldDefinitionRef]
	orderStartRuleset: OrderStartRulesetRef
	stateEventRuleset: StateEventRulesetRef
	materialEventRuleset: MaterialEventRulesetRef
	transitionEventRuleset: TransitionEventRulesetRef
	equipmentClass: EquipmentClassRef
}

input AddEventLogInput {
	isActive: Boolean
	jobResponse: JobResponseRef!
	equipment: EquipmentRef
	startDateTime: DateTime
	endDateTime: DateTime
	duration: Float
	reasonCode: String
	reasonText: String
	reasonCategoryCode: String
	reasonValue: Float
	reasonValueUoM: UnitOfMeasureRef
	comments: String
}

input AddFormInput {
	isActive: Boolean
	name: String!
	workflowNodes: [WorkflowNodeRef]
	jsonSchema: String
	uiSchema: String
}

input AddGeneralLedgerAccountInput {
	code: String!
	name: String
	type: String
}

input AddInterfaceMessageLogInput {
	createdDateTime: DateTime
	level: String
	message: String
	component: String
	status: String
	errorMessage: String
	payload: String
}

input AddInventoryHandlingPolicyInput {
	isActive: Boolean
	name: String!
	materialClass: [MaterialClassRef]
	verifySerialNumberOnReceipt: Boolean
	verifySerialNumberOnPacking: Boolean
	trackBySerialNumber: Boolean
	trackByCarrier: Boolean
	rules: [InventoryHandlingRuleRef]
}

input AddInventoryHandlingRuleInput {
	isActive: Boolean
	customer: PartnerRef!
	stockType: StockType!
	warehouse: [EquipmentRef!]!
	stateModel: MaterialStateModelRef!
	inventoryHandlingPolicy: InventoryHandlingPolicyRef!
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
}

input AddInventoryHoldingPolicyInput {
	isActive: Boolean
	material: MaterialDefinitionRef!
	inventoryHandlingRule: InventoryHandlingRuleRef!
	materialStatus: MaterialStatusRef!
	inventoryMax: Int
	inventoryMin: Int
}

input AddJobOrderDependencyInput {
	isActive: Boolean
	description: String
	from: JobOrderRef!
	to: JobOrderRef!
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	segmentDependency: SegmentDependencyRef
}

input AddJobOrderDispatchStateModelInput {
	fromStatus: DispatchStatus!
	allowedTransition: [DispatchStatus]
}

input AddJobOrderInput {
	isActive: Boolean
	createdDateTime: DateTime
	name: String!
	version: String
	description: String
	parent: JobOrderRef
	children: [JobOrderRef]
	workType: WorkType
	workDefinitionType: String
	duration: Float
	durationUoM: UnitOfMeasureRef
	materialSpecifications: [MaterialSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	parameterSpecifications: [ParameterSpecificationRef]
	scheduledStartDateTime: DateTime
	scheduledEndDateTime: DateTime
	scheduledDuration: Float
	equipment: EquipmentRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	priority: Int
	properties: [PropertyRef]
	hierarchyScope: String
	dispatchStatus: DispatchStatus
	operationsRequest: OperationsRequestRef
	operationsSegment: OperationsSegmentRef
	jobResponses: [JobResponseRef]
	jobOrderNotes: [JobOrderNoteRef]
	inflows: [JobOrderDependencyRef]
	outflows: [JobOrderDependencyRef]
	previous: [JobOrderRef]
	next: [JobOrderRef]
}

input AddJobOrderNoteInput {
	comment: String
	createdDateTime: DateTime
	editedDateTime: DateTime
	createdBy: UserRef
	modifiedBy: UserRef
	isActive: Boolean
	jobOrder: JobOrderRef
}

input AddJobResponseInput {
	isActive: Boolean
	createdDateTime: DateTime
	modifiedDateTime: DateTime
	operator: UserRef
	equipment: EquipmentRef
	startDateTime: DateTime
	endDateTime: DateTime
	productionDate: String
	actualDuration: Float
	jobOrder: JobOrderRef
	events: [EventLogRef]
	quantities: [QuantityLogRef]
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	materialActual: [MaterialActualRef]
}

input AddLibreServiceInput {
	name: String!
	heartbeat: DateTime
}

input AddMaterialActualInput {
	isActive: Boolean
	jobResponse: JobResponseRef!
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input AddMaterialAlternateInput {
	isActive: Boolean
	material: MaterialDefinitionRef!
	alternateMaterial: MaterialDefinitionRef!
	effectiveDateTime: DateTime!
	priorityOrder: Int!
}

input AddMaterialClassInput {
	isActive: Boolean
	code: String!
	description: String
	properties: [PropertyRef]
	scheduleSortOrder: Int
	parent: MaterialClassRef
	children: [MaterialClassRef]
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

input AddMaterialDefinitionInput {
	isActive: Boolean
	code: String!
	name: String
	materialClass: MaterialClassRef
	materialActual: [MaterialActualRef]
	description: String
	properties: [PropertyRef]
	parameterSpecifications: [ParameterSpecificationRef]
	scheduleSortOrder: Int
	baseUnitOfMeasure: UnitOfMeasureRef!
	uomConversions: [UnitOfMeasureConversionRef]
	workSpecifications: [MaterialSpecificationRef]
	operationsDefinitions: [OperationsDefinitionRef]
	lots: [MaterialLotRef]
	sublots: [MaterialSubLotRef]
	units: [MaterialUnitRef]
	value: Float
	valueCurrency: String
	weightKG: Float
	supplier: String
	serialMask: String
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
	alternates: [MaterialAlternateRef]
	shipmentItems: [ShipmentItemRef]
	OrderLines: [OrderLineRef]
	transferrableMaterials: [MaterialDefinitionRef]
	customerMaterialCode: String
}

input AddMaterialEventRulesetInput {
	name: String!
	triggerWhen: [RulesetTriggerOption]
	segment: OperationsSegmentRef
	targetMaterial: String!
	targetMaterialOp: String!
	eventDefs: [EventDefinitionRef]
}

input AddMaterialLotInput {
	isActive: Boolean
	code: String!
	description: String
	properties: [PropertyRef]
	material: MaterialDefinitionRef!
	quantity: String
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	materialActual: [MaterialActualRef]
	isAssembledFromLot: [MaterialLotRef]
	isComponentOfLot: [MaterialLotRef]
	isAssembledFromSubLot: [MaterialSubLotRef]
	isComponentOfSubLot: [MaterialSubLotRef]
	childSubLot: [MaterialSubLotRef]
}

input AddMaterialSpecificationInput {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	billOfMaterial: BillOfMaterialRef
	material: MaterialDefinitionRef
	materialClass: MaterialClassRef
	description: String
	materialUse: MaterialUse!
	allowedStates: [MaterialStatusRef]
	isTracked: Boolean
	isBackFlushed: Boolean
	backFlushFromLocation: EquipmentRef
	quantity: Float
	uom: UnitOfMeasureRef
}

input AddMaterialStateModelInput {
	isActive: Boolean
	name: String!
	states: [MaterialStateTransitionRef!]!
	inventoryHandlingRules: [InventoryHandlingRuleRef]
}

input AddMaterialStateTransitionInput {
	status: MaterialStatusRef!
	to: [MaterialStatusRef]
	canReceive: Boolean
	canPack: Boolean
	isPlanned: Boolean
}

input AddMaterialStatusInput {
	isActive: Boolean
	code: String!
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
}

input AddMaterialSubLotInput {
	isActive: Boolean
	code: String!
	material: MaterialDefinitionRef!
	materialActual: [MaterialActualRef]
	description: String
	status: MaterialStatusRef!
	storageLocation: EquipmentRef
	isAssembledFromSubLot: [MaterialSubLotRef]
	isComponentOfSubLot: [MaterialSubLotRef]
	isComponentOfLot: [MaterialLotRef]
	isAssembledFromLot: [MaterialLotRef]
	parentLot: MaterialLotRef
	parentSubLot: MaterialSubLotRef
	childSubLot: MaterialSubLotRef
	quantity: String
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	properties: [PropertyRef]
}

input AddMaterialUnitInput {
	isActive: Boolean
	serialNumber: String!
	material: MaterialDefinitionRef!
	properties: [PropertyRef]
}

input AddMenuInput {
	label: String!
	access: [RoleRef!]!
	parent: MenuRef
	children: [MenuRef!]
	menuPage: String
	icon: String
	isSection: Boolean!
	isPage: Boolean!
	orderNumber: Int
}

input AddOperationsDefinitionInput {
	isActive: Boolean
	name: String!
	material: MaterialDefinitionRef
	version: String
	description: String
	operationsType: WorkType!
	hierarchyScope: String
	billOfMaterial: BillOfMaterialRef
	segments: [OperationsSegmentRef]
}

input AddOperationsRequestInput {
	isActive: Boolean
	code: String!
	operationsType: WorkType!
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	operationsDefinition: OperationsDefinitionRef!
	requestState: RequestStateRef!
	quantity: Float!
	quantityUoM: UnitOfMeasureRef!
	jobOrders: [JobOrderRef]
	equipment: EquipmentRef
	properties: [PropertyRef]
}

input AddOperationsSegmentInput {
	isActive: Boolean
	name: String!
	version: String
	type: SegmentType
	uiComponent: String
	description: String
	parent: OperationsSegmentRef
	children: [OperationsSegmentRef]
	workType: WorkType
	workDefinitionType: String
	duration: Float
	glAccountWIP: String
	glAccountWIPInvoice: String
	glAccountFixedOverhead: String
	glAccountVariableOverhead: String
	glAccountDirectLabour: String
	invoiceSettings: [SegmentInvoiceSettingRef]
	costAmountFixedOverhead: Float
	costDriverFixedOverhead: CostDriver
	costAmountVariableOverhead: Float
	costAmountDirectLabourRate: Float
	durationUoM: UnitOfMeasureRef
	orderStartRuleset: OrderStartRulesetRef
	materialSpecifications: [MaterialSpecificationRef]
	materialEventRuleset: MaterialEventRulesetRef
	equipmentSpecifications: [EquipmentSpecificationRef]
	stateEventRuleset: StateEventRulesetRef
	personnelSpecifications: [PersonnelSpecificationRef]
	parameterSpecifications: [ParameterSpecificationRef]
	hierarchyScope: String
	inflows: [SegmentDependencyRef]
	outflows: [SegmentDependencyRef]
	operationsDefinition: OperationsDefinitionRef
	jobOrders: [JobOrderRef]
	mpmPlanRate: Float
	mpmIdealSetupTime: Float
	mpmIdealChangeoverTime: Float
	mpmEnableSmartChangeover: Boolean
	mpmChangeoverFamily: String
	mpmThresholdRunRate: Float
	mpmThresholdRunDuration: Float
	mpmThresholdSlowRate: Float
	mpmThresholdSlowDuration: Float
	mpmThresholdMicrostopDuration: Float
	mpmEnableAutoIdent: Boolean
	mpmAutoIdentMatchCode: PropertyRef
	positionX: Int
	positionY: Int
}

input AddOrderInput {
	isActive: Boolean
	orderType: OrderType!
	customerOrderNumber: String
	customerReference: String
	deliveryTerms: IncoTerms
	status: OrderStatus!
	shipFromPartner: PartnerRef
	shipToPartner: PartnerRef
	invoiceFromPartner: PartnerRef
	invoiceToPartner: PartnerRef
	warehouse: EquipmentRef
	lines: [OrderLineRef]
	shipments: [ShipmentRef]
	notes: String
	createdDateTime: DateTime
}

input AddOrderLineInput {
	isActive: Boolean
	order: OrderRef
	orderLineNumber: Int!
	material: MaterialDefinitionRef!
	quantity: Int!
	defectiveSerialNumbers: String
	isReturn: Boolean
	workflowInstance: WorkflowInstanceRef
}

input AddOrderStartRulesetInput {
	name: String!
	segment: OperationsSegmentRef
	eventDefs: [EventDefinitionRef]
}

input AddParameterSpecificationInput {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	material: MaterialDefinitionRef
	property: PropertyRef!
	valueDefault: String
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
}

input AddPartnerInput {
	isActive: Boolean
	companyCode: String!
	name: String
	vatNumber: String
	registrationNumber: String
	contactName: String
	contactEmail: String
	contactPhone: String
	shippingAddress: AddressRef
	billingAddress: AddressRef
	isMerchant: Boolean
	isRepairer: Boolean
	isSupplier: Boolean
	isTransport: Boolean
	isCustomer: Boolean
	isInventoryOwner: Boolean
	carriers: [CarrierRef]
	fromOrders: [OrderRef]
	toOrders: [OrderRef]
	shippingAccounts: [ShippingAccountRef]
}

input AddPayloadFieldDefinitionInput {
	isActive: Boolean
	name: String!
	expression: String!
	fieldType: PayloadFieldType
}

input AddPersonInput {
	isActive: Boolean
	name: String!
	description: String
	properties: [PropertyRef]
	memberOf: [PersonnelClassRef]
	personnelActual: [PersonnelActualRef]
}

input AddPersonnelActualInput {
	isActive: Boolean
	jobResponse: JobResponseRef!
	person: PersonRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input AddPersonnelClassInput {
	isActive: Boolean
	name: String!
	description: String
	properties: [PropertyRef]
	persons: [PersonRef]
	isTestedBy: [TestSpecificationRef]
}

input AddPersonnelSpecificationInput {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	person: PersonRef
	personnelClass: PersonnelClassRef
	description: String
	personnelUse: String
	quantity: Float
	uom: UnitOfMeasureRef
}

input AddPropertyInput {
	isActive: Boolean
	type: PropertyType
	name: String!
	description: String!
	dataType: DataType
	definedBy: PropertyRef
	address: String
	expression: String
	value: String
	unitOfMeasure: UnitOfMeasureRef
	storeHistory: Boolean
	isTestedBy: [TestSpecificationRef]
	equipment: EquipmentRef
	equipmentClass: EquipmentClassRef
	materialClass: MaterialClassRef
	operationsRequest: OperationsRequestRef
	jobOrder: JobOrderRef
	propertyOverrides: [EquipmentPropertyOverrideRef]
	propertyNameAliases: [PropertyNameAliasRef]
	eventTriggers: [EventDefinitionRef]
	eventPayloads: [EventDefinitionRef]
	parameterSpecifications: [ParameterSpecificationRef]
}

input AddPropertyNameAliasInput {
	property: PropertyRef!
	equipment: EquipmentRef!
	alias: String!
	system: String!
}

input AddPropertyValueAliasInput {
	property: PropertyRef!
	value: String!
	alias: String!
	system: String!
}

input AddQuantityLogInput {
	isActive: Boolean
	jobResponse: JobResponseRef!
	equipment: EquipmentRef
	type: MaterialUse!
	timestamp: DateTime
	quantity: Float!
	reasonCode: String
	reasonText: String
	comments: String
}

input AddReasonCategoryInput {
	isActive: Boolean
	reason: [ReasonRef]
	code: String!
	timeCategory: TimeCategory!
}

input AddReasonInput {
	isActive: Boolean
	class: ReasonClass!
	category: ReasonCategoryRef
	label: String!
	text: String!
	erpCode: String!
	standardValue: Float
	valueUoM: UnitOfMeasureRef
	parent: ReasonRef
	children: [ReasonRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	equipmentOverrides: [EquipmentReasonOverrideRef]
}

input AddRequestStateInput {
	isActive: Boolean
	name: String!
	description: String
}

input AddRoleInput {
	name: String!
	hasMembers: [UserRoleRef]
	hasGrantedRights: [AccessRightRef]
	isActive: Boolean
	workflowNodes: [WorkflowNodeRef]
}

input AddSegmentDependencyInput {
	isActive: Boolean
	description: String
	from: OperationsSegmentRef!
	to: OperationsSegmentRef!
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	transitionEventRuleset: TransitionEventRulesetRef
	jobOrderDependencies: [JobOrderDependencyRef]
}

input AddSegmentInvoiceSettingInput {
	partner: PartnerRef
	costPerHour: Float
	costPerUnit: Float
}

input AddShipmentInput {
	isActive: Boolean
	type: ShipmentType!
	transportCompany: TransportCompany
	transportCompanyShipmentId: String
	transportCompanyProductCode: String
	reference: String
	items: [ShipmentItemRef]
	customerReference: String
	emailTrackingEnabled: Boolean
	from: AddressRef
	to: AddressRef
	order: OrderRef!
	warehouse: EquipmentRef!
	consignmentNumber: String
	properties: [PropertyRef]
	dateTimeReceivedUTC: DateTime
	dateTimeDeliveredUTC: DateTime
	dateTimePackedUTC: DateTime
	dateTimeCreatedUTC: DateTime
	delivered: DeliveryRef
	status: ShipmentStatus
}

input AddShipmentItemInput {
	isActive: Boolean
	transportCompanyItemReference: String
	transportCompanyItemId: String
	trackingDetailsArticleId: String
	trackingDetailsBarcodeId: String
	trackingDetailsConsignmentId: String
	shipment: ShipmentRef
	status: ShipmentItemStatus!
	material: MaterialDefinitionRef
	plannedQuantity: Int
	isParcel: Boolean
	bin: EquipmentRef
	box: BoxRef
	weightKg: Float
}

input AddShippingAccountInput {
	isActive: Boolean
	partner: PartnerRef
	transportCompany: TransportCompany
	warehouse: EquipmentRef
	accountNumber: String
	username: String
	secret: String
}

input AddStateEventRulesetInput {
	name: String!
	triggerWhen: [RulesetTriggerOption]
	segment: OperationsSegmentRef
	targetState: String!
	eventDefs: [EventDefinitionRef]
}

input AddTestResultInput {
	isActive: Boolean
	description: String
	result: String
	uom: UnitOfMeasureRef
	testDateTime: DateTime
}

input AddTestSpecificationInput {
	isActive: Boolean
	description: String
	version: String
}

input AddTransitionEventRulesetInput {
	name: String!
	segmentDependency: SegmentDependencyRef
	eventDefs: [EventDefinitionRef]
}

input AddUnitOfMeasureConversionInput {
	isActive: Boolean
	fromUoM: UnitOfMeasureRef!
	toUoM: UnitOfMeasureRef!
	numerator: Float!
	denominator: Float!
	material: MaterialDefinitionRef!
}

input AddUnitOfMeasureInput {
	isActive: Boolean
	code: String!
	dataType: DataType
}

input AddUserInput {
	username: String!
	name: String
	isType: UserType!
	hasRole: [UserRoleRef]
	tasks: [WorkflowNodeInstanceRef]
	isActive: Boolean
}

input AddUserRoleInput {
	role: RoleRef!
	user: UserRef!
	responsibilities: [EquipmentRef]!
	isActive: Boolean
}

input AddWorkCalendarDefinitionEntryInput {
	isActive: Boolean
	description: String
	hierarchyScope: EquipmentRef
	freq: Frequency!
	startDateTime: DateTime!
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType!
	properties: [PropertyRef]
	calendarEntries: [WorkCalendarEntryRef]
	workCalendar: WorkCalendarRef
}

input AddWorkCalendarEntryInput {
	isActive: Boolean
	description: String
	definition: WorkCalendarDefinitionEntryRef
	hierarchyScope: EquipmentRef
	startDateTime: DateTime!
	finishDateTime: DateTime!
	entryType: WorkCalendarEntryType!
	properties: [PropertyRef]
	workCalendar: WorkCalendarRef
}

input AddWorkCalendarInput {
	isActive: Boolean
	name: String!
	description: String
	definition: [WorkCalendarDefinitionEntryRef]
	entries: [WorkCalendarEntryRef]
	equipment: [EquipmentRef]
}

input AddWorkflowConnectionInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	connectionType: WorkflowConnectionTypeRef!
	workflowSpecification: WorkflowSpecificationRef!
	from: WorkflowNodeRef!
	to: WorkflowNodeRef!
	condition: String
	properties: [WorkflowPropertyRef]
}

input AddWorkflowConnectionTypeInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String!
	description: String!
	connections: [WorkflowConnectionRef]
	properties: [WorkflowPropertyRef]
}

input AddWorkflowInstanceInput {
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	status: WorkflowNodeStatus
	workflowSpecification: WorkflowSpecificationRef
	equipment: EquipmentRef
	parent: WorkflowInstanceRef
	children: [WorkflowInstanceRef]
	nodeInstances: [WorkflowNodeInstanceRef]
	propertyInstances: [WorkflowPropertyInstanceRef]
	properties: [WorkflowInstancePropertyRef]
	orderLines: [OrderLineRef]
}

input AddWorkflowInstancePropertyInput {
	key: String!
	workflowInstance: WorkflowInstanceRef
	name: String!
	values: [WorkflowPropertyValueRef]
}

input AddWorkflowNodeEventInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	nodeInstance: WorkflowNodeInstanceRef
	previous: WorkflowNodeEventRef
	next: WorkflowNodeEventRef
	status: WorkflowNodeStatus
	isProcessed: Boolean
	value: String
}

input AddWorkflowNodeInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String!
	description: String!
	uiComponent: String
	form: FormRef
	role: RoleRef
	nodeType: WorkflowNodeTypeRef!
	inflows: [WorkflowConnectionRef]
	outflows: [WorkflowConnectionRef]
	workflowSpecification: WorkflowSpecificationRef!
	properties: [WorkflowPropertyRef]
	nodeInstances: [WorkflowNodeInstanceRef]
	positionX: Int
	positionY: Int
	width: Int
	height: Int
}

input AddWorkflowNodeInstanceInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	status: WorkflowNodeStatus
	assignedUser: UserRef
	workflowInstance: WorkflowInstanceRef!
	node: WorkflowNodeRef!
	events: [WorkflowNodeEventRef]
}

input AddWorkflowNodeTypeInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String!
	description: String!
	nodeClass: WorkflowNodeClass!
	nodes: [WorkflowNodeRef]
	properties: [WorkflowPropertyRef]
}

input AddWorkflowPropertyInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	propertyType: WorkflowPropertyType!
	name: String!
	description: String!
	definedBy: WorkflowPropertyRef
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	value: String
	nodeType: WorkflowNodeTypeRef
	node: WorkflowNodeRef
	connectionType: WorkflowConnectionTypeRef
	connection: WorkflowConnectionRef
	instances: [WorkflowPropertyInstanceRef]
}

input AddWorkflowPropertyInstanceInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	workflowInstance: WorkflowInstanceRef
	workflowProperty: WorkflowPropertyRef
	values: [WorkflowPropertyValueRef]
}

input AddWorkflowPropertyValueInput {
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	propertyInstance: WorkflowPropertyInstanceRef!
	value: String
	previous: WorkflowPropertyValueRef
	next: WorkflowPropertyValueRef
}

input AddWorkflowSpecificationInput {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String!
	description: String!
	nodes: [WorkflowNodeRef]
	connections: [WorkflowConnectionRef]
	instances: [WorkflowInstanceRef]
}

input AddressFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [AddressHasFilter]
	and: [AddressFilter]
	or: [AddressFilter]
	not: AddressFilter
}

input AddressOrder {
	asc: AddressOrderable
	desc: AddressOrderable
	then: AddressOrder
}

input AddressPatch {
	isActive: Boolean
	name: String
	street1: String
	street2: String
	number: String
	city: String
	state: String
	postCode: String
	countryCode: String
}

input AddressRef {
	id: ID
	isActive: Boolean
	name: String
	street1: String
	street2: String
	number: String
	city: String
	state: String
	postCode: String
	countryCode: String
}

input BillOfMaterialFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [BillOfMaterialHasFilter]
	and: [BillOfMaterialFilter]
	or: [BillOfMaterialFilter]
	not: BillOfMaterialFilter
}

input BillOfMaterialOrder {
	asc: BillOfMaterialOrderable
	desc: BillOfMaterialOrderable
	then: BillOfMaterialOrder
}

input BillOfMaterialPatch {
	isActive: Boolean
	version: String
	description: String
	materialSpecifications: [MaterialSpecificationRef]
	operationsDefinition: OperationsDefinitionRef
}

input BillOfMaterialRef {
	id: ID
	isActive: Boolean
	name: String
	version: String
	description: String
	materialSpecifications: [MaterialSpecificationRef]
	operationsDefinition: OperationsDefinitionRef
}

input BoxFilter {
	id: [ID!]
	has: [BoxHasFilter]
	and: [BoxFilter]
	or: [BoxFilter]
	not: BoxFilter
}

input BoxOrder {
	asc: BoxOrderable
	desc: BoxOrderable
	then: BoxOrder
}

input BoxPatch {
	name: String
	sizeHeightCm: Int
	sizeWidthCm: Int
	sizeDepthCm: Int
}

input BoxRef {
	id: ID
	name: String
	sizeHeightCm: Int
	sizeWidthCm: Int
	sizeDepthCm: Int
}

input CarrierFilter {
	id: [ID!]
	code: StringHashFilter
	isActive: Boolean
	has: [CarrierHasFilter]
	and: [CarrierFilter]
	or: [CarrierFilter]
	not: CarrierFilter
}

input CarrierOrder {
	asc: CarrierOrderable
	desc: CarrierOrderable
	then: CarrierOrder
}

input CarrierPatch {
	isActive: Boolean
	storageLocation: EquipmentRef
	status: MaterialStatusRef
	barcodeImage: String
	owner: PartnerRef
}

input CarrierRef {
	id: ID
	code: String
	isActive: Boolean
	storageLocation: EquipmentRef
	status: MaterialStatusRef
	barcodeImage: String
	owner: PartnerRef
}

input DashboardConfigFilter {
	id: [ID!]
	name: StringHashFilter
	isActive: Boolean
	has: [DashboardConfigHasFilter]
	and: [DashboardConfigFilter]
	or: [DashboardConfigFilter]
	not: DashboardConfigFilter
}

input DashboardConfigOrder {
	asc: DashboardConfigOrderable
	desc: DashboardConfigOrderable
	then: DashboardConfigOrder
}

input DashboardConfigPatch {
	isActive: Boolean
	panels: [DashboardPanelConfigRef]
}

input DashboardConfigRef {
	id: ID
	name: String
	isActive: Boolean
	panels: [DashboardPanelConfigRef]
}

input DashboardPanelConfigFilter {
	id: [ID!]
	widgetName: StringHashFilter
	has: [DashboardPanelConfigHasFilter]
	and: [DashboardPanelConfigFilter]
	or: [DashboardPanelConfigFilter]
	not: DashboardPanelConfigFilter
}

input DashboardPanelConfigOrder {
	asc: DashboardPanelConfigOrderable
	desc: DashboardPanelConfigOrderable
	then: DashboardPanelConfigOrder
}

input DashboardPanelConfigPatch {
	dashboard: DashboardConfigRef
	widgetName: String
	properties: [DashboardWidgetConfigPropertyRef]
	x: Int
	y: Int
	w: Int
	h: Int
}

input DashboardPanelConfigRef {
	id: ID
	dashboard: DashboardConfigRef
	widgetName: String
	properties: [DashboardWidgetConfigPropertyRef]
	x: Int
	y: Int
	w: Int
	h: Int
}

input DashboardWidgetConfigPropertyFilter {
	id: [ID!]
	has: [DashboardWidgetConfigPropertyHasFilter]
	and: [DashboardWidgetConfigPropertyFilter]
	or: [DashboardWidgetConfigPropertyFilter]
	not: DashboardWidgetConfigPropertyFilter
}

input DashboardWidgetConfigPropertyOrder {
	asc: DashboardWidgetConfigPropertyOrderable
	desc: DashboardWidgetConfigPropertyOrderable
	then: DashboardWidgetConfigPropertyOrder
}

input DashboardWidgetConfigPropertyPatch {
	panel: DashboardPanelConfigRef
	key: String
	value: String
}

input DashboardWidgetConfigPropertyRef {
	id: ID
	panel: DashboardPanelConfigRef
	key: String
	value: String
}

input DeliveryFilter {
	id: [ID!]
	has: [DeliveryHasFilter]
	and: [DeliveryFilter]
	or: [DeliveryFilter]
	not: DeliveryFilter
}

input DeliveryOrder {
	asc: DeliveryOrderable
	desc: DeliveryOrderable
	then: DeliveryOrder
}

input DeliveryPatch {
	dateTime: DateTime
	shipments: [ShipmentRef]
	location: EquipmentRef
	operator: UserRef
	partner: PartnerRef
	transportCompany: TransportCompany
	transportCompanyDeliveryId: String
}

input DeliveryRef {
	id: ID
	dateTime: DateTime
	shipments: [ShipmentRef]
	location: EquipmentRef
	operator: UserRef
	partner: PartnerRef
	transportCompany: TransportCompany
	transportCompanyDeliveryId: String
}

input DispatchStatus_hash {
	eq: DispatchStatus
	in: [DispatchStatus]
}

input EquipmentActualFilter {
	id: [ID!]
	isActive: Boolean
	has: [EquipmentActualHasFilter]
	and: [EquipmentActualFilter]
	or: [EquipmentActualFilter]
	not: EquipmentActualFilter
}

input EquipmentActualOrder {
	asc: EquipmentActualOrderable
	desc: EquipmentActualOrderable
	then: EquipmentActualOrder
}

input EquipmentActualPatch {
	isActive: Boolean
	jobResponse: JobResponseRef
	equipment: EquipmentRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input EquipmentActualRef {
	id: ID
	isActive: Boolean
	jobResponse: JobResponseRef
	equipment: EquipmentRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input EquipmentClassFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	label: StringHashFilter
	displayName: StringHashFilter
	description: StringHashFilter
	has: [EquipmentClassHasFilter]
	and: [EquipmentClassFilter]
	or: [EquipmentClassFilter]
	not: EquipmentClassFilter
}

input EquipmentClassOrder {
	asc: EquipmentClassOrderable
	desc: EquipmentClassOrderable
	then: EquipmentClassOrder
}

input EquipmentClassPatch {
	isActive: Boolean
	name: String
	label: String
	displayName: String
	description: String
	parent: EquipmentClassRef
	children: [EquipmentClassRef]
	equipments: [EquipmentRef]
	properties: [PropertyRef]
	eventDefinitions: [EventDefinitionRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	reasons: [ReasonRef]
	equipmentLevel: EquipmentElementLevel
	addressTemplate: String
	image: String
	dashboardConfig: DashboardConfigRef
}

input EquipmentClassRef {
	id: ID
	isActive: Boolean
	name: String
	label: String
	displayName: String
	description: String
	parent: EquipmentClassRef
	children: [EquipmentClassRef]
	equipments: [EquipmentRef]
	properties: [PropertyRef]
	eventDefinitions: [EventDefinitionRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	reasons: [ReasonRef]
	equipmentLevel: EquipmentElementLevel
	addressTemplate: String
	image: String
	dashboardConfig: DashboardConfigRef
}

input EquipmentElementLevel_hash {
	eq: EquipmentElementLevel
	in: [EquipmentElementLevel]
}

input EquipmentFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	label: StringHashFilter
	displayName: StringHashFilter
	description: StringHashFilter
	erpAssetID: StringHashFilter
	equipmentLevel: EquipmentElementLevel_hash
	has: [EquipmentHasFilter]
	and: [EquipmentFilter]
	or: [EquipmentFilter]
	not: EquipmentFilter
}

input EquipmentNameAliasFilter {
	id: [ID!]
	alias: StringFullTextFilter
	system: StringFullTextFilter
	has: [EquipmentNameAliasHasFilter]
	and: [EquipmentNameAliasFilter]
	or: [EquipmentNameAliasFilter]
	not: EquipmentNameAliasFilter
}

input EquipmentNameAliasOrder {
	asc: EquipmentNameAliasOrderable
	desc: EquipmentNameAliasOrderable
	then: EquipmentNameAliasOrder
}

input EquipmentNameAliasPatch {
	equipment: EquipmentRef
	alias: String
	system: String
}

input EquipmentNameAliasRef {
	id: ID
	equipment: EquipmentRef
	alias: String
	system: String
}

input EquipmentOrder {
	asc: EquipmentOrderable
	desc: EquipmentOrderable
	then: EquipmentOrder
}

input EquipmentPatch {
	isActive: Boolean
	userRoles: [UserRoleRef]
	name: String
	label: String
	displayName: String
	description: String
	erpAssetID: String
	parent: EquipmentRef
	children: [EquipmentRef]
	equipmentClass: EquipmentClassRef
	equipmentLevel: EquipmentElementLevel
	equipmentActual: [EquipmentActualRef]
	properties: [PropertyRef]
	propertyNameAliases: [PropertyNameAliasRef]
	carriers: [CarrierRef]
	materialSubLots: [MaterialSubLotRef]
	inventoryHandlingRules: [InventoryHandlingRuleRef]
	operationsRequests: [OperationsRequestRef]
	dataProvider: DataProvider
	dataProviderConnection: String
	addressTemplate: String
	timeZoneName: String
	workSpecifications: [EquipmentSpecificationRef]
	workflowInstances: [WorkflowInstanceRef]
	workCalendar: WorkCalendarRef
	jobResponses: [JobResponseRef]
	jobOrders: [JobOrderRef]
	shipments: [ShipmentRef]
	shipmentItems: [ShipmentItemRef]
	orders: [OrderRef]
	events: [EventLogRef]
	quantities: [QuantityLogRef]
	allowAdhocWorklog: Boolean
	reasons: [ReasonRef]
	reasonOverrides: [EquipmentReasonOverrideRef]
	propertyOverrides: [EquipmentPropertyOverrideRef]
	mpmEnableJobInterlock: Boolean
	mpmPermissiveOutputName: String
	mpmEnableAutoIdentMatching: Boolean
	mpmAutoIdentMatchSource: String
	mpmEnableSetupStartDetection: Boolean
	mpmEnableSetupCloseDetection: Boolean
	mpmEnableORCWarning: Boolean
	mpmORCWarnTrigger: mpmORCWarnTriggers
	mpmEnableORCRevokePermissive: Boolean
	mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
	mpmEnableORCBlockNextOrder: Boolean
	mpmEnableCallMaintenanceEvent: Boolean
	mpmEnableMaintenanceHandover: Boolean
	mpmEnableManualShiftStart: Boolean
	mpmEnableManualShiftEnd: Boolean
	mpmEnableManualBreak: Boolean
	mpmEnableManualPlannedMaint: Boolean
	ocsEnabled: Boolean
	ocsPageState: String
	ocsWorkflowSelector: String
	ocsChosenStopTime: DateTime
	inflows: [EquipmentRelationRef]
	outflows: [EquipmentRelationRef]
}

input EquipmentPropertyOverrideFilter {
	id: [ID!]
	isActive: Boolean
	has: [EquipmentPropertyOverrideHasFilter]
	and: [EquipmentPropertyOverrideFilter]
	or: [EquipmentPropertyOverrideFilter]
	not: EquipmentPropertyOverrideFilter
}

input EquipmentPropertyOverrideOrder {
	asc: EquipmentPropertyOverrideOrderable
	desc: EquipmentPropertyOverrideOrderable
	then: EquipmentPropertyOverrideOrder
}

input EquipmentPropertyOverridePatch {
	isActive: Boolean
	equipment: EquipmentRef
	property: PropertyRef
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

input EquipmentPropertyOverrideRef {
	id: ID
	isActive: Boolean
	equipment: EquipmentRef
	property: PropertyRef
	address: String
	expression: String
	value: String
	storeHistory: Boolean
	ignore: Boolean
}

input EquipmentReasonOverrideFilter {
	id: [ID!]
	isActive: Boolean
	has: [EquipmentReasonOverrideHasFilter]
	and: [EquipmentReasonOverrideFilter]
	or: [EquipmentReasonOverrideFilter]
	not: EquipmentReasonOverrideFilter
}

input EquipmentReasonOverrideOrder {
	asc: EquipmentReasonOverrideOrderable
	desc: EquipmentReasonOverrideOrderable
	then: EquipmentReasonOverrideOrder
}

input EquipmentReasonOverridePatch {
	isActive: Boolean
	equipment: EquipmentRef
	reason: ReasonRef
	ignore: Boolean
	standardValue: Float
}

input EquipmentReasonOverrideRef {
	id: ID
	isActive: Boolean
	equipment: EquipmentRef
	reason: ReasonRef
	ignore: Boolean
	standardValue: Float
}

input EquipmentRef {
	id: ID
	isActive: Boolean
	userRoles: [UserRoleRef]
	name: String
	label: String
	displayName: String
	description: String
	erpAssetID: String
	parent: EquipmentRef
	children: [EquipmentRef]
	equipmentClass: EquipmentClassRef
	equipmentLevel: EquipmentElementLevel
	equipmentActual: [EquipmentActualRef]
	properties: [PropertyRef]
	propertyNameAliases: [PropertyNameAliasRef]
	carriers: [CarrierRef]
	materialSubLots: [MaterialSubLotRef]
	inventoryHandlingRules: [InventoryHandlingRuleRef]
	operationsRequests: [OperationsRequestRef]
	dataProvider: DataProvider
	dataProviderConnection: String
	addressTemplate: String
	timeZoneName: String
	workSpecifications: [EquipmentSpecificationRef]
	workflowInstances: [WorkflowInstanceRef]
	workCalendar: WorkCalendarRef
	jobResponses: [JobResponseRef]
	jobOrders: [JobOrderRef]
	shipments: [ShipmentRef]
	shipmentItems: [ShipmentItemRef]
	orders: [OrderRef]
	events: [EventLogRef]
	quantities: [QuantityLogRef]
	allowAdhocWorklog: Boolean
	reasons: [ReasonRef]
	reasonOverrides: [EquipmentReasonOverrideRef]
	propertyOverrides: [EquipmentPropertyOverrideRef]
	mpmEnableJobInterlock: Boolean
	mpmPermissiveOutputName: String
	mpmEnableAutoIdentMatching: Boolean
	mpmAutoIdentMatchSource: String
	mpmEnableSetupStartDetection: Boolean
	mpmEnableSetupCloseDetection: Boolean
	mpmEnableORCWarning: Boolean
	mpmORCWarnTrigger: mpmORCWarnTriggers
	mpmEnableORCRevokePermissive: Boolean
	mpmORCRevokePermissiveTrigger: mpmORCRevokeTriggers
	mpmEnableORCBlockNextOrder: Boolean
	mpmEnableCallMaintenanceEvent: Boolean
	mpmEnableMaintenanceHandover: Boolean
	mpmEnableManualShiftStart: Boolean
	mpmEnableManualShiftEnd: Boolean
	mpmEnableManualBreak: Boolean
	mpmEnableManualPlannedMaint: Boolean
	ocsEnabled: Boolean
	ocsPageState: String
	ocsWorkflowSelector: String
	ocsChosenStopTime: DateTime
	inflows: [EquipmentRelationRef]
	outflows: [EquipmentRelationRef]
}

input EquipmentRelationFilter {
	id: [ID!]
	isActive: Boolean
	has: [EquipmentRelationHasFilter]
	and: [EquipmentRelationFilter]
	or: [EquipmentRelationFilter]
	not: EquipmentRelationFilter
}

input EquipmentRelationPatch {
	isActive: Boolean
	from: EquipmentRef
	to: EquipmentRef
	type: EquipmentRelationshipType
}

input EquipmentRelationRef {
	id: ID
	isActive: Boolean
	from: EquipmentRef
	to: EquipmentRef
	type: EquipmentRelationshipType
}

input EquipmentSpecificationFilter {
	id: [ID!]
	isActive: Boolean
	has: [EquipmentSpecificationHasFilter]
	and: [EquipmentSpecificationFilter]
	or: [EquipmentSpecificationFilter]
	not: EquipmentSpecificationFilter
}

input EquipmentSpecificationOrder {
	asc: EquipmentSpecificationOrderable
	desc: EquipmentSpecificationOrderable
	then: EquipmentSpecificationOrder
}

input EquipmentSpecificationPatch {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	equipment: EquipmentRef
	equipmentClass: EquipmentClassRef
	description: String
	quantity: Float
	uom: UnitOfMeasureRef
}

input EquipmentSpecificationRef {
	id: ID
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	equipment: EquipmentRef
	equipmentClass: EquipmentClassRef
	description: String
	quantity: Float
	uom: UnitOfMeasureRef
}

input EventDefinitionFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [EventDefinitionHasFilter]
	and: [EventDefinitionFilter]
	or: [EventDefinitionFilter]
	not: EventDefinitionFilter
}

input EventDefinitionOrder {
	asc: EventDefinitionOrderable
	desc: EventDefinitionOrderable
	then: EventDefinitionOrder
}

input EventDefinitionPatch {
	isActive: Boolean
	name: String
	messageClass: MessageClass
	triggerProperties: [PropertyRef]
	triggerExpression: String
	delayOption: Boolean
	delayTime: Int
	payloadProperties: [PropertyRef]
	payloadFields: [PayloadFieldDefinitionRef]
	orderStartRuleset: OrderStartRulesetRef
	stateEventRuleset: StateEventRulesetRef
	materialEventRuleset: MaterialEventRulesetRef
	transitionEventRuleset: TransitionEventRulesetRef
	equipmentClass: EquipmentClassRef
}

input EventDefinitionRef {
	id: ID
	isActive: Boolean
	name: String
	messageClass: MessageClass
	triggerProperties: [PropertyRef]
	triggerExpression: String
	delayOption: Boolean
	delayTime: Int
	payloadProperties: [PropertyRef]
	payloadFields: [PayloadFieldDefinitionRef]
	orderStartRuleset: OrderStartRulesetRef
	stateEventRuleset: StateEventRulesetRef
	materialEventRuleset: MaterialEventRulesetRef
	transitionEventRuleset: TransitionEventRulesetRef
	equipmentClass: EquipmentClassRef
}

input EventLogFilter {
	id: [ID!]
	isActive: Boolean
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	reasonCode: StringHashFilter
	reasonText: StringHashFilter
	reasonCategoryCode: StringHashFilter
	comments: StringHashFilter
	has: [EventLogHasFilter]
	and: [EventLogFilter]
	or: [EventLogFilter]
	not: EventLogFilter
}

input EventLogOrder {
	asc: EventLogOrderable
	desc: EventLogOrderable
	then: EventLogOrder
}

input EventLogPatch {
	isActive: Boolean
	jobResponse: JobResponseRef
	equipment: EquipmentRef
	startDateTime: DateTime
	endDateTime: DateTime
	duration: Float
	reasonCode: String
	reasonText: String
	reasonCategoryCode: String
	reasonValue: Float
	reasonValueUoM: UnitOfMeasureRef
	comments: String
}

input EventLogRef {
	id: ID
	isActive: Boolean
	jobResponse: JobResponseRef
	equipment: EquipmentRef
	startDateTime: DateTime
	endDateTime: DateTime
	duration: Float
	reasonCode: String
	reasonText: String
	reasonCategoryCode: String
	reasonValue: Float
	reasonValueUoM: UnitOfMeasureRef
	comments: String
}

input FormFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [FormHasFilter]
	and: [FormFilter]
	or: [FormFilter]
	not: FormFilter
}

input FormOrder {
	asc: FormOrderable
	desc: FormOrderable
	then: FormOrder
}

input FormPatch {
	isActive: Boolean
	workflowNodes: [WorkflowNodeRef]
	jsonSchema: String
	uiSchema: String
}

input FormRef {
	id: ID
	isActive: Boolean
	name: String
	workflowNodes: [WorkflowNodeRef]
	jsonSchema: String
	uiSchema: String
}

input GeneralLedgerAccountFilter {
	id: [ID!]
	code: StringHashFilter
	has: [GeneralLedgerAccountHasFilter]
	and: [GeneralLedgerAccountFilter]
	or: [GeneralLedgerAccountFilter]
	not: GeneralLedgerAccountFilter
}

input GeneralLedgerAccountOrder {
	asc: GeneralLedgerAccountOrderable
	desc: GeneralLedgerAccountOrderable
	then: GeneralLedgerAccountOrder
}

input GeneralLedgerAccountPatch {
	name: String
	type: String
}

input GeneralLedgerAccountRef {
	id: ID
	code: String
	name: String
	type: String
}

input InterfaceMessageLogFilter {
	id: [ID!]
	createdDateTime: DateTimeFilter
	level: StringTermFilter
	message: StringTermFilter
	component: StringTermFilter
	status: StringTermFilter
	has: [InterfaceMessageLogHasFilter]
	and: [InterfaceMessageLogFilter]
	or: [InterfaceMessageLogFilter]
	not: InterfaceMessageLogFilter
}

input InterfaceMessageLogOrder {
	asc: InterfaceMessageLogOrderable
	desc: InterfaceMessageLogOrderable
	then: InterfaceMessageLogOrder
}

input InterfaceMessageLogPatch {
	createdDateTime: DateTime
	level: String
	message: String
	component: String
	status: String
	errorMessage: String
	payload: String
}

input InterfaceMessageLogRef {
	id: ID
	createdDateTime: DateTime
	level: String
	message: String
	component: String
	status: String
	errorMessage: String
	payload: String
}

input InventoryHandlingPolicyFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [InventoryHandlingPolicyHasFilter]
	and: [InventoryHandlingPolicyFilter]
	or: [InventoryHandlingPolicyFilter]
	not: InventoryHandlingPolicyFilter
}

input InventoryHandlingPolicyOrder {
	asc: InventoryHandlingPolicyOrderable
	desc: InventoryHandlingPolicyOrderable
	then: InventoryHandlingPolicyOrder
}

input InventoryHandlingPolicyPatch {
	isActive: Boolean
	materialClass: [MaterialClassRef]
	verifySerialNumberOnReceipt: Boolean
	verifySerialNumberOnPacking: Boolean
	trackBySerialNumber: Boolean
	trackByCarrier: Boolean
	rules: [InventoryHandlingRuleRef]
}

input InventoryHandlingPolicyRef {
	id: ID
	isActive: Boolean
	name: String
	materialClass: [MaterialClassRef]
	verifySerialNumberOnReceipt: Boolean
	verifySerialNumberOnPacking: Boolean
	trackBySerialNumber: Boolean
	trackByCarrier: Boolean
	rules: [InventoryHandlingRuleRef]
}

input InventoryHandlingRuleFilter {
	id: [ID!]
	isActive: Boolean
	stockType: StockType_hash
	has: [InventoryHandlingRuleHasFilter]
	and: [InventoryHandlingRuleFilter]
	or: [InventoryHandlingRuleFilter]
	not: InventoryHandlingRuleFilter
}

input InventoryHandlingRulePatch {
	isActive: Boolean
	customer: PartnerRef
	stockType: StockType
	warehouse: [EquipmentRef!]
	stateModel: MaterialStateModelRef
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
}

input InventoryHandlingRuleRef {
	id: ID
	isActive: Boolean
	customer: PartnerRef
	stockType: StockType
	warehouse: [EquipmentRef!]
	stateModel: MaterialStateModelRef
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
}

input InventoryHoldingPolicyFilter {
	id: [ID!]
	isActive: Boolean
	has: [InventoryHoldingPolicyHasFilter]
	and: [InventoryHoldingPolicyFilter]
	or: [InventoryHoldingPolicyFilter]
	not: InventoryHoldingPolicyFilter
}

input InventoryHoldingPolicyOrder {
	asc: InventoryHoldingPolicyOrderable
	desc: InventoryHoldingPolicyOrderable
	then: InventoryHoldingPolicyOrder
}

input InventoryHoldingPolicyPatch {
	isActive: Boolean
	material: MaterialDefinitionRef
	inventoryHandlingRule: InventoryHandlingRuleRef
	materialStatus: MaterialStatusRef
	inventoryMax: Int
	inventoryMin: Int
}

input InventoryHoldingPolicyRef {
	id: ID
	isActive: Boolean
	material: MaterialDefinitionRef
	inventoryHandlingRule: InventoryHandlingRuleRef
	materialStatus: MaterialStatusRef
	inventoryMax: Int
	inventoryMin: Int
}

input JobOrderDependencyFilter {
	id: [ID!]
	isActive: Boolean
	has: [JobOrderDependencyHasFilter]
	and: [JobOrderDependencyFilter]
	or: [JobOrderDependencyFilter]
	not: JobOrderDependencyFilter
}

input JobOrderDependencyOrder {
	asc: JobOrderDependencyOrderable
	desc: JobOrderDependencyOrderable
	then: JobOrderDependencyOrder
}

input JobOrderDependencyPatch {
	isActive: Boolean
	description: String
	from: JobOrderRef
	to: JobOrderRef
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	segmentDependency: SegmentDependencyRef
}

input JobOrderDependencyRef {
	id: ID
	isActive: Boolean
	description: String
	from: JobOrderRef
	to: JobOrderRef
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	segmentDependency: SegmentDependencyRef
}

input JobOrderDispatchStateModelFilter {
	has: [JobOrderDispatchStateModelHasFilter]
	and: [JobOrderDispatchStateModelFilter]
	or: [JobOrderDispatchStateModelFilter]
	not: JobOrderDispatchStateModelFilter
}

input JobOrderDispatchStateModelPatch {
	fromStatus: DispatchStatus
	allowedTransition: [DispatchStatus]
}

input JobOrderDispatchStateModelRef {
	fromStatus: DispatchStatus
	allowedTransition: [DispatchStatus]
}

input JobOrderFilter {
	id: [ID!]
	isActive: Boolean
	createdDateTime: DateTimeFilter
	name: StringHashFilter_StringRegExpFilter
	description: StringHashFilter
	workType: WorkType_hash
	workDefinitionType: StringHashFilter
	scheduledStartDateTime: DateTimeFilter
	scheduledEndDateTime: DateTimeFilter
	dispatchStatus: DispatchStatus_hash
	has: [JobOrderHasFilter]
	and: [JobOrderFilter]
	or: [JobOrderFilter]
	not: JobOrderFilter
}

input JobOrderNoteFilter {
	id: [ID!]
	has: [JobOrderNoteHasFilter]
	and: [JobOrderNoteFilter]
	or: [JobOrderNoteFilter]
	not: JobOrderNoteFilter
}

input JobOrderNoteOrder {
	asc: JobOrderNoteOrderable
	desc: JobOrderNoteOrderable
	then: JobOrderNoteOrder
}

input JobOrderNotePatch {
	comment: String
	createdDateTime: DateTime
	editedDateTime: DateTime
	createdBy: UserRef
	modifiedBy: UserRef
	isActive: Boolean
	jobOrder: JobOrderRef
}

input JobOrderNoteRef {
	id: ID
	comment: String
	createdDateTime: DateTime
	editedDateTime: DateTime
	createdBy: UserRef
	modifiedBy: UserRef
	isActive: Boolean
	jobOrder: JobOrderRef
}

input JobOrderOrder {
	asc: JobOrderOrderable
	desc: JobOrderOrderable
	then: JobOrderOrder
}

input JobOrderPatch {
	isActive: Boolean
	createdDateTime: DateTime
	version: String
	description: String
	parent: JobOrderRef
	children: [JobOrderRef]
	workType: WorkType
	workDefinitionType: String
	duration: Float
	durationUoM: UnitOfMeasureRef
	materialSpecifications: [MaterialSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	parameterSpecifications: [ParameterSpecificationRef]
	scheduledStartDateTime: DateTime
	scheduledEndDateTime: DateTime
	scheduledDuration: Float
	equipment: EquipmentRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	priority: Int
	properties: [PropertyRef]
	hierarchyScope: String
	dispatchStatus: DispatchStatus
	operationsRequest: OperationsRequestRef
	operationsSegment: OperationsSegmentRef
	jobResponses: [JobResponseRef]
	jobOrderNotes: [JobOrderNoteRef]
	inflows: [JobOrderDependencyRef]
	outflows: [JobOrderDependencyRef]
	previous: [JobOrderRef]
	next: [JobOrderRef]
}

input JobOrderRef {
	id: ID
	isActive: Boolean
	createdDateTime: DateTime
	name: String
	version: String
	description: String
	parent: JobOrderRef
	children: [JobOrderRef]
	workType: WorkType
	workDefinitionType: String
	duration: Float
	durationUoM: UnitOfMeasureRef
	materialSpecifications: [MaterialSpecificationRef]
	equipmentSpecifications: [EquipmentSpecificationRef]
	personnelSpecifications: [PersonnelSpecificationRef]
	parameterSpecifications: [ParameterSpecificationRef]
	scheduledStartDateTime: DateTime
	scheduledEndDateTime: DateTime
	scheduledDuration: Float
	equipment: EquipmentRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	priority: Int
	properties: [PropertyRef]
	hierarchyScope: String
	dispatchStatus: DispatchStatus
	operationsRequest: OperationsRequestRef
	operationsSegment: OperationsSegmentRef
	jobResponses: [JobResponseRef]
	jobOrderNotes: [JobOrderNoteRef]
	inflows: [JobOrderDependencyRef]
	outflows: [JobOrderDependencyRef]
	previous: [JobOrderRef]
	next: [JobOrderRef]
}

input JobResponseFilter {
	id: [ID!]
	isActive: Boolean
	startDateTime: DateTimeFilter
	endDateTime: DateTimeFilter
	productionDate: StringHashFilter
	has: [JobResponseHasFilter]
	and: [JobResponseFilter]
	or: [JobResponseFilter]
	not: JobResponseFilter
}

input JobResponseOrder {
	asc: JobResponseOrderable
	desc: JobResponseOrderable
	then: JobResponseOrder
}

input JobResponsePatch {
	isActive: Boolean
	createdDateTime: DateTime
	modifiedDateTime: DateTime
	operator: UserRef
	equipment: EquipmentRef
	startDateTime: DateTime
	endDateTime: DateTime
	productionDate: String
	actualDuration: Float
	jobOrder: JobOrderRef
	events: [EventLogRef]
	quantities: [QuantityLogRef]
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	materialActual: [MaterialActualRef]
}

input JobResponseRef {
	id: ID
	isActive: Boolean
	createdDateTime: DateTime
	modifiedDateTime: DateTime
	operator: UserRef
	equipment: EquipmentRef
	startDateTime: DateTime
	endDateTime: DateTime
	productionDate: String
	actualDuration: Float
	jobOrder: JobOrderRef
	events: [EventLogRef]
	quantities: [QuantityLogRef]
	personnelActual: [PersonnelActualRef]
	equipmentActual: [EquipmentActualRef]
	materialActual: [MaterialActualRef]
}

input LibreServiceFilter {
	id: [ID!]
	name: StringHashFilter
	has: [LibreServiceHasFilter]
	and: [LibreServiceFilter]
	or: [LibreServiceFilter]
	not: LibreServiceFilter
}

input LibreServiceOrder {
	asc: LibreServiceOrderable
	desc: LibreServiceOrderable
	then: LibreServiceOrder
}

input LibreServicePatch {
	heartbeat: DateTime
}

input LibreServiceRef {
	id: ID
	name: String
	heartbeat: DateTime
}

input MaterialActualFilter {
	id: [ID!]
	isActive: Boolean
	has: [MaterialActualHasFilter]
	and: [MaterialActualFilter]
	or: [MaterialActualFilter]
	not: MaterialActualFilter
}

input MaterialActualOrder {
	asc: MaterialActualOrderable
	desc: MaterialActualOrderable
	then: MaterialActualOrder
}

input MaterialActualPatch {
	isActive: Boolean
	jobResponse: JobResponseRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input MaterialActualRef {
	id: ID
	isActive: Boolean
	jobResponse: JobResponseRef
	materialDefinition: MaterialDefinitionRef
	materialLot: MaterialLotRef
	materialSubLot: MaterialSubLotRef
	materialUse: MaterialUse
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input MaterialAlternateFilter {
	id: [ID!]
	isActive: Boolean
	has: [MaterialAlternateHasFilter]
	and: [MaterialAlternateFilter]
	or: [MaterialAlternateFilter]
	not: MaterialAlternateFilter
}

input MaterialAlternateOrder {
	asc: MaterialAlternateOrderable
	desc: MaterialAlternateOrderable
	then: MaterialAlternateOrder
}

input MaterialAlternatePatch {
	isActive: Boolean
	material: MaterialDefinitionRef
	alternateMaterial: MaterialDefinitionRef
	effectiveDateTime: DateTime
	priorityOrder: Int
}

input MaterialAlternateRef {
	id: ID
	isActive: Boolean
	material: MaterialDefinitionRef
	alternateMaterial: MaterialDefinitionRef
	effectiveDateTime: DateTime
	priorityOrder: Int
}

input MaterialClassFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [MaterialClassHasFilter]
	and: [MaterialClassFilter]
	or: [MaterialClassFilter]
	not: MaterialClassFilter
}

input MaterialClassOrder {
	asc: MaterialClassOrderable
	desc: MaterialClassOrderable
	then: MaterialClassOrder
}

input MaterialClassPatch {
	isActive: Boolean
	description: String
	properties: [PropertyRef]
	scheduleSortOrder: Int
	parent: MaterialClassRef
	children: [MaterialClassRef]
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

input MaterialClassRef {
	id: ID
	isActive: Boolean
	code: String
	description: String
	properties: [PropertyRef]
	scheduleSortOrder: Int
	parent: MaterialClassRef
	children: [MaterialClassRef]
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
}

input MaterialDefinitionFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	name: StringHashFilter
	customerMaterialCode: StringHashFilter
	has: [MaterialDefinitionHasFilter]
	and: [MaterialDefinitionFilter]
	or: [MaterialDefinitionFilter]
	not: MaterialDefinitionFilter
}

input MaterialDefinitionOrder {
	asc: MaterialDefinitionOrderable
	desc: MaterialDefinitionOrderable
	then: MaterialDefinitionOrder
}

input MaterialDefinitionPatch {
	isActive: Boolean
	name: String
	materialClass: MaterialClassRef
	materialActual: [MaterialActualRef]
	description: String
	properties: [PropertyRef]
	parameterSpecifications: [ParameterSpecificationRef]
	scheduleSortOrder: Int
	baseUnitOfMeasure: UnitOfMeasureRef
	uomConversions: [UnitOfMeasureConversionRef]
	workSpecifications: [MaterialSpecificationRef]
	operationsDefinitions: [OperationsDefinitionRef]
	lots: [MaterialLotRef]
	sublots: [MaterialSubLotRef]
	units: [MaterialUnitRef]
	value: Float
	valueCurrency: String
	weightKG: Float
	supplier: String
	serialMask: String
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
	alternates: [MaterialAlternateRef]
	shipmentItems: [ShipmentItemRef]
	OrderLines: [OrderLineRef]
	transferrableMaterials: [MaterialDefinitionRef]
	customerMaterialCode: String
}

input MaterialDefinitionRef {
	id: ID
	isActive: Boolean
	code: String
	name: String
	materialClass: MaterialClassRef
	materialActual: [MaterialActualRef]
	description: String
	properties: [PropertyRef]
	parameterSpecifications: [ParameterSpecificationRef]
	scheduleSortOrder: Int
	baseUnitOfMeasure: UnitOfMeasureRef
	uomConversions: [UnitOfMeasureConversionRef]
	workSpecifications: [MaterialSpecificationRef]
	operationsDefinitions: [OperationsDefinitionRef]
	lots: [MaterialLotRef]
	sublots: [MaterialSubLotRef]
	units: [MaterialUnitRef]
	value: Float
	valueCurrency: String
	weightKG: Float
	supplier: String
	serialMask: String
	inventoryHandlingPolicy: InventoryHandlingPolicyRef
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
	alternates: [MaterialAlternateRef]
	shipmentItems: [ShipmentItemRef]
	OrderLines: [OrderLineRef]
	transferrableMaterials: [MaterialDefinitionRef]
	customerMaterialCode: String
}

input MaterialEventRulesetFilter {
	id: [ID!]
	has: [MaterialEventRulesetHasFilter]
	and: [MaterialEventRulesetFilter]
	or: [MaterialEventRulesetFilter]
	not: MaterialEventRulesetFilter
}

input MaterialEventRulesetOrder {
	asc: MaterialEventRulesetOrderable
	desc: MaterialEventRulesetOrderable
	then: MaterialEventRulesetOrder
}

input MaterialEventRulesetPatch {
	name: String
	triggerWhen: [RulesetTriggerOption]
	segment: OperationsSegmentRef
	targetMaterial: String
	targetMaterialOp: String
	eventDefs: [EventDefinitionRef]
}

input MaterialEventRulesetRef {
	id: ID
	name: String
	triggerWhen: [RulesetTriggerOption]
	segment: OperationsSegmentRef
	targetMaterial: String
	targetMaterialOp: String
	eventDefs: [EventDefinitionRef]
}

input MaterialLotFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [MaterialLotHasFilter]
	and: [MaterialLotFilter]
	or: [MaterialLotFilter]
	not: MaterialLotFilter
}

input MaterialLotOrder {
	asc: MaterialLotOrderable
	desc: MaterialLotOrderable
	then: MaterialLotOrder
}

input MaterialLotPatch {
	isActive: Boolean
	description: String
	properties: [PropertyRef]
	material: MaterialDefinitionRef
	quantity: String
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	materialActual: [MaterialActualRef]
	isAssembledFromLot: [MaterialLotRef]
	isComponentOfLot: [MaterialLotRef]
	isAssembledFromSubLot: [MaterialSubLotRef]
	isComponentOfSubLot: [MaterialSubLotRef]
	childSubLot: [MaterialSubLotRef]
}

input MaterialLotRef {
	id: ID
	isActive: Boolean
	code: String
	description: String
	properties: [PropertyRef]
	material: MaterialDefinitionRef
	quantity: String
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	materialActual: [MaterialActualRef]
	isAssembledFromLot: [MaterialLotRef]
	isComponentOfLot: [MaterialLotRef]
	isAssembledFromSubLot: [MaterialSubLotRef]
	isComponentOfSubLot: [MaterialSubLotRef]
	childSubLot: [MaterialSubLotRef]
}

input MaterialSpecificationFilter {
	id: [ID!]
	isActive: Boolean
	materialUse: MaterialUse_hash
	isBackFlushed: Boolean
	has: [MaterialSpecificationHasFilter]
	and: [MaterialSpecificationFilter]
	or: [MaterialSpecificationFilter]
	not: MaterialSpecificationFilter
}

input MaterialSpecificationOrder {
	asc: MaterialSpecificationOrderable
	desc: MaterialSpecificationOrderable
	then: MaterialSpecificationOrder
}

input MaterialSpecificationPatch {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	billOfMaterial: BillOfMaterialRef
	material: MaterialDefinitionRef
	materialClass: MaterialClassRef
	description: String
	materialUse: MaterialUse
	allowedStates: [MaterialStatusRef]
	isTracked: Boolean
	isBackFlushed: Boolean
	backFlushFromLocation: EquipmentRef
	quantity: Float
	uom: UnitOfMeasureRef
}

input MaterialSpecificationRef {
	id: ID
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	billOfMaterial: BillOfMaterialRef
	material: MaterialDefinitionRef
	materialClass: MaterialClassRef
	description: String
	materialUse: MaterialUse
	allowedStates: [MaterialStatusRef]
	isTracked: Boolean
	isBackFlushed: Boolean
	backFlushFromLocation: EquipmentRef
	quantity: Float
	uom: UnitOfMeasureRef
}

input MaterialStateModelFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [MaterialStateModelHasFilter]
	and: [MaterialStateModelFilter]
	or: [MaterialStateModelFilter]
	not: MaterialStateModelFilter
}

input MaterialStateModelOrder {
	asc: MaterialStateModelOrderable
	desc: MaterialStateModelOrderable
	then: MaterialStateModelOrder
}

input MaterialStateModelPatch {
	isActive: Boolean
	states: [MaterialStateTransitionRef!]
	inventoryHandlingRules: [InventoryHandlingRuleRef]
}

input MaterialStateModelRef {
	id: ID
	isActive: Boolean
	name: String
	states: [MaterialStateTransitionRef!]
	inventoryHandlingRules: [InventoryHandlingRuleRef]
}

input MaterialStateTransitionFilter {
	id: [ID!]
	canReceive: Boolean
	canPack: Boolean
	isPlanned: Boolean
	has: [MaterialStateTransitionHasFilter]
	and: [MaterialStateTransitionFilter]
	or: [MaterialStateTransitionFilter]
	not: MaterialStateTransitionFilter
}

input MaterialStateTransitionPatch {
	status: MaterialStatusRef
	to: [MaterialStatusRef]
	canReceive: Boolean
	canPack: Boolean
	isPlanned: Boolean
}

input MaterialStateTransitionRef {
	id: ID
	status: MaterialStatusRef
	to: [MaterialStatusRef]
	canReceive: Boolean
	canPack: Boolean
	isPlanned: Boolean
}

input MaterialStatusFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [MaterialStatusHasFilter]
	and: [MaterialStatusFilter]
	or: [MaterialStatusFilter]
	not: MaterialStatusFilter
}

input MaterialStatusOrder {
	asc: MaterialStatusOrderable
	desc: MaterialStatusOrderable
	then: MaterialStatusOrder
}

input MaterialStatusPatch {
	isActive: Boolean
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
}

input MaterialStatusRef {
	id: ID
	isActive: Boolean
	code: String
	inventoryHoldingPolicy: [InventoryHoldingPolicyRef]
}

input MaterialSubLotFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [MaterialSubLotHasFilter]
	and: [MaterialSubLotFilter]
	or: [MaterialSubLotFilter]
	not: MaterialSubLotFilter
}

input MaterialSubLotOrder {
	asc: MaterialSubLotOrderable
	desc: MaterialSubLotOrderable
	then: MaterialSubLotOrder
}

input MaterialSubLotPatch {
	isActive: Boolean
	material: MaterialDefinitionRef
	materialActual: [MaterialActualRef]
	description: String
	status: MaterialStatusRef
	storageLocation: EquipmentRef
	isAssembledFromSubLot: [MaterialSubLotRef]
	isComponentOfSubLot: [MaterialSubLotRef]
	isComponentOfLot: [MaterialLotRef]
	isAssembledFromLot: [MaterialLotRef]
	parentLot: MaterialLotRef
	parentSubLot: MaterialSubLotRef
	childSubLot: MaterialSubLotRef
	quantity: String
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	properties: [PropertyRef]
}

input MaterialSubLotRef {
	id: ID
	isActive: Boolean
	code: String
	material: MaterialDefinitionRef
	materialActual: [MaterialActualRef]
	description: String
	status: MaterialStatusRef
	storageLocation: EquipmentRef
	isAssembledFromSubLot: [MaterialSubLotRef]
	isComponentOfSubLot: [MaterialSubLotRef]
	isComponentOfLot: [MaterialLotRef]
	isAssembledFromLot: [MaterialLotRef]
	parentLot: MaterialLotRef
	parentSubLot: MaterialSubLotRef
	childSubLot: MaterialSubLotRef
	quantity: String
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	properties: [PropertyRef]
}

input MaterialUnitFilter {
	id: [ID!]
	isActive: Boolean
	serialNumber: StringHashFilter
	has: [MaterialUnitHasFilter]
	and: [MaterialUnitFilter]
	or: [MaterialUnitFilter]
	not: MaterialUnitFilter
}

input MaterialUnitOrder {
	asc: MaterialUnitOrderable
	desc: MaterialUnitOrderable
	then: MaterialUnitOrder
}

input MaterialUnitPatch {
	isActive: Boolean
	material: MaterialDefinitionRef
	properties: [PropertyRef]
}

input MaterialUnitRef {
	id: ID
	isActive: Boolean
	serialNumber: String
	material: MaterialDefinitionRef
	properties: [PropertyRef]
}

input MaterialUse_hash {
	eq: MaterialUse
	in: [MaterialUse]
}

input MenuFilter {
	id: [ID!]
	label: StringHashFilter
	has: [MenuHasFilter]
	and: [MenuFilter]
	or: [MenuFilter]
	not: MenuFilter
}

input MenuOrder {
	asc: MenuOrderable
	desc: MenuOrderable
	then: MenuOrder
}

input MenuPatch {
	label: String
	access: [RoleRef!]
	parent: MenuRef
	children: [MenuRef!]
	menuPage: String
	icon: String
	isSection: Boolean
	isPage: Boolean
	orderNumber: Int
}

input MenuRef {
	id: ID
	label: String
	access: [RoleRef!]
	parent: MenuRef
	children: [MenuRef!]
	menuPage: String
	icon: String
	isSection: Boolean
	isPage: Boolean
	orderNumber: Int
}

input OperationsDefinitionFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [OperationsDefinitionHasFilter]
	and: [OperationsDefinitionFilter]
	or: [OperationsDefinitionFilter]
	not: OperationsDefinitionFilter
}

input OperationsDefinitionOrder {
	asc: OperationsDefinitionOrderable
	desc: OperationsDefinitionOrderable
	then: OperationsDefinitionOrder
}

input OperationsDefinitionPatch {
	isActive: Boolean
	material: MaterialDefinitionRef
	version: String
	description: String
	operationsType: WorkType
	hierarchyScope: String
	billOfMaterial: BillOfMaterialRef
	segments: [OperationsSegmentRef]
}

input OperationsDefinitionRef {
	id: ID
	isActive: Boolean
	name: String
	material: MaterialDefinitionRef
	version: String
	description: String
	operationsType: WorkType
	hierarchyScope: String
	billOfMaterial: BillOfMaterialRef
	segments: [OperationsSegmentRef]
}

input OperationsRequestFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [OperationsRequestHasFilter]
	and: [OperationsRequestFilter]
	or: [OperationsRequestFilter]
	not: OperationsRequestFilter
}

input OperationsRequestOrder {
	asc: OperationsRequestOrderable
	desc: OperationsRequestOrderable
	then: OperationsRequestOrder
}

input OperationsRequestPatch {
	isActive: Boolean
	operationsType: WorkType
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	operationsDefinition: OperationsDefinitionRef
	requestState: RequestStateRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	jobOrders: [JobOrderRef]
	equipment: EquipmentRef
	properties: [PropertyRef]
}

input OperationsRequestRef {
	id: ID
	isActive: Boolean
	code: String
	operationsType: WorkType
	plannedStartDateTime: DateTime
	plannedEndDateTime: DateTime
	priority: String
	operationsDefinition: OperationsDefinitionRef
	requestState: RequestStateRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
	jobOrders: [JobOrderRef]
	equipment: EquipmentRef
	properties: [PropertyRef]
}

input OperationsSegmentFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	description: StringHashFilter
	workType: WorkType_hash
	workDefinitionType: StringHashFilter
	has: [OperationsSegmentHasFilter]
	and: [OperationsSegmentFilter]
	or: [OperationsSegmentFilter]
	not: OperationsSegmentFilter
}

input OperationsSegmentOrder {
	asc: OperationsSegmentOrderable
	desc: OperationsSegmentOrderable
	then: OperationsSegmentOrder
}

input OperationsSegmentPatch {
	isActive: Boolean
	name: String
	version: String
	type: SegmentType
	uiComponent: String
	description: String
	parent: OperationsSegmentRef
	children: [OperationsSegmentRef]
	workType: WorkType
	workDefinitionType: String
	duration: Float
	glAccountWIP: String
	glAccountWIPInvoice: String
	glAccountFixedOverhead: String
	glAccountVariableOverhead: String
	glAccountDirectLabour: String
	invoiceSettings: [SegmentInvoiceSettingRef]
	costAmountFixedOverhead: Float
	costDriverFixedOverhead: CostDriver
	costAmountVariableOverhead: Float
	costAmountDirectLabourRate: Float
	durationUoM: UnitOfMeasureRef
	orderStartRuleset: OrderStartRulesetRef
	materialSpecifications: [MaterialSpecificationRef]
	materialEventRuleset: MaterialEventRulesetRef
	equipmentSpecifications: [EquipmentSpecificationRef]
	stateEventRuleset: StateEventRulesetRef
	personnelSpecifications: [PersonnelSpecificationRef]
	parameterSpecifications: [ParameterSpecificationRef]
	hierarchyScope: String
	inflows: [SegmentDependencyRef]
	outflows: [SegmentDependencyRef]
	operationsDefinition: OperationsDefinitionRef
	jobOrders: [JobOrderRef]
	mpmPlanRate: Float
	mpmIdealSetupTime: Float
	mpmIdealChangeoverTime: Float
	mpmEnableSmartChangeover: Boolean
	mpmChangeoverFamily: String
	mpmThresholdRunRate: Float
	mpmThresholdRunDuration: Float
	mpmThresholdSlowRate: Float
	mpmThresholdSlowDuration: Float
	mpmThresholdMicrostopDuration: Float
	mpmEnableAutoIdent: Boolean
	mpmAutoIdentMatchCode: PropertyRef
	positionX: Int
	positionY: Int
}

input OperationsSegmentRef {
	id: ID
	isActive: Boolean
	name: String
	version: String
	type: SegmentType
	uiComponent: String
	description: String
	parent: OperationsSegmentRef
	children: [OperationsSegmentRef]
	workType: WorkType
	workDefinitionType: String
	duration: Float
	glAccountWIP: String
	glAccountWIPInvoice: String
	glAccountFixedOverhead: String
	glAccountVariableOverhead: String
	glAccountDirectLabour: String
	invoiceSettings: [SegmentInvoiceSettingRef]
	costAmountFixedOverhead: Float
	costDriverFixedOverhead: CostDriver
	costAmountVariableOverhead: Float
	costAmountDirectLabourRate: Float
	durationUoM: UnitOfMeasureRef
	orderStartRuleset: OrderStartRulesetRef
	materialSpecifications: [MaterialSpecificationRef]
	materialEventRuleset: MaterialEventRulesetRef
	equipmentSpecifications: [EquipmentSpecificationRef]
	stateEventRuleset: StateEventRulesetRef
	personnelSpecifications: [PersonnelSpecificationRef]
	parameterSpecifications: [ParameterSpecificationRef]
	hierarchyScope: String
	inflows: [SegmentDependencyRef]
	outflows: [SegmentDependencyRef]
	operationsDefinition: OperationsDefinitionRef
	jobOrders: [JobOrderRef]
	mpmPlanRate: Float
	mpmIdealSetupTime: Float
	mpmIdealChangeoverTime: Float
	mpmEnableSmartChangeover: Boolean
	mpmChangeoverFamily: String
	mpmThresholdRunRate: Float
	mpmThresholdRunDuration: Float
	mpmThresholdSlowRate: Float
	mpmThresholdSlowDuration: Float
	mpmThresholdMicrostopDuration: Float
	mpmEnableAutoIdent: Boolean
	mpmAutoIdentMatchCode: PropertyRef
	positionX: Int
	positionY: Int
}

input OrderFilter {
	id: [ID!]
	isActive: Boolean
	orderType: OrderType_hash
	customerOrderNumber: StringFullTextFilter_StringHashFilter
	has: [OrderHasFilter]
	and: [OrderFilter]
	or: [OrderFilter]
	not: OrderFilter
}

input OrderLineFilter {
	id: [ID!]
	isActive: Boolean
	has: [OrderLineHasFilter]
	and: [OrderLineFilter]
	or: [OrderLineFilter]
	not: OrderLineFilter
}

input OrderLineOrder {
	asc: OrderLineOrderable
	desc: OrderLineOrderable
	then: OrderLineOrder
}

input OrderLinePatch {
	isActive: Boolean
	order: OrderRef
	orderLineNumber: Int
	material: MaterialDefinitionRef
	quantity: Int
	defectiveSerialNumbers: String
	isReturn: Boolean
	workflowInstance: WorkflowInstanceRef
}

input OrderLineRef {
	id: ID
	isActive: Boolean
	order: OrderRef
	orderLineNumber: Int
	material: MaterialDefinitionRef
	quantity: Int
	defectiveSerialNumbers: String
	isReturn: Boolean
	workflowInstance: WorkflowInstanceRef
}

input OrderOrder {
	asc: OrderOrderable
	desc: OrderOrderable
	then: OrderOrder
}

input OrderPatch {
	isActive: Boolean
	orderType: OrderType
	customerOrderNumber: String
	customerReference: String
	deliveryTerms: IncoTerms
	status: OrderStatus
	shipFromPartner: PartnerRef
	shipToPartner: PartnerRef
	invoiceFromPartner: PartnerRef
	invoiceToPartner: PartnerRef
	warehouse: EquipmentRef
	lines: [OrderLineRef]
	shipments: [ShipmentRef]
	notes: String
	createdDateTime: DateTime
}

input OrderRef {
	id: ID
	isActive: Boolean
	orderType: OrderType
	customerOrderNumber: String
	customerReference: String
	deliveryTerms: IncoTerms
	status: OrderStatus
	shipFromPartner: PartnerRef
	shipToPartner: PartnerRef
	invoiceFromPartner: PartnerRef
	invoiceToPartner: PartnerRef
	warehouse: EquipmentRef
	lines: [OrderLineRef]
	shipments: [ShipmentRef]
	notes: String
	createdDateTime: DateTime
}

input OrderStartRulesetFilter {
	id: [ID!]
	has: [OrderStartRulesetHasFilter]
	and: [OrderStartRulesetFilter]
	or: [OrderStartRulesetFilter]
	not: OrderStartRulesetFilter
}

input OrderStartRulesetOrder {
	asc: OrderStartRulesetOrderable
	desc: OrderStartRulesetOrderable
	then: OrderStartRulesetOrder
}

input OrderStartRulesetPatch {
	name: String
	segment: OperationsSegmentRef
	eventDefs: [EventDefinitionRef]
}

input OrderStartRulesetRef {
	id: ID
	name: String
	segment: OperationsSegmentRef
	eventDefs: [EventDefinitionRef]
}

input OrderType_hash {
	eq: OrderType
	in: [OrderType]
}

input ParameterSpecificationFilter {
	id: [ID!]
	isActive: Boolean
	has: [ParameterSpecificationHasFilter]
	and: [ParameterSpecificationFilter]
	or: [ParameterSpecificationFilter]
	not: ParameterSpecificationFilter
}

input ParameterSpecificationOrder {
	asc: ParameterSpecificationOrderable
	desc: ParameterSpecificationOrderable
	then: ParameterSpecificationOrder
}

input ParameterSpecificationPatch {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	material: MaterialDefinitionRef
	property: PropertyRef
	valueDefault: String
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
}

input ParameterSpecificationRef {
	id: ID
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	material: MaterialDefinitionRef
	property: PropertyRef
	valueDefault: String
	valueSetPoint: String
	valueUpperSpecLimit: Float
	valueLowerSpecLimit: Float
	valueUpperControlLimit: Float
	valueLowerControlLimit: Float
}

input PartnerFilter {
	id: [ID!]
	isActive: Boolean
	companyCode: StringHashFilter
	name: StringHashFilter
	isMerchant: Boolean
	isRepairer: Boolean
	isSupplier: Boolean
	isTransport: Boolean
	isCustomer: Boolean
	isInventoryOwner: Boolean
	has: [PartnerHasFilter]
	and: [PartnerFilter]
	or: [PartnerFilter]
	not: PartnerFilter
}

input PartnerOrder {
	asc: PartnerOrderable
	desc: PartnerOrderable
	then: PartnerOrder
}

input PartnerPatch {
	isActive: Boolean
	companyCode: String
	name: String
	vatNumber: String
	registrationNumber: String
	contactName: String
	contactEmail: String
	contactPhone: String
	shippingAddress: AddressRef
	billingAddress: AddressRef
	isMerchant: Boolean
	isRepairer: Boolean
	isSupplier: Boolean
	isTransport: Boolean
	isCustomer: Boolean
	isInventoryOwner: Boolean
	carriers: [CarrierRef]
	fromOrders: [OrderRef]
	toOrders: [OrderRef]
	shippingAccounts: [ShippingAccountRef]
}

input PartnerRef {
	id: ID
	isActive: Boolean
	companyCode: String
	name: String
	vatNumber: String
	registrationNumber: String
	contactName: String
	contactEmail: String
	contactPhone: String
	shippingAddress: AddressRef
	billingAddress: AddressRef
	isMerchant: Boolean
	isRepairer: Boolean
	isSupplier: Boolean
	isTransport: Boolean
	isCustomer: Boolean
	isInventoryOwner: Boolean
	carriers: [CarrierRef]
	fromOrders: [OrderRef]
	toOrders: [OrderRef]
	shippingAccounts: [ShippingAccountRef]
}

input PayloadFieldDefinitionFilter {
	id: [ID!]
	isActive: Boolean
	has: [PayloadFieldDefinitionHasFilter]
	and: [PayloadFieldDefinitionFilter]
	or: [PayloadFieldDefinitionFilter]
	not: PayloadFieldDefinitionFilter
}

input PayloadFieldDefinitionOrder {
	asc: PayloadFieldDefinitionOrderable
	desc: PayloadFieldDefinitionOrderable
	then: PayloadFieldDefinitionOrder
}

input PayloadFieldDefinitionPatch {
	isActive: Boolean
	name: String
	expression: String
	fieldType: PayloadFieldType
}

input PayloadFieldDefinitionRef {
	id: ID
	isActive: Boolean
	name: String
	expression: String
	fieldType: PayloadFieldType
}

input PersonFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [PersonHasFilter]
	and: [PersonFilter]
	or: [PersonFilter]
	not: PersonFilter
}

input PersonOrder {
	asc: PersonOrderable
	desc: PersonOrderable
	then: PersonOrder
}

input PersonPatch {
	isActive: Boolean
	description: String
	properties: [PropertyRef]
	memberOf: [PersonnelClassRef]
	personnelActual: [PersonnelActualRef]
}

input PersonRef {
	id: ID
	isActive: Boolean
	name: String
	description: String
	properties: [PropertyRef]
	memberOf: [PersonnelClassRef]
	personnelActual: [PersonnelActualRef]
}

input PersonnelActualFilter {
	id: [ID!]
	isActive: Boolean
	has: [PersonnelActualHasFilter]
	and: [PersonnelActualFilter]
	or: [PersonnelActualFilter]
	not: PersonnelActualFilter
}

input PersonnelActualOrder {
	asc: PersonnelActualOrderable
	desc: PersonnelActualOrderable
	then: PersonnelActualOrder
}

input PersonnelActualPatch {
	isActive: Boolean
	jobResponse: JobResponseRef
	person: PersonRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input PersonnelActualRef {
	id: ID
	isActive: Boolean
	jobResponse: JobResponseRef
	person: PersonRef
	quantity: Float
	quantityUoM: UnitOfMeasureRef
}

input PersonnelClassFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [PersonnelClassHasFilter]
	and: [PersonnelClassFilter]
	or: [PersonnelClassFilter]
	not: PersonnelClassFilter
}

input PersonnelClassOrder {
	asc: PersonnelClassOrderable
	desc: PersonnelClassOrderable
	then: PersonnelClassOrder
}

input PersonnelClassPatch {
	isActive: Boolean
	description: String
	properties: [PropertyRef]
	persons: [PersonRef]
	isTestedBy: [TestSpecificationRef]
}

input PersonnelClassRef {
	id: ID
	isActive: Boolean
	name: String
	description: String
	properties: [PropertyRef]
	persons: [PersonRef]
	isTestedBy: [TestSpecificationRef]
}

input PersonnelSpecificationFilter {
	id: [ID!]
	isActive: Boolean
	has: [PersonnelSpecificationHasFilter]
	and: [PersonnelSpecificationFilter]
	or: [PersonnelSpecificationFilter]
	not: PersonnelSpecificationFilter
}

input PersonnelSpecificationOrder {
	asc: PersonnelSpecificationOrderable
	desc: PersonnelSpecificationOrderable
	then: PersonnelSpecificationOrder
}

input PersonnelSpecificationPatch {
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	person: PersonRef
	personnelClass: PersonnelClassRef
	description: String
	personnelUse: String
	quantity: Float
	uom: UnitOfMeasureRef
}

input PersonnelSpecificationRef {
	id: ID
	isActive: Boolean
	jobOrder: JobOrderRef
	operationsSegment: OperationsSegmentRef
	person: PersonRef
	personnelClass: PersonnelClassRef
	description: String
	personnelUse: String
	quantity: Float
	uom: UnitOfMeasureRef
}

input PropertyFilter {
	id: [ID!]
	isActive: Boolean
	type: PropertyType_hash
	name: StringHashFilter
	description: StringHashFilter
	has: [PropertyHasFilter]
	and: [PropertyFilter]
	or: [PropertyFilter]
	not: PropertyFilter
}

input PropertyNameAliasFilter {
	id: [ID!]
	alias: StringFullTextFilter_StringHashFilter
	system: StringFullTextFilter_StringHashFilter
	has: [PropertyNameAliasHasFilter]
	and: [PropertyNameAliasFilter]
	or: [PropertyNameAliasFilter]
	not: PropertyNameAliasFilter
}

input PropertyNameAliasOrder {
	asc: PropertyNameAliasOrderable
	desc: PropertyNameAliasOrderable
	then: PropertyNameAliasOrder
}

input PropertyNameAliasPatch {
	property: PropertyRef
	equipment: EquipmentRef
	alias: String
	system: String
}

input PropertyNameAliasRef {
	id: ID
	property: PropertyRef
	equipment: EquipmentRef
	alias: String
	system: String
}

input PropertyOrder {
	asc: PropertyOrderable
	desc: PropertyOrderable
	then: PropertyOrder
}

input PropertyPatch {
	isActive: Boolean
	type: PropertyType
	name: String
	description: String
	dataType: DataType
	definedBy: PropertyRef
	address: String
	expression: String
	value: String
	unitOfMeasure: UnitOfMeasureRef
	storeHistory: Boolean
	isTestedBy: [TestSpecificationRef]
	equipment: EquipmentRef
	equipmentClass: EquipmentClassRef
	materialClass: MaterialClassRef
	operationsRequest: OperationsRequestRef
	jobOrder: JobOrderRef
	propertyOverrides: [EquipmentPropertyOverrideRef]
	propertyNameAliases: [PropertyNameAliasRef]
	eventTriggers: [EventDefinitionRef]
	eventPayloads: [EventDefinitionRef]
	parameterSpecifications: [ParameterSpecificationRef]
}

input PropertyRef {
	id: ID
	isActive: Boolean
	type: PropertyType
	name: String
	description: String
	dataType: DataType
	definedBy: PropertyRef
	address: String
	expression: String
	value: String
	unitOfMeasure: UnitOfMeasureRef
	storeHistory: Boolean
	isTestedBy: [TestSpecificationRef]
	equipment: EquipmentRef
	equipmentClass: EquipmentClassRef
	materialClass: MaterialClassRef
	operationsRequest: OperationsRequestRef
	jobOrder: JobOrderRef
	propertyOverrides: [EquipmentPropertyOverrideRef]
	propertyNameAliases: [PropertyNameAliasRef]
	eventTriggers: [EventDefinitionRef]
	eventPayloads: [EventDefinitionRef]
	parameterSpecifications: [ParameterSpecificationRef]
}

input PropertyType_hash {
	eq: PropertyType
	in: [PropertyType]
}

input PropertyValueAliasFilter {
	id: [ID!]
	value: StringFullTextFilter
	alias: StringFullTextFilter
	system: StringFullTextFilter
	has: [PropertyValueAliasHasFilter]
	and: [PropertyValueAliasFilter]
	or: [PropertyValueAliasFilter]
	not: PropertyValueAliasFilter
}

input PropertyValueAliasOrder {
	asc: PropertyValueAliasOrderable
	desc: PropertyValueAliasOrderable
	then: PropertyValueAliasOrder
}

input PropertyValueAliasPatch {
	property: PropertyRef
	value: String
	alias: String
	system: String
}

input PropertyValueAliasRef {
	id: ID
	property: PropertyRef
	value: String
	alias: String
	system: String
}

input QuantityLogFilter {
	id: [ID!]
	isActive: Boolean
	type: MaterialUse_hash
	timestamp: DateTimeFilter
	reasonCode: StringHashFilter
	reasonText: StringHashFilter
	comments: StringHashFilter
	has: [QuantityLogHasFilter]
	and: [QuantityLogFilter]
	or: [QuantityLogFilter]
	not: QuantityLogFilter
}

input QuantityLogOrder {
	asc: QuantityLogOrderable
	desc: QuantityLogOrderable
	then: QuantityLogOrder
}

input QuantityLogPatch {
	isActive: Boolean
	jobResponse: JobResponseRef
	equipment: EquipmentRef
	type: MaterialUse
	timestamp: DateTime
	quantity: Float
	reasonCode: String
	reasonText: String
	comments: String
}

input QuantityLogRef {
	id: ID
	isActive: Boolean
	jobResponse: JobResponseRef
	equipment: EquipmentRef
	type: MaterialUse
	timestamp: DateTime
	quantity: Float
	reasonCode: String
	reasonText: String
	comments: String
}

input ReasonCategoryFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [ReasonCategoryHasFilter]
	and: [ReasonCategoryFilter]
	or: [ReasonCategoryFilter]
	not: ReasonCategoryFilter
}

input ReasonCategoryOrder {
	asc: ReasonCategoryOrderable
	desc: ReasonCategoryOrderable
	then: ReasonCategoryOrder
}

input ReasonCategoryPatch {
	isActive: Boolean
	reason: [ReasonRef]
	timeCategory: TimeCategory
}

input ReasonCategoryRef {
	id: ID
	isActive: Boolean
	reason: [ReasonRef]
	code: String
	timeCategory: TimeCategory
}

input ReasonClass_hash {
	eq: ReasonClass
	in: [ReasonClass]
}

input ReasonFilter {
	id: [ID!]
	isActive: Boolean
	class: ReasonClass_hash
	label: StringHashFilter
	text: StringHashFilter
	erpCode: StringHashFilter
	has: [ReasonHasFilter]
	and: [ReasonFilter]
	or: [ReasonFilter]
	not: ReasonFilter
}

input ReasonOrder {
	asc: ReasonOrderable
	desc: ReasonOrderable
	then: ReasonOrder
}

input ReasonPatch {
	isActive: Boolean
	class: ReasonClass
	category: ReasonCategoryRef
	label: String
	text: String
	erpCode: String
	standardValue: Float
	valueUoM: UnitOfMeasureRef
	parent: ReasonRef
	children: [ReasonRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	equipmentOverrides: [EquipmentReasonOverrideRef]
}

input ReasonRef {
	id: ID
	isActive: Boolean
	class: ReasonClass
	category: ReasonCategoryRef
	label: String
	text: String
	erpCode: String
	standardValue: Float
	valueUoM: UnitOfMeasureRef
	parent: ReasonRef
	children: [ReasonRef]
	equipmentClass: EquipmentClassRef
	equipment: EquipmentRef
	equipmentOverrides: [EquipmentReasonOverrideRef]
}

input RequestStateFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [RequestStateHasFilter]
	and: [RequestStateFilter]
	or: [RequestStateFilter]
	not: RequestStateFilter
}

input RequestStateOrder {
	asc: RequestStateOrderable
	desc: RequestStateOrderable
	then: RequestStateOrder
}

input RequestStatePatch {
	isActive: Boolean
	description: String
}

input RequestStateRef {
	id: ID
	isActive: Boolean
	name: String
	description: String
}

input RoleFilter {
	name: StringHashFilter
	has: [RoleHasFilter]
	and: [RoleFilter]
	or: [RoleFilter]
	not: RoleFilter
}

input RoleOrder {
	asc: RoleOrderable
	desc: RoleOrderable
	then: RoleOrder
}

input RolePatch {
	hasMembers: [UserRoleRef]
	hasGrantedRights: [AccessRightRef]
	isActive: Boolean
	workflowNodes: [WorkflowNodeRef]
}

input RoleRef {
	name: String
	hasMembers: [UserRoleRef]
	hasGrantedRights: [AccessRightRef]
	isActive: Boolean
	workflowNodes: [WorkflowNodeRef]
}

input SegmentDependencyFilter {
	id: [ID!]
	isActive: Boolean
	has: [SegmentDependencyHasFilter]
	and: [SegmentDependencyFilter]
	or: [SegmentDependencyFilter]
	not: SegmentDependencyFilter
}

input SegmentDependencyOrder {
	asc: SegmentDependencyOrderable
	desc: SegmentDependencyOrderable
	then: SegmentDependencyOrder
}

input SegmentDependencyPatch {
	isActive: Boolean
	description: String
	from: OperationsSegmentRef
	to: OperationsSegmentRef
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	transitionEventRuleset: TransitionEventRulesetRef
	jobOrderDependencies: [JobOrderDependencyRef]
}

input SegmentDependencyRef {
	id: ID
	isActive: Boolean
	description: String
	from: OperationsSegmentRef
	to: OperationsSegmentRef
	dependencyType: DependencyType
	dependencyFactor: Float
	factorUoM: UnitOfMeasureRef
	condition: String
	transitionEventRuleset: TransitionEventRulesetRef
	jobOrderDependencies: [JobOrderDependencyRef]
}

input SegmentInvoiceSettingFilter {
	id: [ID!]
	has: [SegmentInvoiceSettingHasFilter]
	and: [SegmentInvoiceSettingFilter]
	or: [SegmentInvoiceSettingFilter]
	not: SegmentInvoiceSettingFilter
}

input SegmentInvoiceSettingOrder {
	asc: SegmentInvoiceSettingOrderable
	desc: SegmentInvoiceSettingOrderable
	then: SegmentInvoiceSettingOrder
}

input SegmentInvoiceSettingPatch {
	partner: PartnerRef
	costPerHour: Float
	costPerUnit: Float
}

input SegmentInvoiceSettingRef {
	id: ID
	partner: PartnerRef
	costPerHour: Float
	costPerUnit: Float
}

input ShipmentFilter {
	id: [ID!]
	isActive: Boolean
	type: ShipmentType_hash
	reference: StringHashFilter_StringRegExpFilter
	consignmentNumber: StringFullTextFilter_StringHashFilter
	dateTimeReceivedUTC: DateTimeFilter
	dateTimeDeliveredUTC: DateTimeFilter
	dateTimePackedUTC: DateTimeFilter
	dateTimeCreatedUTC: DateTimeFilter
	status: ShipmentStatus_hash
	has: [ShipmentHasFilter]
	and: [ShipmentFilter]
	or: [ShipmentFilter]
	not: ShipmentFilter
}

input ShipmentItemFilter {
	id: [ID!]
	isActive: Boolean
	status: ShipmentItemStatus_hash
	isParcel: Boolean
	has: [ShipmentItemHasFilter]
	and: [ShipmentItemFilter]
	or: [ShipmentItemFilter]
	not: ShipmentItemFilter
}

input ShipmentItemOrder {
	asc: ShipmentItemOrderable
	desc: ShipmentItemOrderable
	then: ShipmentItemOrder
}

input ShipmentItemPatch {
	isActive: Boolean
	transportCompanyItemReference: String
	transportCompanyItemId: String
	trackingDetailsArticleId: String
	trackingDetailsBarcodeId: String
	trackingDetailsConsignmentId: String
	shipment: ShipmentRef
	status: ShipmentItemStatus
	material: MaterialDefinitionRef
	plannedQuantity: Int
	isParcel: Boolean
	bin: EquipmentRef
	box: BoxRef
	weightKg: Float
}

input ShipmentItemRef {
	id: ID
	isActive: Boolean
	transportCompanyItemReference: String
	transportCompanyItemId: String
	trackingDetailsArticleId: String
	trackingDetailsBarcodeId: String
	trackingDetailsConsignmentId: String
	shipment: ShipmentRef
	status: ShipmentItemStatus
	material: MaterialDefinitionRef
	plannedQuantity: Int
	isParcel: Boolean
	bin: EquipmentRef
	box: BoxRef
	weightKg: Float
}

input ShipmentItemStatus_hash {
	eq: ShipmentItemStatus
	in: [ShipmentItemStatus]
}

input ShipmentOrder {
	asc: ShipmentOrderable
	desc: ShipmentOrderable
	then: ShipmentOrder
}

input ShipmentPatch {
	isActive: Boolean
	type: ShipmentType
	transportCompany: TransportCompany
	transportCompanyShipmentId: String
	transportCompanyProductCode: String
	reference: String
	items: [ShipmentItemRef]
	customerReference: String
	emailTrackingEnabled: Boolean
	from: AddressRef
	to: AddressRef
	order: OrderRef
	warehouse: EquipmentRef
	consignmentNumber: String
	properties: [PropertyRef]
	dateTimeReceivedUTC: DateTime
	dateTimeDeliveredUTC: DateTime
	dateTimePackedUTC: DateTime
	dateTimeCreatedUTC: DateTime
	delivered: DeliveryRef
	status: ShipmentStatus
}

input ShipmentRef {
	id: ID
	isActive: Boolean
	type: ShipmentType
	transportCompany: TransportCompany
	transportCompanyShipmentId: String
	transportCompanyProductCode: String
	reference: String
	items: [ShipmentItemRef]
	customerReference: String
	emailTrackingEnabled: Boolean
	from: AddressRef
	to: AddressRef
	order: OrderRef
	warehouse: EquipmentRef
	consignmentNumber: String
	properties: [PropertyRef]
	dateTimeReceivedUTC: DateTime
	dateTimeDeliveredUTC: DateTime
	dateTimePackedUTC: DateTime
	dateTimeCreatedUTC: DateTime
	delivered: DeliveryRef
	status: ShipmentStatus
}

input ShipmentStatus_hash {
	eq: ShipmentStatus
	in: [ShipmentStatus]
}

input ShipmentType_hash {
	eq: ShipmentType
	in: [ShipmentType]
}

input ShippingAccountFilter {
	id: [ID!]
	isActive: Boolean
	transportCompany: TransportCompany_hash
	has: [ShippingAccountHasFilter]
	and: [ShippingAccountFilter]
	or: [ShippingAccountFilter]
	not: ShippingAccountFilter
}

input ShippingAccountOrder {
	asc: ShippingAccountOrderable
	desc: ShippingAccountOrderable
	then: ShippingAccountOrder
}

input ShippingAccountPatch {
	isActive: Boolean
	partner: PartnerRef
	transportCompany: TransportCompany
	warehouse: EquipmentRef
	accountNumber: String
	username: String
	secret: String
}

input ShippingAccountRef {
	id: ID
	isActive: Boolean
	partner: PartnerRef
	transportCompany: TransportCompany
	warehouse: EquipmentRef
	accountNumber: String
	username: String
	secret: String
}

input StateEventRulesetFilter {
	id: [ID!]
	has: [StateEventRulesetHasFilter]
	and: [StateEventRulesetFilter]
	or: [StateEventRulesetFilter]
	not: StateEventRulesetFilter
}

input StateEventRulesetOrder {
	asc: StateEventRulesetOrderable
	desc: StateEventRulesetOrderable
	then: StateEventRulesetOrder
}

input StateEventRulesetPatch {
	name: String
	triggerWhen: [RulesetTriggerOption]
	segment: OperationsSegmentRef
	targetState: String
	eventDefs: [EventDefinitionRef]
}

input StateEventRulesetRef {
	id: ID
	name: String
	triggerWhen: [RulesetTriggerOption]
	segment: OperationsSegmentRef
	targetState: String
	eventDefs: [EventDefinitionRef]
}

input StockType_hash {
	eq: StockType
	in: [StockType]
}

input StringFullTextFilter_StringHashFilter {
	alloftext: String
	anyoftext: String
	eq: String
	in: [String]
}

input StringHashFilter_StringRegExpFilter {
	eq: String
	in: [String]
	regexp: String
}

input TestResultFilter {
	id: [ID!]
	isActive: Boolean
	has: [TestResultHasFilter]
	and: [TestResultFilter]
	or: [TestResultFilter]
	not: TestResultFilter
}

input TestResultOrder {
	asc: TestResultOrderable
	desc: TestResultOrderable
	then: TestResultOrder
}

input TestResultPatch {
	isActive: Boolean
	description: String
	result: String
	uom: UnitOfMeasureRef
	testDateTime: DateTime
}

input TestResultRef {
	id: ID
	isActive: Boolean
	description: String
	result: String
	uom: UnitOfMeasureRef
	testDateTime: DateTime
}

input TestSpecificationFilter {
	id: [ID!]
	isActive: Boolean
	has: [TestSpecificationHasFilter]
	and: [TestSpecificationFilter]
	or: [TestSpecificationFilter]
	not: TestSpecificationFilter
}

input TestSpecificationOrder {
	asc: TestSpecificationOrderable
	desc: TestSpecificationOrderable
	then: TestSpecificationOrder
}

input TestSpecificationPatch {
	isActive: Boolean
	description: String
	version: String
}

input TestSpecificationRef {
	id: ID
	isActive: Boolean
	description: String
	version: String
}

input TransitionEventRulesetFilter {
	id: [ID!]
	has: [TransitionEventRulesetHasFilter]
	and: [TransitionEventRulesetFilter]
	or: [TransitionEventRulesetFilter]
	not: TransitionEventRulesetFilter
}

input TransitionEventRulesetOrder {
	asc: TransitionEventRulesetOrderable
	desc: TransitionEventRulesetOrderable
	then: TransitionEventRulesetOrder
}

input TransitionEventRulesetPatch {
	name: String
	segmentDependency: SegmentDependencyRef
	eventDefs: [EventDefinitionRef]
}

input TransitionEventRulesetRef {
	id: ID
	name: String
	segmentDependency: SegmentDependencyRef
	eventDefs: [EventDefinitionRef]
}

input TransportCompany_hash {
	eq: TransportCompany
	in: [TransportCompany]
}

input UnitOfMeasureConversionFilter {
	id: [ID!]
	isActive: Boolean
	has: [UnitOfMeasureConversionHasFilter]
	and: [UnitOfMeasureConversionFilter]
	or: [UnitOfMeasureConversionFilter]
	not: UnitOfMeasureConversionFilter
}

input UnitOfMeasureConversionOrder {
	asc: UnitOfMeasureConversionOrderable
	desc: UnitOfMeasureConversionOrderable
	then: UnitOfMeasureConversionOrder
}

input UnitOfMeasureConversionPatch {
	isActive: Boolean
	fromUoM: UnitOfMeasureRef
	toUoM: UnitOfMeasureRef
	numerator: Float
	denominator: Float
	material: MaterialDefinitionRef
}

input UnitOfMeasureConversionRef {
	id: ID
	isActive: Boolean
	fromUoM: UnitOfMeasureRef
	toUoM: UnitOfMeasureRef
	numerator: Float
	denominator: Float
	material: MaterialDefinitionRef
}

input UnitOfMeasureFilter {
	id: [ID!]
	isActive: Boolean
	code: StringHashFilter
	has: [UnitOfMeasureHasFilter]
	and: [UnitOfMeasureFilter]
	or: [UnitOfMeasureFilter]
	not: UnitOfMeasureFilter
}

input UnitOfMeasureOrder {
	asc: UnitOfMeasureOrderable
	desc: UnitOfMeasureOrderable
	then: UnitOfMeasureOrder
}

input UnitOfMeasurePatch {
	isActive: Boolean
	dataType: DataType
}

input UnitOfMeasureRef {
	id: ID
	isActive: Boolean
	code: String
	dataType: DataType
}

input UpdateACLInput {
	filter: ACLFilter!
	set: ACLPatch
	remove: ACLPatch
}

input UpdateAccessRightInput {
	filter: AccessRightFilter!
	set: AccessRightPatch
	remove: AccessRightPatch
}

input UpdateAddressInput {
	filter: AddressFilter!
	set: AddressPatch
	remove: AddressPatch
}

input UpdateBillOfMaterialInput {
	filter: BillOfMaterialFilter!
	set: BillOfMaterialPatch
	remove: BillOfMaterialPatch
}

input UpdateBoxInput {
	filter: BoxFilter!
	set: BoxPatch
	remove: BoxPatch
}

input UpdateCarrierInput {
	filter: CarrierFilter!
	set: CarrierPatch
	remove: CarrierPatch
}

input UpdateDashboardConfigInput {
	filter: DashboardConfigFilter!
	set: DashboardConfigPatch
	remove: DashboardConfigPatch
}

input UpdateDashboardPanelConfigInput {
	filter: DashboardPanelConfigFilter!
	set: DashboardPanelConfigPatch
	remove: DashboardPanelConfigPatch
}

input UpdateDashboardWidgetConfigPropertyInput {
	filter: DashboardWidgetConfigPropertyFilter!
	set: DashboardWidgetConfigPropertyPatch
	remove: DashboardWidgetConfigPropertyPatch
}

input UpdateDeliveryInput {
	filter: DeliveryFilter!
	set: DeliveryPatch
	remove: DeliveryPatch
}

input UpdateEquipmentActualInput {
	filter: EquipmentActualFilter!
	set: EquipmentActualPatch
	remove: EquipmentActualPatch
}

input UpdateEquipmentClassInput {
	filter: EquipmentClassFilter!
	set: EquipmentClassPatch
	remove: EquipmentClassPatch
}

input UpdateEquipmentInput {
	filter: EquipmentFilter!
	set: EquipmentPatch
	remove: EquipmentPatch
}

input UpdateEquipmentNameAliasInput {
	filter: EquipmentNameAliasFilter!
	set: EquipmentNameAliasPatch
	remove: EquipmentNameAliasPatch
}

input UpdateEquipmentPropertyOverrideInput {
	filter: EquipmentPropertyOverrideFilter!
	set: EquipmentPropertyOverridePatch
	remove: EquipmentPropertyOverridePatch
}

input UpdateEquipmentReasonOverrideInput {
	filter: EquipmentReasonOverrideFilter!
	set: EquipmentReasonOverridePatch
	remove: EquipmentReasonOverridePatch
}

input UpdateEquipmentRelationInput {
	filter: EquipmentRelationFilter!
	set: EquipmentRelationPatch
	remove: EquipmentRelationPatch
}

input UpdateEquipmentSpecificationInput {
	filter: EquipmentSpecificationFilter!
	set: EquipmentSpecificationPatch
	remove: EquipmentSpecificationPatch
}

input UpdateEventDefinitionInput {
	filter: EventDefinitionFilter!
	set: EventDefinitionPatch
	remove: EventDefinitionPatch
}

input UpdateEventLogInput {
	filter: EventLogFilter!
	set: EventLogPatch
	remove: EventLogPatch
}

input UpdateFormInput {
	filter: FormFilter!
	set: FormPatch
	remove: FormPatch
}

input UpdateGeneralLedgerAccountInput {
	filter: GeneralLedgerAccountFilter!
	set: GeneralLedgerAccountPatch
	remove: GeneralLedgerAccountPatch
}

input UpdateInterfaceMessageLogInput {
	filter: InterfaceMessageLogFilter!
	set: InterfaceMessageLogPatch
	remove: InterfaceMessageLogPatch
}

input UpdateInventoryHandlingPolicyInput {
	filter: InventoryHandlingPolicyFilter!
	set: InventoryHandlingPolicyPatch
	remove: InventoryHandlingPolicyPatch
}

input UpdateInventoryHandlingRuleInput {
	filter: InventoryHandlingRuleFilter!
	set: InventoryHandlingRulePatch
	remove: InventoryHandlingRulePatch
}

input UpdateInventoryHoldingPolicyInput {
	filter: InventoryHoldingPolicyFilter!
	set: InventoryHoldingPolicyPatch
	remove: InventoryHoldingPolicyPatch
}

input UpdateJobOrderDependencyInput {
	filter: JobOrderDependencyFilter!
	set: JobOrderDependencyPatch
	remove: JobOrderDependencyPatch
}

input UpdateJobOrderDispatchStateModelInput {
	filter: JobOrderDispatchStateModelFilter!
	set: JobOrderDispatchStateModelPatch
	remove: JobOrderDispatchStateModelPatch
}

input UpdateJobOrderInput {
	filter: JobOrderFilter!
	set: JobOrderPatch
	remove: JobOrderPatch
}

input UpdateJobOrderNoteInput {
	filter: JobOrderNoteFilter!
	set: JobOrderNotePatch
	remove: JobOrderNotePatch
}

input UpdateJobResponseInput {
	filter: JobResponseFilter!
	set: JobResponsePatch
	remove: JobResponsePatch
}

input UpdateLibreServiceInput {
	filter: LibreServiceFilter!
	set: LibreServicePatch
	remove: LibreServicePatch
}

input UpdateMaterialActualInput {
	filter: MaterialActualFilter!
	set: MaterialActualPatch
	remove: MaterialActualPatch
}

input UpdateMaterialAlternateInput {
	filter: MaterialAlternateFilter!
	set: MaterialAlternatePatch
	remove: MaterialAlternatePatch
}

input UpdateMaterialClassInput {
	filter: MaterialClassFilter!
	set: MaterialClassPatch
	remove: MaterialClassPatch
}

input UpdateMaterialDefinitionInput {
	filter: MaterialDefinitionFilter!
	set: MaterialDefinitionPatch
	remove: MaterialDefinitionPatch
}

input UpdateMaterialEventRulesetInput {
	filter: MaterialEventRulesetFilter!
	set: MaterialEventRulesetPatch
	remove: MaterialEventRulesetPatch
}

input UpdateMaterialLotInput {
	filter: MaterialLotFilter!
	set: MaterialLotPatch
	remove: MaterialLotPatch
}

input UpdateMaterialSpecificationInput {
	filter: MaterialSpecificationFilter!
	set: MaterialSpecificationPatch
	remove: MaterialSpecificationPatch
}

input UpdateMaterialStateModelInput {
	filter: MaterialStateModelFilter!
	set: MaterialStateModelPatch
	remove: MaterialStateModelPatch
}

input UpdateMaterialStateTransitionInput {
	filter: MaterialStateTransitionFilter!
	set: MaterialStateTransitionPatch
	remove: MaterialStateTransitionPatch
}

input UpdateMaterialStatusInput {
	filter: MaterialStatusFilter!
	set: MaterialStatusPatch
	remove: MaterialStatusPatch
}

input UpdateMaterialSubLotInput {
	filter: MaterialSubLotFilter!
	set: MaterialSubLotPatch
	remove: MaterialSubLotPatch
}

input UpdateMaterialUnitInput {
	filter: MaterialUnitFilter!
	set: MaterialUnitPatch
	remove: MaterialUnitPatch
}

input UpdateMenuInput {
	filter: MenuFilter!
	set: MenuPatch
	remove: MenuPatch
}

input UpdateOperationsDefinitionInput {
	filter: OperationsDefinitionFilter!
	set: OperationsDefinitionPatch
	remove: OperationsDefinitionPatch
}

input UpdateOperationsRequestInput {
	filter: OperationsRequestFilter!
	set: OperationsRequestPatch
	remove: OperationsRequestPatch
}

input UpdateOperationsSegmentInput {
	filter: OperationsSegmentFilter!
	set: OperationsSegmentPatch
	remove: OperationsSegmentPatch
}

input UpdateOrderInput {
	filter: OrderFilter!
	set: OrderPatch
	remove: OrderPatch
}

input UpdateOrderLineInput {
	filter: OrderLineFilter!
	set: OrderLinePatch
	remove: OrderLinePatch
}

input UpdateOrderStartRulesetInput {
	filter: OrderStartRulesetFilter!
	set: OrderStartRulesetPatch
	remove: OrderStartRulesetPatch
}

input UpdateParameterSpecificationInput {
	filter: ParameterSpecificationFilter!
	set: ParameterSpecificationPatch
	remove: ParameterSpecificationPatch
}

input UpdatePartnerInput {
	filter: PartnerFilter!
	set: PartnerPatch
	remove: PartnerPatch
}

input UpdatePayloadFieldDefinitionInput {
	filter: PayloadFieldDefinitionFilter!
	set: PayloadFieldDefinitionPatch
	remove: PayloadFieldDefinitionPatch
}

input UpdatePersonInput {
	filter: PersonFilter!
	set: PersonPatch
	remove: PersonPatch
}

input UpdatePersonnelActualInput {
	filter: PersonnelActualFilter!
	set: PersonnelActualPatch
	remove: PersonnelActualPatch
}

input UpdatePersonnelClassInput {
	filter: PersonnelClassFilter!
	set: PersonnelClassPatch
	remove: PersonnelClassPatch
}

input UpdatePersonnelSpecificationInput {
	filter: PersonnelSpecificationFilter!
	set: PersonnelSpecificationPatch
	remove: PersonnelSpecificationPatch
}

input UpdatePropertyInput {
	filter: PropertyFilter!
	set: PropertyPatch
	remove: PropertyPatch
}

input UpdatePropertyNameAliasInput {
	filter: PropertyNameAliasFilter!
	set: PropertyNameAliasPatch
	remove: PropertyNameAliasPatch
}

input UpdatePropertyValueAliasInput {
	filter: PropertyValueAliasFilter!
	set: PropertyValueAliasPatch
	remove: PropertyValueAliasPatch
}

input UpdateQuantityLogInput {
	filter: QuantityLogFilter!
	set: QuantityLogPatch
	remove: QuantityLogPatch
}

input UpdateReasonCategoryInput {
	filter: ReasonCategoryFilter!
	set: ReasonCategoryPatch
	remove: ReasonCategoryPatch
}

input UpdateReasonInput {
	filter: ReasonFilter!
	set: ReasonPatch
	remove: ReasonPatch
}

input UpdateRequestStateInput {
	filter: RequestStateFilter!
	set: RequestStatePatch
	remove: RequestStatePatch
}

input UpdateRoleInput {
	filter: RoleFilter!
	set: RolePatch
	remove: RolePatch
}

input UpdateSegmentDependencyInput {
	filter: SegmentDependencyFilter!
	set: SegmentDependencyPatch
	remove: SegmentDependencyPatch
}

input UpdateSegmentInvoiceSettingInput {
	filter: SegmentInvoiceSettingFilter!
	set: SegmentInvoiceSettingPatch
	remove: SegmentInvoiceSettingPatch
}

input UpdateShipmentInput {
	filter: ShipmentFilter!
	set: ShipmentPatch
	remove: ShipmentPatch
}

input UpdateShipmentItemInput {
	filter: ShipmentItemFilter!
	set: ShipmentItemPatch
	remove: ShipmentItemPatch
}

input UpdateShippingAccountInput {
	filter: ShippingAccountFilter!
	set: ShippingAccountPatch
	remove: ShippingAccountPatch
}

input UpdateStateEventRulesetInput {
	filter: StateEventRulesetFilter!
	set: StateEventRulesetPatch
	remove: StateEventRulesetPatch
}

input UpdateTestResultInput {
	filter: TestResultFilter!
	set: TestResultPatch
	remove: TestResultPatch
}

input UpdateTestSpecificationInput {
	filter: TestSpecificationFilter!
	set: TestSpecificationPatch
	remove: TestSpecificationPatch
}

input UpdateTransitionEventRulesetInput {
	filter: TransitionEventRulesetFilter!
	set: TransitionEventRulesetPatch
	remove: TransitionEventRulesetPatch
}

input UpdateUnitOfMeasureConversionInput {
	filter: UnitOfMeasureConversionFilter!
	set: UnitOfMeasureConversionPatch
	remove: UnitOfMeasureConversionPatch
}

input UpdateUnitOfMeasureInput {
	filter: UnitOfMeasureFilter!
	set: UnitOfMeasurePatch
	remove: UnitOfMeasurePatch
}

input UpdateUserInput {
	filter: UserFilter!
	set: UserPatch
	remove: UserPatch
}

input UpdateUserRoleInput {
	filter: UserRoleFilter!
	set: UserRolePatch
	remove: UserRolePatch
}

input UpdateWorkCalendarDefinitionEntryInput {
	filter: WorkCalendarDefinitionEntryFilter!
	set: WorkCalendarDefinitionEntryPatch
	remove: WorkCalendarDefinitionEntryPatch
}

input UpdateWorkCalendarEntryInput {
	filter: WorkCalendarEntryFilter!
	set: WorkCalendarEntryPatch
	remove: WorkCalendarEntryPatch
}

input UpdateWorkCalendarInput {
	filter: WorkCalendarFilter!
	set: WorkCalendarPatch
	remove: WorkCalendarPatch
}

input UpdateWorkflowConnectionInput {
	filter: WorkflowConnectionFilter!
	set: WorkflowConnectionPatch
	remove: WorkflowConnectionPatch
}

input UpdateWorkflowConnectionTypeInput {
	filter: WorkflowConnectionTypeFilter!
	set: WorkflowConnectionTypePatch
	remove: WorkflowConnectionTypePatch
}

input UpdateWorkflowInstanceInput {
	filter: WorkflowInstanceFilter!
	set: WorkflowInstancePatch
	remove: WorkflowInstancePatch
}

input UpdateWorkflowInstancePropertyInput {
	filter: WorkflowInstancePropertyFilter!
	set: WorkflowInstancePropertyPatch
	remove: WorkflowInstancePropertyPatch
}

input UpdateWorkflowNodeEventInput {
	filter: WorkflowNodeEventFilter!
	set: WorkflowNodeEventPatch
	remove: WorkflowNodeEventPatch
}

input UpdateWorkflowNodeInput {
	filter: WorkflowNodeFilter!
	set: WorkflowNodePatch
	remove: WorkflowNodePatch
}

input UpdateWorkflowNodeInstanceInput {
	filter: WorkflowNodeInstanceFilter!
	set: WorkflowNodeInstancePatch
	remove: WorkflowNodeInstancePatch
}

input UpdateWorkflowNodeTypeInput {
	filter: WorkflowNodeTypeFilter!
	set: WorkflowNodeTypePatch
	remove: WorkflowNodeTypePatch
}

input UpdateWorkflowPropertyInput {
	filter: WorkflowPropertyFilter!
	set: WorkflowPropertyPatch
	remove: WorkflowPropertyPatch
}

input UpdateWorkflowPropertyInstanceInput {
	filter: WorkflowPropertyInstanceFilter!
	set: WorkflowPropertyInstancePatch
	remove: WorkflowPropertyInstancePatch
}

input UpdateWorkflowPropertyValueInput {
	filter: WorkflowPropertyValueFilter!
	set: WorkflowPropertyValuePatch
	remove: WorkflowPropertyValuePatch
}

input UpdateWorkflowSpecificationInput {
	filter: WorkflowSpecificationFilter!
	set: WorkflowSpecificationPatch
	remove: WorkflowSpecificationPatch
}

input UserFilter {
	id: [ID!]
	username: StringHashFilter
	isType: UserType_hash
	has: [UserHasFilter]
	and: [UserFilter]
	or: [UserFilter]
	not: UserFilter
}

input UserOrder {
	asc: UserOrderable
	desc: UserOrderable
	then: UserOrder
}

input UserPatch {
	name: String
	isType: UserType
	hasRole: [UserRoleRef]
	tasks: [WorkflowNodeInstanceRef]
	isActive: Boolean
}

input UserRef {
	id: ID
	username: String
	name: String
	isType: UserType
	hasRole: [UserRoleRef]
	tasks: [WorkflowNodeInstanceRef]
	isActive: Boolean
}

input UserRoleFilter {
	id: [ID!]
	has: [UserRoleHasFilter]
	and: [UserRoleFilter]
	or: [UserRoleFilter]
	not: UserRoleFilter
}

input UserRolePatch {
	role: RoleRef
	user: UserRef
	responsibilities: [EquipmentRef]
	isActive: Boolean
}

input UserRoleRef {
	id: ID
	role: RoleRef
	user: UserRef
	responsibilities: [EquipmentRef]
	isActive: Boolean
}

input UserType_hash {
	eq: UserType
	in: [UserType]
}

input WorkCalendarDefinitionEntryFilter {
	id: [ID!]
	isActive: Boolean
	has: [WorkCalendarDefinitionEntryHasFilter]
	and: [WorkCalendarDefinitionEntryFilter]
	or: [WorkCalendarDefinitionEntryFilter]
	not: WorkCalendarDefinitionEntryFilter
}

input WorkCalendarDefinitionEntryOrder {
	asc: WorkCalendarDefinitionEntryOrderable
	desc: WorkCalendarDefinitionEntryOrderable
	then: WorkCalendarDefinitionEntryOrder
}

input WorkCalendarDefinitionEntryPatch {
	isActive: Boolean
	description: String
	hierarchyScope: EquipmentRef
	freq: Frequency
	startDateTime: DateTime
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType
	properties: [PropertyRef]
	calendarEntries: [WorkCalendarEntryRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarDefinitionEntryRef {
	id: ID
	isActive: Boolean
	description: String
	hierarchyScope: EquipmentRef
	freq: Frequency
	startDateTime: DateTime
	endDateTime: DateTime
	count: Int
	interval: Int
	wkst: Weekday
	byWeekDay: [Weekday]
	byMonth: [Int]
	bySetPos: [Int]
	byMonthDay: [Int]
	byYearDay: [Int]
	byWeekNo: [Int]
	byHour: [Int]
	byMinute: [Int]
	bySecond: [Int]
	duration: String
	entryType: WorkCalendarEntryType
	properties: [PropertyRef]
	calendarEntries: [WorkCalendarEntryRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarEntryFilter {
	id: [ID!]
	isActive: Boolean
	startDateTime: DateTimeFilter
	finishDateTime: DateTimeFilter
	entryType: WorkCalendarEntryType_hash
	has: [WorkCalendarEntryHasFilter]
	and: [WorkCalendarEntryFilter]
	or: [WorkCalendarEntryFilter]
	not: WorkCalendarEntryFilter
}

input WorkCalendarEntryOrder {
	asc: WorkCalendarEntryOrderable
	desc: WorkCalendarEntryOrderable
	then: WorkCalendarEntryOrder
}

input WorkCalendarEntryPatch {
	isActive: Boolean
	description: String
	definition: WorkCalendarDefinitionEntryRef
	hierarchyScope: EquipmentRef
	startDateTime: DateTime
	finishDateTime: DateTime
	entryType: WorkCalendarEntryType
	properties: [PropertyRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarEntryRef {
	id: ID
	isActive: Boolean
	description: String
	definition: WorkCalendarDefinitionEntryRef
	hierarchyScope: EquipmentRef
	startDateTime: DateTime
	finishDateTime: DateTime
	entryType: WorkCalendarEntryType
	properties: [PropertyRef]
	workCalendar: WorkCalendarRef
}

input WorkCalendarEntryType_hash {
	eq: WorkCalendarEntryType
	in: [WorkCalendarEntryType]
}

input WorkCalendarFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [WorkCalendarHasFilter]
	and: [WorkCalendarFilter]
	or: [WorkCalendarFilter]
	not: WorkCalendarFilter
}

input WorkCalendarOrder {
	asc: WorkCalendarOrderable
	desc: WorkCalendarOrderable
	then: WorkCalendarOrder
}

input WorkCalendarPatch {
	isActive: Boolean
	description: String
	definition: [WorkCalendarDefinitionEntryRef]
	entries: [WorkCalendarEntryRef]
	equipment: [EquipmentRef]
}

input WorkCalendarRef {
	id: ID
	isActive: Boolean
	name: String
	description: String
	definition: [WorkCalendarDefinitionEntryRef]
	entries: [WorkCalendarEntryRef]
	equipment: [EquipmentRef]
}

input WorkType_hash {
	eq: WorkType
	in: [WorkType]
}

input WorkflowConnectionFilter {
	id: [ID!]
	isActive: Boolean
	has: [WorkflowConnectionHasFilter]
	and: [WorkflowConnectionFilter]
	or: [WorkflowConnectionFilter]
	not: WorkflowConnectionFilter
}

input WorkflowConnectionOrder {
	asc: WorkflowConnectionOrderable
	desc: WorkflowConnectionOrderable
	then: WorkflowConnectionOrder
}

input WorkflowConnectionPatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	connectionType: WorkflowConnectionTypeRef
	workflowSpecification: WorkflowSpecificationRef
	from: WorkflowNodeRef
	to: WorkflowNodeRef
	condition: String
	properties: [WorkflowPropertyRef]
}

input WorkflowConnectionRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	connectionType: WorkflowConnectionTypeRef
	workflowSpecification: WorkflowSpecificationRef
	from: WorkflowNodeRef
	to: WorkflowNodeRef
	condition: String
	properties: [WorkflowPropertyRef]
}

input WorkflowConnectionTypeFilter {
	id: [ID!]
	isActive: Boolean
	has: [WorkflowConnectionTypeHasFilter]
	and: [WorkflowConnectionTypeFilter]
	or: [WorkflowConnectionTypeFilter]
	not: WorkflowConnectionTypeFilter
}

input WorkflowConnectionTypeOrder {
	asc: WorkflowConnectionTypeOrderable
	desc: WorkflowConnectionTypeOrderable
	then: WorkflowConnectionTypeOrder
}

input WorkflowConnectionTypePatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	connections: [WorkflowConnectionRef]
	properties: [WorkflowPropertyRef]
}

input WorkflowConnectionTypeRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	connections: [WorkflowConnectionRef]
	properties: [WorkflowPropertyRef]
}

input WorkflowInstanceFilter {
	id: [ID!]
	createdDateTime: DateTimeFilter
	status: WorkflowNodeStatus_hash
	has: [WorkflowInstanceHasFilter]
	and: [WorkflowInstanceFilter]
	or: [WorkflowInstanceFilter]
	not: WorkflowInstanceFilter
}

input WorkflowInstanceOrder {
	asc: WorkflowInstanceOrderable
	desc: WorkflowInstanceOrderable
	then: WorkflowInstanceOrder
}

input WorkflowInstancePatch {
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	status: WorkflowNodeStatus
	workflowSpecification: WorkflowSpecificationRef
	equipment: EquipmentRef
	parent: WorkflowInstanceRef
	children: [WorkflowInstanceRef]
	nodeInstances: [WorkflowNodeInstanceRef]
	propertyInstances: [WorkflowPropertyInstanceRef]
	properties: [WorkflowInstancePropertyRef]
	orderLines: [OrderLineRef]
}

input WorkflowInstancePropertyFilter {
	id: [ID!]
	key: StringHashFilter
	has: [WorkflowInstancePropertyHasFilter]
	and: [WorkflowInstancePropertyFilter]
	or: [WorkflowInstancePropertyFilter]
	not: WorkflowInstancePropertyFilter
}

input WorkflowInstancePropertyOrder {
	asc: WorkflowInstancePropertyOrderable
	desc: WorkflowInstancePropertyOrderable
	then: WorkflowInstancePropertyOrder
}

input WorkflowInstancePropertyPatch {
	workflowInstance: WorkflowInstanceRef
	name: String
	values: [WorkflowPropertyValueRef]
}

input WorkflowInstancePropertyRef {
	id: ID
	key: String
	workflowInstance: WorkflowInstanceRef
	name: String
	values: [WorkflowPropertyValueRef]
}

input WorkflowInstanceRef {
	id: ID
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	status: WorkflowNodeStatus
	workflowSpecification: WorkflowSpecificationRef
	equipment: EquipmentRef
	parent: WorkflowInstanceRef
	children: [WorkflowInstanceRef]
	nodeInstances: [WorkflowNodeInstanceRef]
	propertyInstances: [WorkflowPropertyInstanceRef]
	properties: [WorkflowInstancePropertyRef]
	orderLines: [OrderLineRef]
}

input WorkflowNodeEventFilter {
	id: [ID!]
	isActive: Boolean
	createdDateTime: DateTimeFilter
	status: WorkflowNodeStatus_hash
	isProcessed: Boolean
	has: [WorkflowNodeEventHasFilter]
	and: [WorkflowNodeEventFilter]
	or: [WorkflowNodeEventFilter]
	not: WorkflowNodeEventFilter
}

input WorkflowNodeEventOrder {
	asc: WorkflowNodeEventOrderable
	desc: WorkflowNodeEventOrderable
	then: WorkflowNodeEventOrder
}

input WorkflowNodeEventPatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	nodeInstance: WorkflowNodeInstanceRef
	previous: WorkflowNodeEventRef
	next: WorkflowNodeEventRef
	status: WorkflowNodeStatus
	isProcessed: Boolean
	value: String
}

input WorkflowNodeEventRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	nodeInstance: WorkflowNodeInstanceRef
	previous: WorkflowNodeEventRef
	next: WorkflowNodeEventRef
	status: WorkflowNodeStatus
	isProcessed: Boolean
	value: String
}

input WorkflowNodeFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [WorkflowNodeHasFilter]
	and: [WorkflowNodeFilter]
	or: [WorkflowNodeFilter]
	not: WorkflowNodeFilter
}

input WorkflowNodeInstanceFilter {
	id: [ID!]
	isActive: Boolean
	createdDateTime: DateTimeFilter
	status: WorkflowNodeStatus_hash
	has: [WorkflowNodeInstanceHasFilter]
	and: [WorkflowNodeInstanceFilter]
	or: [WorkflowNodeInstanceFilter]
	not: WorkflowNodeInstanceFilter
}

input WorkflowNodeInstanceOrder {
	asc: WorkflowNodeInstanceOrderable
	desc: WorkflowNodeInstanceOrderable
	then: WorkflowNodeInstanceOrder
}

input WorkflowNodeInstancePatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	status: WorkflowNodeStatus
	assignedUser: UserRef
	workflowInstance: WorkflowInstanceRef
	node: WorkflowNodeRef
	events: [WorkflowNodeEventRef]
}

input WorkflowNodeInstanceRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	status: WorkflowNodeStatus
	assignedUser: UserRef
	workflowInstance: WorkflowInstanceRef
	node: WorkflowNodeRef
	events: [WorkflowNodeEventRef]
}

input WorkflowNodeOrder {
	asc: WorkflowNodeOrderable
	desc: WorkflowNodeOrderable
	then: WorkflowNodeOrder
}

input WorkflowNodePatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	uiComponent: String
	form: FormRef
	role: RoleRef
	nodeType: WorkflowNodeTypeRef
	inflows: [WorkflowConnectionRef]
	outflows: [WorkflowConnectionRef]
	workflowSpecification: WorkflowSpecificationRef
	properties: [WorkflowPropertyRef]
	nodeInstances: [WorkflowNodeInstanceRef]
	positionX: Int
	positionY: Int
	width: Int
	height: Int
}

input WorkflowNodeRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	uiComponent: String
	form: FormRef
	role: RoleRef
	nodeType: WorkflowNodeTypeRef
	inflows: [WorkflowConnectionRef]
	outflows: [WorkflowConnectionRef]
	workflowSpecification: WorkflowSpecificationRef
	properties: [WorkflowPropertyRef]
	nodeInstances: [WorkflowNodeInstanceRef]
	positionX: Int
	positionY: Int
	width: Int
	height: Int
}

input WorkflowNodeStatus_hash {
	eq: WorkflowNodeStatus
	in: [WorkflowNodeStatus]
}

input WorkflowNodeTypeFilter {
	id: [ID!]
	isActive: Boolean
	has: [WorkflowNodeTypeHasFilter]
	and: [WorkflowNodeTypeFilter]
	or: [WorkflowNodeTypeFilter]
	not: WorkflowNodeTypeFilter
}

input WorkflowNodeTypeOrder {
	asc: WorkflowNodeTypeOrderable
	desc: WorkflowNodeTypeOrderable
	then: WorkflowNodeTypeOrder
}

input WorkflowNodeTypePatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	nodeClass: WorkflowNodeClass
	nodes: [WorkflowNodeRef]
	properties: [WorkflowPropertyRef]
}

input WorkflowNodeTypeRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	nodeClass: WorkflowNodeClass
	nodes: [WorkflowNodeRef]
	properties: [WorkflowPropertyRef]
}

input WorkflowPropertyFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	description: StringHashFilter
	has: [WorkflowPropertyHasFilter]
	and: [WorkflowPropertyFilter]
	or: [WorkflowPropertyFilter]
	not: WorkflowPropertyFilter
}

input WorkflowPropertyInstanceFilter {
	id: [ID!]
	isActive: Boolean
	has: [WorkflowPropertyInstanceHasFilter]
	and: [WorkflowPropertyInstanceFilter]
	or: [WorkflowPropertyInstanceFilter]
	not: WorkflowPropertyInstanceFilter
}

input WorkflowPropertyInstanceOrder {
	asc: WorkflowPropertyInstanceOrderable
	desc: WorkflowPropertyInstanceOrderable
	then: WorkflowPropertyInstanceOrder
}

input WorkflowPropertyInstancePatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	workflowInstance: WorkflowInstanceRef
	workflowProperty: WorkflowPropertyRef
	values: [WorkflowPropertyValueRef]
}

input WorkflowPropertyInstanceRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	workflowInstance: WorkflowInstanceRef
	workflowProperty: WorkflowPropertyRef
	values: [WorkflowPropertyValueRef]
}

input WorkflowPropertyOrder {
	asc: WorkflowPropertyOrderable
	desc: WorkflowPropertyOrderable
	then: WorkflowPropertyOrder
}

input WorkflowPropertyPatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	propertyType: WorkflowPropertyType
	name: String
	description: String
	definedBy: WorkflowPropertyRef
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	value: String
	nodeType: WorkflowNodeTypeRef
	node: WorkflowNodeRef
	connectionType: WorkflowConnectionTypeRef
	connection: WorkflowConnectionRef
	instances: [WorkflowPropertyInstanceRef]
}

input WorkflowPropertyRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	propertyType: WorkflowPropertyType
	name: String
	description: String
	definedBy: WorkflowPropertyRef
	dataType: DataType
	unitOfMeasure: UnitOfMeasureRef
	value: String
	nodeType: WorkflowNodeTypeRef
	node: WorkflowNodeRef
	connectionType: WorkflowConnectionTypeRef
	connection: WorkflowConnectionRef
	instances: [WorkflowPropertyInstanceRef]
}

input WorkflowPropertyValueFilter {
	id: [ID!]
	has: [WorkflowPropertyValueHasFilter]
	and: [WorkflowPropertyValueFilter]
	or: [WorkflowPropertyValueFilter]
	not: WorkflowPropertyValueFilter
}

input WorkflowPropertyValueOrder {
	asc: WorkflowPropertyValueOrderable
	desc: WorkflowPropertyValueOrderable
	then: WorkflowPropertyValueOrder
}

input WorkflowPropertyValuePatch {
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	propertyInstance: WorkflowPropertyInstanceRef
	value: String
	previous: WorkflowPropertyValueRef
	next: WorkflowPropertyValueRef
}

input WorkflowPropertyValueRef {
	id: ID
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	propertyInstance: WorkflowPropertyInstanceRef
	value: String
	previous: WorkflowPropertyValueRef
	next: WorkflowPropertyValueRef
}

input WorkflowSpecificationFilter {
	id: [ID!]
	isActive: Boolean
	name: StringHashFilter
	has: [WorkflowSpecificationHasFilter]
	and: [WorkflowSpecificationFilter]
	or: [WorkflowSpecificationFilter]
	not: WorkflowSpecificationFilter
}

input WorkflowSpecificationOrder {
	asc: WorkflowSpecificationOrderable
	desc: WorkflowSpecificationOrderable
	then: WorkflowSpecificationOrder
}

input WorkflowSpecificationPatch {
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	nodes: [WorkflowNodeRef]
	connections: [WorkflowConnectionRef]
	instances: [WorkflowInstanceRef]
}

input WorkflowSpecificationRef {
	id: ID
	access: [ACLRef]
	isActive: Boolean
	createdDateTime: DateTime
	createdBy: UserRef
	modifiedDateTime: DateTime
	modifiedBy: UserRef
	name: String
	description: String
	nodes: [WorkflowNodeRef]
	connections: [WorkflowConnectionRef]
	instances: [WorkflowInstanceRef]
}

#######################
# Generated Query
#######################

type Query {
	_entities(representations: [_Any!]!): [_Entity]!
	_service: _Service!
	getUser(id: ID, username: String): User
	queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	aggregateUser(filter: UserFilter): UserAggregateResult
	getUserRole(id: ID!): UserRole
	queryUserRole(filter: UserRoleFilter, first: Int, offset: Int): [UserRole]
	aggregateUserRole(filter: UserRoleFilter): UserRoleAggregateResult
	getRole(name: String!): Role
	queryRole(filter: RoleFilter, order: RoleOrder, first: Int, offset: Int): [Role]
	aggregateRole(filter: RoleFilter): RoleAggregateResult
	getAccessRight(id: ID!): AccessRight
	queryAccessRight(filter: AccessRightFilter, first: Int, offset: Int): [AccessRight]
	aggregateAccessRight(filter: AccessRightFilter): AccessRightAggregateResult
	getACL(id: ID!): ACL
	queryACL(filter: ACLFilter, first: Int, offset: Int): [ACL]
	aggregateACL(filter: ACLFilter): ACLAggregateResult
	getLibreService(id: ID, name: String): LibreService
	queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult
	getMenu(id: ID!): Menu
	queryMenu(filter: MenuFilter, order: MenuOrder, first: Int, offset: Int): [Menu]
	aggregateMenu(filter: MenuFilter): MenuAggregateResult
	getOperationsRequest(id: ID, code: String): OperationsRequest
	queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	getRequestState(id: ID, name: String): RequestState
	queryRequestState(filter: RequestStateFilter, order: RequestStateOrder, first: Int, offset: Int): [RequestState]
	aggregateRequestState(filter: RequestStateFilter): RequestStateAggregateResult
	getOperationsDefinition(id: ID, name: String): OperationsDefinition
	queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	getBillOfMaterial(id: ID, name: String): BillOfMaterial
	queryBillOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
	aggregateBillOfMaterial(filter: BillOfMaterialFilter): BillOfMaterialAggregateResult
	getOperationsSegment(id: ID!): OperationsSegment
	queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	getTransitionEventRuleset(id: ID!): TransitionEventRuleset
	queryTransitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
	aggregateTransitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRulesetAggregateResult
	getStateEventRuleset(id: ID!): StateEventRuleset
	queryStateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
	aggregateStateEventRuleset(filter: StateEventRulesetFilter): StateEventRulesetAggregateResult
	getMaterialEventRuleset(id: ID!): MaterialEventRuleset
	queryMaterialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
	aggregateMaterialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRulesetAggregateResult
	getOrderStartRuleset(id: ID!): OrderStartRuleset
	queryOrderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
	aggregateOrderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRulesetAggregateResult
	getSegmentInvoiceSetting(id: ID!): SegmentInvoiceSetting
	querySegmentInvoiceSetting(filter: SegmentInvoiceSettingFilter, order: SegmentInvoiceSettingOrder, first: Int, offset: Int): [SegmentInvoiceSetting]
	aggregateSegmentInvoiceSetting(filter: SegmentInvoiceSettingFilter): SegmentInvoiceSettingAggregateResult
	getSegmentDependency(id: ID!): SegmentDependency
	querySegmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
	aggregateSegmentDependency(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult
	getJobOrder(id: ID, name: String): JobOrder
	queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult
	getJobOrderDependency(id: ID!): JobOrderDependency
	queryJobOrderDependency(filter: JobOrderDependencyFilter, order: JobOrderDependencyOrder, first: Int, offset: Int): [JobOrderDependency]
	aggregateJobOrderDependency(filter: JobOrderDependencyFilter): JobOrderDependencyAggregateResult
	queryJobOrderDispatchStateModel(filter: JobOrderDispatchStateModelFilter, first: Int, offset: Int): [JobOrderDispatchStateModel]
	aggregateJobOrderDispatchStateModel(filter: JobOrderDispatchStateModelFilter): JobOrderDispatchStateModelAggregateResult
	getJobOrderNote(id: ID!): JobOrderNote
	queryJobOrderNote(filter: JobOrderNoteFilter, order: JobOrderNoteOrder, first: Int, offset: Int): [JobOrderNote]
	aggregateJobOrderNote(filter: JobOrderNoteFilter): JobOrderNoteAggregateResult
	getJobResponse(id: ID!): JobResponse
	queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult
	getPersonnelActual(id: ID!): PersonnelActual
	queryPersonnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	aggregatePersonnelActual(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	getEquipmentActual(id: ID!): EquipmentActual
	queryEquipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	aggregateEquipmentActual(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	getMaterialActual(id: ID!): MaterialActual
	queryMaterialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	aggregateMaterialActual(filter: MaterialActualFilter): MaterialActualAggregateResult
	getEventLog(id: ID!): EventLog
	queryEventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
	aggregateEventLog(filter: EventLogFilter): EventLogAggregateResult
	getQuantityLog(id: ID!): QuantityLog
	queryQuantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
	aggregateQuantityLog(filter: QuantityLogFilter): QuantityLogAggregateResult
	getEquipmentSpecification(id: ID!): EquipmentSpecification
	queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	getMaterialSpecification(id: ID!): MaterialSpecification
	queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	getPersonnelSpecification(id: ID!): PersonnelSpecification
	queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	getParameterSpecification(id: ID!): ParameterSpecification
	queryParameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	aggregateParameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	getDashboardConfig(id: ID, name: String): DashboardConfig
	queryDashboardConfig(filter: DashboardConfigFilter, order: DashboardConfigOrder, first: Int, offset: Int): [DashboardConfig]
	aggregateDashboardConfig(filter: DashboardConfigFilter): DashboardConfigAggregateResult
	getDashboardPanelConfig(id: ID!): DashboardPanelConfig
	queryDashboardPanelConfig(filter: DashboardPanelConfigFilter, order: DashboardPanelConfigOrder, first: Int, offset: Int): [DashboardPanelConfig]
	aggregateDashboardPanelConfig(filter: DashboardPanelConfigFilter): DashboardPanelConfigAggregateResult
	getDashboardWidgetConfigProperty(id: ID!): DashboardWidgetConfigProperty
	queryDashboardWidgetConfigProperty(filter: DashboardWidgetConfigPropertyFilter, order: DashboardWidgetConfigPropertyOrder, first: Int, offset: Int): [DashboardWidgetConfigProperty]
	aggregateDashboardWidgetConfigProperty(filter: DashboardWidgetConfigPropertyFilter): DashboardWidgetConfigPropertyAggregateResult
	getEquipment(id: ID!): Equipment
	queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult
	getEquipmentRelation(id: ID!): EquipmentRelation
	queryEquipmentRelation(filter: EquipmentRelationFilter, first: Int, offset: Int): [EquipmentRelation]
	aggregateEquipmentRelation(filter: EquipmentRelationFilter): EquipmentRelationAggregateResult
	getEquipmentNameAlias(id: ID!): EquipmentNameAlias
	queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult
	getPropertyNameAlias(id: ID!): PropertyNameAlias
	queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	getPropertyValueAlias(id: ID!): PropertyValueAlias
	queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult
	getEquipmentReasonOverride(id: ID!): EquipmentReasonOverride
	queryEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
	aggregateEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult
	getEquipmentClass(id: ID!): EquipmentClass
	queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	getProperty(id: ID!): Property
	queryProperty(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	aggregateProperty(filter: PropertyFilter): PropertyAggregateResult
	getEquipmentPropertyOverride(id: ID!): EquipmentPropertyOverride
	queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	getEventDefinition(id: ID!): EventDefinition
	queryEventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
	aggregateEventDefinition(filter: EventDefinitionFilter): EventDefinitionAggregateResult
	getPayloadFieldDefinition(id: ID!): PayloadFieldDefinition
	queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult
	getReason(id: ID!): Reason
	queryReason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
	aggregateReason(filter: ReasonFilter): ReasonAggregateResult
	getReasonCategory(id: ID, code: String): ReasonCategory
	queryReasonCategory(filter: ReasonCategoryFilter, order: ReasonCategoryOrder, first: Int, offset: Int): [ReasonCategory]
	aggregateReasonCategory(filter: ReasonCategoryFilter): ReasonCategoryAggregateResult
	getMaterialClass(id: ID, code: String): MaterialClass
	queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult
	getMaterialDefinition(id: ID, code: String): MaterialDefinition
	queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
	getMaterialAlternate(id: ID!): MaterialAlternate
	queryMaterialAlternate(filter: MaterialAlternateFilter, order: MaterialAlternateOrder, first: Int, offset: Int): [MaterialAlternate]
	aggregateMaterialAlternate(filter: MaterialAlternateFilter): MaterialAlternateAggregateResult
	getCarrier(id: ID, code: String): Carrier
	queryCarrier(filter: CarrierFilter, order: CarrierOrder, first: Int, offset: Int): [Carrier]
	aggregateCarrier(filter: CarrierFilter): CarrierAggregateResult
	getMaterialLot(id: ID, code: String): MaterialLot
	queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult
	getMaterialSubLot(id: ID, code: String): MaterialSubLot
	queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	getMaterialUnit(id: ID, serialNumber: String): MaterialUnit
	queryMaterialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
	aggregateMaterialUnit(filter: MaterialUnitFilter): MaterialUnitAggregateResult
	getInventoryHoldingPolicy(id: ID!): InventoryHoldingPolicy
	queryInventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter, order: InventoryHoldingPolicyOrder, first: Int, offset: Int): [InventoryHoldingPolicy]
	aggregateInventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter): InventoryHoldingPolicyAggregateResult
	getUnitOfMeasure(id: ID, code: String): UnitOfMeasure
	queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult
	getUnitOfMeasureConversion(id: ID!): UnitOfMeasureConversion
	queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult
	getMaterialStatus(id: ID, code: String): MaterialStatus
	queryMaterialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	aggregateMaterialStatus(filter: MaterialStatusFilter): MaterialStatusAggregateResult
	getMaterialStateModel(id: ID, name: String): MaterialStateModel
	queryMaterialStateModel(filter: MaterialStateModelFilter, order: MaterialStateModelOrder, first: Int, offset: Int): [MaterialStateModel]
	aggregateMaterialStateModel(filter: MaterialStateModelFilter): MaterialStateModelAggregateResult
	getMaterialStateTransition(id: ID!): MaterialStateTransition
	queryMaterialStateTransition(filter: MaterialStateTransitionFilter, first: Int, offset: Int): [MaterialStateTransition]
	aggregateMaterialStateTransition(filter: MaterialStateTransitionFilter): MaterialStateTransitionAggregateResult
	getPersonnelClass(id: ID, name: String): PersonnelClass
	queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	getPerson(id: ID, name: String): Person
	queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	aggregatePerson(filter: PersonFilter): PersonAggregateResult
	getTestSpecification(id: ID!): TestSpecification
	queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	getTestResult(id: ID!): TestResult
	queryTestResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	aggregateTestResult(filter: TestResultFilter): TestResultAggregateResult
	getWorkCalendarDefinitionEntry(id: ID!): WorkCalendarDefinitionEntry
	queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
	getWorkCalendarEntry(id: ID!): WorkCalendarEntry
	queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
	getWorkCalendar(id: ID, name: String): WorkCalendar
	queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult
	getWorkflowSpecification(id: ID!): WorkflowSpecification
	queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult
	getWorkflowInstance(id: ID!): WorkflowInstance
	queryWorkflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
	aggregateWorkflowInstance(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult
	getWorkflowInstanceProperty(id: ID, key: String): WorkflowInstanceProperty
	queryWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
	aggregateWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter): WorkflowInstancePropertyAggregateResult
	getWorkflowNode(id: ID!): WorkflowNode
	queryWorkflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
	aggregateWorkflowNode(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
	getWorkflowNodeInstance(id: ID!): WorkflowNodeInstance
	queryWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
	aggregateWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult
	getWorkflowNodeEvent(id: ID!): WorkflowNodeEvent
	queryWorkflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
	aggregateWorkflowNodeEvent(filter: WorkflowNodeEventFilter): WorkflowNodeEventAggregateResult
	getWorkflowNodeType(id: ID!): WorkflowNodeType
	queryWorkflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
	aggregateWorkflowNodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeTypeAggregateResult
	getWorkflowConnection(id: ID!): WorkflowConnection
	queryWorkflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
	aggregateWorkflowConnection(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult
	getWorkflowConnectionType(id: ID!): WorkflowConnectionType
	queryWorkflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
	aggregateWorkflowConnectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionTypeAggregateResult
	getWorkflowProperty(id: ID!): WorkflowProperty
	queryWorkflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
	aggregateWorkflowProperty(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult
	getWorkflowPropertyInstance(id: ID!): WorkflowPropertyInstance
	queryWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
	aggregateWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult
	getWorkflowPropertyValue(id: ID!): WorkflowPropertyValue
	queryWorkflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
	aggregateWorkflowPropertyValue(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult
	getForm(id: ID, name: String): Form
	queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	aggregateForm(filter: FormFilter): FormAggregateResult
	getPartner(id: ID!): Partner
	queryPartner(filter: PartnerFilter, order: PartnerOrder, first: Int, offset: Int): [Partner]
	aggregatePartner(filter: PartnerFilter): PartnerAggregateResult
	getShippingAccount(id: ID!): ShippingAccount
	queryShippingAccount(filter: ShippingAccountFilter, order: ShippingAccountOrder, first: Int, offset: Int): [ShippingAccount]
	aggregateShippingAccount(filter: ShippingAccountFilter): ShippingAccountAggregateResult
	getInventoryHandlingPolicy(id: ID, name: String): InventoryHandlingPolicy
	queryInventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter, order: InventoryHandlingPolicyOrder, first: Int, offset: Int): [InventoryHandlingPolicy]
	aggregateInventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter): InventoryHandlingPolicyAggregateResult
	getInventoryHandlingRule(id: ID!): InventoryHandlingRule
	queryInventoryHandlingRule(filter: InventoryHandlingRuleFilter, first: Int, offset: Int): [InventoryHandlingRule]
	aggregateInventoryHandlingRule(filter: InventoryHandlingRuleFilter): InventoryHandlingRuleAggregateResult
	getAddress(id: ID!): Address
	queryAddress(filter: AddressFilter, order: AddressOrder, first: Int, offset: Int): [Address]
	aggregateAddress(filter: AddressFilter): AddressAggregateResult
	getDelivery(id: ID!): Delivery
	queryDelivery(filter: DeliveryFilter, order: DeliveryOrder, first: Int, offset: Int): [Delivery]
	aggregateDelivery(filter: DeliveryFilter): DeliveryAggregateResult
	getOrder(id: ID!): Order
	queryOrder(filter: OrderFilter, order: OrderOrder, first: Int, offset: Int): [Order]
	aggregateOrder(filter: OrderFilter): OrderAggregateResult
	getOrderLine(id: ID!): OrderLine
	queryOrderLine(filter: OrderLineFilter, order: OrderLineOrder, first: Int, offset: Int): [OrderLine]
	aggregateOrderLine(filter: OrderLineFilter): OrderLineAggregateResult
	getShipment(id: ID!): Shipment
	queryShipment(filter: ShipmentFilter, order: ShipmentOrder, first: Int, offset: Int): [Shipment]
	aggregateShipment(filter: ShipmentFilter): ShipmentAggregateResult
	getShipmentItem(id: ID!): ShipmentItem
	queryShipmentItem(filter: ShipmentItemFilter, order: ShipmentItemOrder, first: Int, offset: Int): [ShipmentItem]
	aggregateShipmentItem(filter: ShipmentItemFilter): ShipmentItemAggregateResult
	getBox(id: ID!): Box
	queryBox(filter: BoxFilter, order: BoxOrder, first: Int, offset: Int): [Box]
	aggregateBox(filter: BoxFilter): BoxAggregateResult
	getGeneralLedgerAccount(id: ID, code: String): GeneralLedgerAccount
	queryGeneralLedgerAccount(filter: GeneralLedgerAccountFilter, order: GeneralLedgerAccountOrder, first: Int, offset: Int): [GeneralLedgerAccount]
	aggregateGeneralLedgerAccount(filter: GeneralLedgerAccountFilter): GeneralLedgerAccountAggregateResult
	getInterfaceMessageLog(id: ID!): InterfaceMessageLog
	queryInterfaceMessageLog(filter: InterfaceMessageLogFilter, order: InterfaceMessageLogOrder, first: Int, offset: Int): [InterfaceMessageLog]
	aggregateInterfaceMessageLog(filter: InterfaceMessageLogFilter): InterfaceMessageLogAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addUser(input: [AddUserInput!]!, upsert: Boolean): AddUserPayload
	updateUser(input: UpdateUserInput!): UpdateUserPayload
	deleteUser(filter: UserFilter!): DeleteUserPayload
	addUserRole(input: [AddUserRoleInput!]!): AddUserRolePayload
	updateUserRole(input: UpdateUserRoleInput!): UpdateUserRolePayload
	deleteUserRole(filter: UserRoleFilter!): DeleteUserRolePayload
	addRole(input: [AddRoleInput!]!, upsert: Boolean): AddRolePayload
	updateRole(input: UpdateRoleInput!): UpdateRolePayload
	deleteRole(filter: RoleFilter!): DeleteRolePayload
	addAccessRight(input: [AddAccessRightInput!]!): AddAccessRightPayload
	updateAccessRight(input: UpdateAccessRightInput!): UpdateAccessRightPayload
	deleteAccessRight(filter: AccessRightFilter!): DeleteAccessRightPayload
	addACL(input: [AddACLInput!]!): AddACLPayload
	updateACL(input: UpdateACLInput!): UpdateACLPayload
	deleteACL(filter: ACLFilter!): DeleteACLPayload
	addLibreService(input: [AddLibreServiceInput!]!, upsert: Boolean): AddLibreServicePayload
	updateLibreService(input: UpdateLibreServiceInput!): UpdateLibreServicePayload
	deleteLibreService(filter: LibreServiceFilter!): DeleteLibreServicePayload
	addMenu(input: [AddMenuInput!]!): AddMenuPayload
	updateMenu(input: UpdateMenuInput!): UpdateMenuPayload
	deleteMenu(filter: MenuFilter!): DeleteMenuPayload
	addOperationsRequest(input: [AddOperationsRequestInput!]!, upsert: Boolean): AddOperationsRequestPayload
	updateOperationsRequest(input: UpdateOperationsRequestInput!): UpdateOperationsRequestPayload
	deleteOperationsRequest(filter: OperationsRequestFilter!): DeleteOperationsRequestPayload
	addRequestState(input: [AddRequestStateInput!]!, upsert: Boolean): AddRequestStatePayload
	updateRequestState(input: UpdateRequestStateInput!): UpdateRequestStatePayload
	deleteRequestState(filter: RequestStateFilter!): DeleteRequestStatePayload
	addOperationsDefinition(input: [AddOperationsDefinitionInput!]!, upsert: Boolean): AddOperationsDefinitionPayload
	updateOperationsDefinition(input: UpdateOperationsDefinitionInput!): UpdateOperationsDefinitionPayload
	deleteOperationsDefinition(filter: OperationsDefinitionFilter!): DeleteOperationsDefinitionPayload
	addBillOfMaterial(input: [AddBillOfMaterialInput!]!, upsert: Boolean): AddBillOfMaterialPayload
	updateBillOfMaterial(input: UpdateBillOfMaterialInput!): UpdateBillOfMaterialPayload
	deleteBillOfMaterial(filter: BillOfMaterialFilter!): DeleteBillOfMaterialPayload
	addOperationsSegment(input: [AddOperationsSegmentInput!]!): AddOperationsSegmentPayload
	updateOperationsSegment(input: UpdateOperationsSegmentInput!): UpdateOperationsSegmentPayload
	deleteOperationsSegment(filter: OperationsSegmentFilter!): DeleteOperationsSegmentPayload
	addTransitionEventRuleset(input: [AddTransitionEventRulesetInput!]!): AddTransitionEventRulesetPayload
	updateTransitionEventRuleset(input: UpdateTransitionEventRulesetInput!): UpdateTransitionEventRulesetPayload
	deleteTransitionEventRuleset(filter: TransitionEventRulesetFilter!): DeleteTransitionEventRulesetPayload
	addStateEventRuleset(input: [AddStateEventRulesetInput!]!): AddStateEventRulesetPayload
	updateStateEventRuleset(input: UpdateStateEventRulesetInput!): UpdateStateEventRulesetPayload
	deleteStateEventRuleset(filter: StateEventRulesetFilter!): DeleteStateEventRulesetPayload
	addMaterialEventRuleset(input: [AddMaterialEventRulesetInput!]!): AddMaterialEventRulesetPayload
	updateMaterialEventRuleset(input: UpdateMaterialEventRulesetInput!): UpdateMaterialEventRulesetPayload
	deleteMaterialEventRuleset(filter: MaterialEventRulesetFilter!): DeleteMaterialEventRulesetPayload
	addOrderStartRuleset(input: [AddOrderStartRulesetInput!]!): AddOrderStartRulesetPayload
	updateOrderStartRuleset(input: UpdateOrderStartRulesetInput!): UpdateOrderStartRulesetPayload
	deleteOrderStartRuleset(filter: OrderStartRulesetFilter!): DeleteOrderStartRulesetPayload
	addSegmentInvoiceSetting(input: [AddSegmentInvoiceSettingInput!]!): AddSegmentInvoiceSettingPayload
	updateSegmentInvoiceSetting(input: UpdateSegmentInvoiceSettingInput!): UpdateSegmentInvoiceSettingPayload
	deleteSegmentInvoiceSetting(filter: SegmentInvoiceSettingFilter!): DeleteSegmentInvoiceSettingPayload
	addSegmentDependency(input: [AddSegmentDependencyInput!]!): AddSegmentDependencyPayload
	updateSegmentDependency(input: UpdateSegmentDependencyInput!): UpdateSegmentDependencyPayload
	deleteSegmentDependency(filter: SegmentDependencyFilter!): DeleteSegmentDependencyPayload
	addJobOrder(input: [AddJobOrderInput!]!, upsert: Boolean): AddJobOrderPayload
	updateJobOrder(input: UpdateJobOrderInput!): UpdateJobOrderPayload
	deleteJobOrder(filter: JobOrderFilter!): DeleteJobOrderPayload
	addJobOrderDependency(input: [AddJobOrderDependencyInput!]!): AddJobOrderDependencyPayload
	updateJobOrderDependency(input: UpdateJobOrderDependencyInput!): UpdateJobOrderDependencyPayload
	deleteJobOrderDependency(filter: JobOrderDependencyFilter!): DeleteJobOrderDependencyPayload
	addJobOrderDispatchStateModel(input: [AddJobOrderDispatchStateModelInput!]!): AddJobOrderDispatchStateModelPayload
	updateJobOrderDispatchStateModel(input: UpdateJobOrderDispatchStateModelInput!): UpdateJobOrderDispatchStateModelPayload
	deleteJobOrderDispatchStateModel(filter: JobOrderDispatchStateModelFilter!): DeleteJobOrderDispatchStateModelPayload
	addJobOrderNote(input: [AddJobOrderNoteInput!]!): AddJobOrderNotePayload
	updateJobOrderNote(input: UpdateJobOrderNoteInput!): UpdateJobOrderNotePayload
	deleteJobOrderNote(filter: JobOrderNoteFilter!): DeleteJobOrderNotePayload
	addJobResponse(input: [AddJobResponseInput!]!): AddJobResponsePayload
	updateJobResponse(input: UpdateJobResponseInput!): UpdateJobResponsePayload
	deleteJobResponse(filter: JobResponseFilter!): DeleteJobResponsePayload
	addPersonnelActual(input: [AddPersonnelActualInput!]!): AddPersonnelActualPayload
	updatePersonnelActual(input: UpdatePersonnelActualInput!): UpdatePersonnelActualPayload
	deletePersonnelActual(filter: PersonnelActualFilter!): DeletePersonnelActualPayload
	addEquipmentActual(input: [AddEquipmentActualInput!]!): AddEquipmentActualPayload
	updateEquipmentActual(input: UpdateEquipmentActualInput!): UpdateEquipmentActualPayload
	deleteEquipmentActual(filter: EquipmentActualFilter!): DeleteEquipmentActualPayload
	addMaterialActual(input: [AddMaterialActualInput!]!): AddMaterialActualPayload
	updateMaterialActual(input: UpdateMaterialActualInput!): UpdateMaterialActualPayload
	deleteMaterialActual(filter: MaterialActualFilter!): DeleteMaterialActualPayload
	addEventLog(input: [AddEventLogInput!]!): AddEventLogPayload
	updateEventLog(input: UpdateEventLogInput!): UpdateEventLogPayload
	deleteEventLog(filter: EventLogFilter!): DeleteEventLogPayload
	addQuantityLog(input: [AddQuantityLogInput!]!): AddQuantityLogPayload
	updateQuantityLog(input: UpdateQuantityLogInput!): UpdateQuantityLogPayload
	deleteQuantityLog(filter: QuantityLogFilter!): DeleteQuantityLogPayload
	addEquipmentSpecification(input: [AddEquipmentSpecificationInput!]!): AddEquipmentSpecificationPayload
	updateEquipmentSpecification(input: UpdateEquipmentSpecificationInput!): UpdateEquipmentSpecificationPayload
	deleteEquipmentSpecification(filter: EquipmentSpecificationFilter!): DeleteEquipmentSpecificationPayload
	addMaterialSpecification(input: [AddMaterialSpecificationInput!]!): AddMaterialSpecificationPayload
	updateMaterialSpecification(input: UpdateMaterialSpecificationInput!): UpdateMaterialSpecificationPayload
	deleteMaterialSpecification(filter: MaterialSpecificationFilter!): DeleteMaterialSpecificationPayload
	addPersonnelSpecification(input: [AddPersonnelSpecificationInput!]!): AddPersonnelSpecificationPayload
	updatePersonnelSpecification(input: UpdatePersonnelSpecificationInput!): UpdatePersonnelSpecificationPayload
	deletePersonnelSpecification(filter: PersonnelSpecificationFilter!): DeletePersonnelSpecificationPayload
	addParameterSpecification(input: [AddParameterSpecificationInput!]!): AddParameterSpecificationPayload
	updateParameterSpecification(input: UpdateParameterSpecificationInput!): UpdateParameterSpecificationPayload
	deleteParameterSpecification(filter: ParameterSpecificationFilter!): DeleteParameterSpecificationPayload
	addDashboardConfig(input: [AddDashboardConfigInput!]!, upsert: Boolean): AddDashboardConfigPayload
	updateDashboardConfig(input: UpdateDashboardConfigInput!): UpdateDashboardConfigPayload
	deleteDashboardConfig(filter: DashboardConfigFilter!): DeleteDashboardConfigPayload
	addDashboardPanelConfig(input: [AddDashboardPanelConfigInput!]!): AddDashboardPanelConfigPayload
	updateDashboardPanelConfig(input: UpdateDashboardPanelConfigInput!): UpdateDashboardPanelConfigPayload
	deleteDashboardPanelConfig(filter: DashboardPanelConfigFilter!): DeleteDashboardPanelConfigPayload
	addDashboardWidgetConfigProperty(input: [AddDashboardWidgetConfigPropertyInput!]!): AddDashboardWidgetConfigPropertyPayload
	updateDashboardWidgetConfigProperty(input: UpdateDashboardWidgetConfigPropertyInput!): UpdateDashboardWidgetConfigPropertyPayload
	deleteDashboardWidgetConfigProperty(filter: DashboardWidgetConfigPropertyFilter!): DeleteDashboardWidgetConfigPropertyPayload
	addEquipment(input: [AddEquipmentInput!]!): AddEquipmentPayload
	updateEquipment(input: UpdateEquipmentInput!): UpdateEquipmentPayload
	deleteEquipment(filter: EquipmentFilter!): DeleteEquipmentPayload
	addEquipmentRelation(input: [AddEquipmentRelationInput!]!): AddEquipmentRelationPayload
	updateEquipmentRelation(input: UpdateEquipmentRelationInput!): UpdateEquipmentRelationPayload
	deleteEquipmentRelation(filter: EquipmentRelationFilter!): DeleteEquipmentRelationPayload
	addEquipmentNameAlias(input: [AddEquipmentNameAliasInput!]!): AddEquipmentNameAliasPayload
	updateEquipmentNameAlias(input: UpdateEquipmentNameAliasInput!): UpdateEquipmentNameAliasPayload
	deleteEquipmentNameAlias(filter: EquipmentNameAliasFilter!): DeleteEquipmentNameAliasPayload
	addPropertyNameAlias(input: [AddPropertyNameAliasInput!]!): AddPropertyNameAliasPayload
	updatePropertyNameAlias(input: UpdatePropertyNameAliasInput!): UpdatePropertyNameAliasPayload
	deletePropertyNameAlias(filter: PropertyNameAliasFilter!): DeletePropertyNameAliasPayload
	addPropertyValueAlias(input: [AddPropertyValueAliasInput!]!): AddPropertyValueAliasPayload
	updatePropertyValueAlias(input: UpdatePropertyValueAliasInput!): UpdatePropertyValueAliasPayload
	deletePropertyValueAlias(filter: PropertyValueAliasFilter!): DeletePropertyValueAliasPayload
	addEquipmentReasonOverride(input: [AddEquipmentReasonOverrideInput!]!): AddEquipmentReasonOverridePayload
	updateEquipmentReasonOverride(input: UpdateEquipmentReasonOverrideInput!): UpdateEquipmentReasonOverridePayload
	deleteEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter!): DeleteEquipmentReasonOverridePayload
	addEquipmentClass(input: [AddEquipmentClassInput!]!): AddEquipmentClassPayload
	updateEquipmentClass(input: UpdateEquipmentClassInput!): UpdateEquipmentClassPayload
	deleteEquipmentClass(filter: EquipmentClassFilter!): DeleteEquipmentClassPayload
	addProperty(input: [AddPropertyInput!]!): AddPropertyPayload
	updateProperty(input: UpdatePropertyInput!): UpdatePropertyPayload
	deleteProperty(filter: PropertyFilter!): DeletePropertyPayload
	addEquipmentPropertyOverride(input: [AddEquipmentPropertyOverrideInput!]!): AddEquipmentPropertyOverridePayload
	updateEquipmentPropertyOverride(input: UpdateEquipmentPropertyOverrideInput!): UpdateEquipmentPropertyOverridePayload
	deleteEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter!): DeleteEquipmentPropertyOverridePayload
	addEventDefinition(input: [AddEventDefinitionInput!]!): AddEventDefinitionPayload
	updateEventDefinition(input: UpdateEventDefinitionInput!): UpdateEventDefinitionPayload
	deleteEventDefinition(filter: EventDefinitionFilter!): DeleteEventDefinitionPayload
	addPayloadFieldDefinition(input: [AddPayloadFieldDefinitionInput!]!): AddPayloadFieldDefinitionPayload
	updatePayloadFieldDefinition(input: UpdatePayloadFieldDefinitionInput!): UpdatePayloadFieldDefinitionPayload
	deletePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter!): DeletePayloadFieldDefinitionPayload
	addReason(input: [AddReasonInput!]!): AddReasonPayload
	updateReason(input: UpdateReasonInput!): UpdateReasonPayload
	deleteReason(filter: ReasonFilter!): DeleteReasonPayload
	addReasonCategory(input: [AddReasonCategoryInput!]!, upsert: Boolean): AddReasonCategoryPayload
	updateReasonCategory(input: UpdateReasonCategoryInput!): UpdateReasonCategoryPayload
	deleteReasonCategory(filter: ReasonCategoryFilter!): DeleteReasonCategoryPayload
	addMaterialClass(input: [AddMaterialClassInput!]!, upsert: Boolean): AddMaterialClassPayload
	updateMaterialClass(input: UpdateMaterialClassInput!): UpdateMaterialClassPayload
	deleteMaterialClass(filter: MaterialClassFilter!): DeleteMaterialClassPayload
	addMaterialDefinition(input: [AddMaterialDefinitionInput!]!, upsert: Boolean): AddMaterialDefinitionPayload
	updateMaterialDefinition(input: UpdateMaterialDefinitionInput!): UpdateMaterialDefinitionPayload
	deleteMaterialDefinition(filter: MaterialDefinitionFilter!): DeleteMaterialDefinitionPayload
	addMaterialAlternate(input: [AddMaterialAlternateInput!]!): AddMaterialAlternatePayload
	updateMaterialAlternate(input: UpdateMaterialAlternateInput!): UpdateMaterialAlternatePayload
	deleteMaterialAlternate(filter: MaterialAlternateFilter!): DeleteMaterialAlternatePayload
	addCarrier(input: [AddCarrierInput!]!, upsert: Boolean): AddCarrierPayload
	updateCarrier(input: UpdateCarrierInput!): UpdateCarrierPayload
	deleteCarrier(filter: CarrierFilter!): DeleteCarrierPayload
	addMaterialLot(input: [AddMaterialLotInput!]!, upsert: Boolean): AddMaterialLotPayload
	updateMaterialLot(input: UpdateMaterialLotInput!): UpdateMaterialLotPayload
	deleteMaterialLot(filter: MaterialLotFilter!): DeleteMaterialLotPayload
	addMaterialSubLot(input: [AddMaterialSubLotInput!]!, upsert: Boolean): AddMaterialSubLotPayload
	updateMaterialSubLot(input: UpdateMaterialSubLotInput!): UpdateMaterialSubLotPayload
	deleteMaterialSubLot(filter: MaterialSubLotFilter!): DeleteMaterialSubLotPayload
	addMaterialUnit(input: [AddMaterialUnitInput!]!, upsert: Boolean): AddMaterialUnitPayload
	updateMaterialUnit(input: UpdateMaterialUnitInput!): UpdateMaterialUnitPayload
	deleteMaterialUnit(filter: MaterialUnitFilter!): DeleteMaterialUnitPayload
	addInventoryHoldingPolicy(input: [AddInventoryHoldingPolicyInput!]!): AddInventoryHoldingPolicyPayload
	updateInventoryHoldingPolicy(input: UpdateInventoryHoldingPolicyInput!): UpdateInventoryHoldingPolicyPayload
	deleteInventoryHoldingPolicy(filter: InventoryHoldingPolicyFilter!): DeleteInventoryHoldingPolicyPayload
	addUnitOfMeasure(input: [AddUnitOfMeasureInput!]!, upsert: Boolean): AddUnitOfMeasurePayload
	updateUnitOfMeasure(input: UpdateUnitOfMeasureInput!): UpdateUnitOfMeasurePayload
	deleteUnitOfMeasure(filter: UnitOfMeasureFilter!): DeleteUnitOfMeasurePayload
	addUnitOfMeasureConversion(input: [AddUnitOfMeasureConversionInput!]!): AddUnitOfMeasureConversionPayload
	updateUnitOfMeasureConversion(input: UpdateUnitOfMeasureConversionInput!): UpdateUnitOfMeasureConversionPayload
	deleteUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter!): DeleteUnitOfMeasureConversionPayload
	addMaterialStatus(input: [AddMaterialStatusInput!]!, upsert: Boolean): AddMaterialStatusPayload
	updateMaterialStatus(input: UpdateMaterialStatusInput!): UpdateMaterialStatusPayload
	deleteMaterialStatus(filter: MaterialStatusFilter!): DeleteMaterialStatusPayload
	addMaterialStateModel(input: [AddMaterialStateModelInput!]!, upsert: Boolean): AddMaterialStateModelPayload
	updateMaterialStateModel(input: UpdateMaterialStateModelInput!): UpdateMaterialStateModelPayload
	deleteMaterialStateModel(filter: MaterialStateModelFilter!): DeleteMaterialStateModelPayload
	addMaterialStateTransition(input: [AddMaterialStateTransitionInput!]!): AddMaterialStateTransitionPayload
	updateMaterialStateTransition(input: UpdateMaterialStateTransitionInput!): UpdateMaterialStateTransitionPayload
	deleteMaterialStateTransition(filter: MaterialStateTransitionFilter!): DeleteMaterialStateTransitionPayload
	addPersonnelClass(input: [AddPersonnelClassInput!]!, upsert: Boolean): AddPersonnelClassPayload
	updatePersonnelClass(input: UpdatePersonnelClassInput!): UpdatePersonnelClassPayload
	deletePersonnelClass(filter: PersonnelClassFilter!): DeletePersonnelClassPayload
	addPerson(input: [AddPersonInput!]!, upsert: Boolean): AddPersonPayload
	updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
	deletePerson(filter: PersonFilter!): DeletePersonPayload
	addTestSpecification(input: [AddTestSpecificationInput!]!): AddTestSpecificationPayload
	updateTestSpecification(input: UpdateTestSpecificationInput!): UpdateTestSpecificationPayload
	deleteTestSpecification(filter: TestSpecificationFilter!): DeleteTestSpecificationPayload
	addTestResult(input: [AddTestResultInput!]!): AddTestResultPayload
	updateTestResult(input: UpdateTestResultInput!): UpdateTestResultPayload
	deleteTestResult(filter: TestResultFilter!): DeleteTestResultPayload
	addWorkCalendarDefinitionEntry(input: [AddWorkCalendarDefinitionEntryInput!]!): AddWorkCalendarDefinitionEntryPayload
	updateWorkCalendarDefinitionEntry(input: UpdateWorkCalendarDefinitionEntryInput!): UpdateWorkCalendarDefinitionEntryPayload
	deleteWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter!): DeleteWorkCalendarDefinitionEntryPayload
	addWorkCalendarEntry(input: [AddWorkCalendarEntryInput!]!): AddWorkCalendarEntryPayload
	updateWorkCalendarEntry(input: UpdateWorkCalendarEntryInput!): UpdateWorkCalendarEntryPayload
	deleteWorkCalendarEntry(filter: WorkCalendarEntryFilter!): DeleteWorkCalendarEntryPayload
	addWorkCalendar(input: [AddWorkCalendarInput!]!, upsert: Boolean): AddWorkCalendarPayload
	updateWorkCalendar(input: UpdateWorkCalendarInput!): UpdateWorkCalendarPayload
	deleteWorkCalendar(filter: WorkCalendarFilter!): DeleteWorkCalendarPayload
	addWorkflowSpecification(input: [AddWorkflowSpecificationInput!]!): AddWorkflowSpecificationPayload
	updateWorkflowSpecification(input: UpdateWorkflowSpecificationInput!): UpdateWorkflowSpecificationPayload
	deleteWorkflowSpecification(filter: WorkflowSpecificationFilter!): DeleteWorkflowSpecificationPayload
	addWorkflowInstance(input: [AddWorkflowInstanceInput!]!): AddWorkflowInstancePayload
	updateWorkflowInstance(input: UpdateWorkflowInstanceInput!): UpdateWorkflowInstancePayload
	deleteWorkflowInstance(filter: WorkflowInstanceFilter!): DeleteWorkflowInstancePayload
	addWorkflowInstanceProperty(input: [AddWorkflowInstancePropertyInput!]!, upsert: Boolean): AddWorkflowInstancePropertyPayload
	updateWorkflowInstanceProperty(input: UpdateWorkflowInstancePropertyInput!): UpdateWorkflowInstancePropertyPayload
	deleteWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter!): DeleteWorkflowInstancePropertyPayload
	addWorkflowNode(input: [AddWorkflowNodeInput!]!): AddWorkflowNodePayload
	updateWorkflowNode(input: UpdateWorkflowNodeInput!): UpdateWorkflowNodePayload
	deleteWorkflowNode(filter: WorkflowNodeFilter!): DeleteWorkflowNodePayload
	addWorkflowNodeInstance(input: [AddWorkflowNodeInstanceInput!]!): AddWorkflowNodeInstancePayload
	updateWorkflowNodeInstance(input: UpdateWorkflowNodeInstanceInput!): UpdateWorkflowNodeInstancePayload
	deleteWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter!): DeleteWorkflowNodeInstancePayload
	addWorkflowNodeEvent(input: [AddWorkflowNodeEventInput!]!): AddWorkflowNodeEventPayload
	updateWorkflowNodeEvent(input: UpdateWorkflowNodeEventInput!): UpdateWorkflowNodeEventPayload
	deleteWorkflowNodeEvent(filter: WorkflowNodeEventFilter!): DeleteWorkflowNodeEventPayload
	addWorkflowNodeType(input: [AddWorkflowNodeTypeInput!]!): AddWorkflowNodeTypePayload
	updateWorkflowNodeType(input: UpdateWorkflowNodeTypeInput!): UpdateWorkflowNodeTypePayload
	deleteWorkflowNodeType(filter: WorkflowNodeTypeFilter!): DeleteWorkflowNodeTypePayload
	addWorkflowConnection(input: [AddWorkflowConnectionInput!]!): AddWorkflowConnectionPayload
	updateWorkflowConnection(input: UpdateWorkflowConnectionInput!): UpdateWorkflowConnectionPayload
	deleteWorkflowConnection(filter: WorkflowConnectionFilter!): DeleteWorkflowConnectionPayload
	addWorkflowConnectionType(input: [AddWorkflowConnectionTypeInput!]!): AddWorkflowConnectionTypePayload
	updateWorkflowConnectionType(input: UpdateWorkflowConnectionTypeInput!): UpdateWorkflowConnectionTypePayload
	deleteWorkflowConnectionType(filter: WorkflowConnectionTypeFilter!): DeleteWorkflowConnectionTypePayload
	addWorkflowProperty(input: [AddWorkflowPropertyInput!]!): AddWorkflowPropertyPayload
	updateWorkflowProperty(input: UpdateWorkflowPropertyInput!): UpdateWorkflowPropertyPayload
	deleteWorkflowProperty(filter: WorkflowPropertyFilter!): DeleteWorkflowPropertyPayload
	addWorkflowPropertyInstance(input: [AddWorkflowPropertyInstanceInput!]!): AddWorkflowPropertyInstancePayload
	updateWorkflowPropertyInstance(input: UpdateWorkflowPropertyInstanceInput!): UpdateWorkflowPropertyInstancePayload
	deleteWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter!): DeleteWorkflowPropertyInstancePayload
	addWorkflowPropertyValue(input: [AddWorkflowPropertyValueInput!]!): AddWorkflowPropertyValuePayload
	updateWorkflowPropertyValue(input: UpdateWorkflowPropertyValueInput!): UpdateWorkflowPropertyValuePayload
	deleteWorkflowPropertyValue(filter: WorkflowPropertyValueFilter!): DeleteWorkflowPropertyValuePayload
	addForm(input: [AddFormInput!]!, upsert: Boolean): AddFormPayload
	updateForm(input: UpdateFormInput!): UpdateFormPayload
	deleteForm(filter: FormFilter!): DeleteFormPayload
	addPartner(input: [AddPartnerInput!]!): AddPartnerPayload
	updatePartner(input: UpdatePartnerInput!): UpdatePartnerPayload
	deletePartner(filter: PartnerFilter!): DeletePartnerPayload
	addShippingAccount(input: [AddShippingAccountInput!]!): AddShippingAccountPayload
	updateShippingAccount(input: UpdateShippingAccountInput!): UpdateShippingAccountPayload
	deleteShippingAccount(filter: ShippingAccountFilter!): DeleteShippingAccountPayload
	addInventoryHandlingPolicy(input: [AddInventoryHandlingPolicyInput!]!, upsert: Boolean): AddInventoryHandlingPolicyPayload
	updateInventoryHandlingPolicy(input: UpdateInventoryHandlingPolicyInput!): UpdateInventoryHandlingPolicyPayload
	deleteInventoryHandlingPolicy(filter: InventoryHandlingPolicyFilter!): DeleteInventoryHandlingPolicyPayload
	addInventoryHandlingRule(input: [AddInventoryHandlingRuleInput!]!): AddInventoryHandlingRulePayload
	updateInventoryHandlingRule(input: UpdateInventoryHandlingRuleInput!): UpdateInventoryHandlingRulePayload
	deleteInventoryHandlingRule(filter: InventoryHandlingRuleFilter!): DeleteInventoryHandlingRulePayload
	addAddress(input: [AddAddressInput!]!): AddAddressPayload
	updateAddress(input: UpdateAddressInput!): UpdateAddressPayload
	deleteAddress(filter: AddressFilter!): DeleteAddressPayload
	addDelivery(input: [AddDeliveryInput!]!): AddDeliveryPayload
	updateDelivery(input: UpdateDeliveryInput!): UpdateDeliveryPayload
	deleteDelivery(filter: DeliveryFilter!): DeleteDeliveryPayload
	addOrder(input: [AddOrderInput!]!): AddOrderPayload
	updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
	deleteOrder(filter: OrderFilter!): DeleteOrderPayload
	addOrderLine(input: [AddOrderLineInput!]!): AddOrderLinePayload
	updateOrderLine(input: UpdateOrderLineInput!): UpdateOrderLinePayload
	deleteOrderLine(filter: OrderLineFilter!): DeleteOrderLinePayload
	addShipment(input: [AddShipmentInput!]!): AddShipmentPayload
	updateShipment(input: UpdateShipmentInput!): UpdateShipmentPayload
	deleteShipment(filter: ShipmentFilter!): DeleteShipmentPayload
	addShipmentItem(input: [AddShipmentItemInput!]!): AddShipmentItemPayload
	updateShipmentItem(input: UpdateShipmentItemInput!): UpdateShipmentItemPayload
	deleteShipmentItem(filter: ShipmentItemFilter!): DeleteShipmentItemPayload
	addBox(input: [AddBoxInput!]!): AddBoxPayload
	updateBox(input: UpdateBoxInput!): UpdateBoxPayload
	deleteBox(filter: BoxFilter!): DeleteBoxPayload
	addGeneralLedgerAccount(input: [AddGeneralLedgerAccountInput!]!, upsert: Boolean): AddGeneralLedgerAccountPayload
	updateGeneralLedgerAccount(input: UpdateGeneralLedgerAccountInput!): UpdateGeneralLedgerAccountPayload
	deleteGeneralLedgerAccount(filter: GeneralLedgerAccountFilter!): DeleteGeneralLedgerAccountPayload
	addInterfaceMessageLog(input: [AddInterfaceMessageLogInput!]!): AddInterfaceMessageLogPayload
	updateInterfaceMessageLog(input: UpdateInterfaceMessageLogInput!): UpdateInterfaceMessageLogPayload
	deleteInterfaceMessageLog(filter: InterfaceMessageLogFilter!): DeleteInterfaceMessageLogPayload
}

#######################
# Generated Subscriptions
#######################

type Subscription {
	getLibreService(id: ID, name: String): LibreService
	queryLibreService(filter: LibreServiceFilter, order: LibreServiceOrder, first: Int, offset: Int): [LibreService]
	aggregateLibreService(filter: LibreServiceFilter): LibreServiceAggregateResult
	getOperationsRequest(id: ID, code: String): OperationsRequest
	queryOperationsRequest(filter: OperationsRequestFilter, order: OperationsRequestOrder, first: Int, offset: Int): [OperationsRequest]
	aggregateOperationsRequest(filter: OperationsRequestFilter): OperationsRequestAggregateResult
	getOperationsDefinition(id: ID, name: String): OperationsDefinition
	queryOperationsDefinition(filter: OperationsDefinitionFilter, order: OperationsDefinitionOrder, first: Int, offset: Int): [OperationsDefinition]
	aggregateOperationsDefinition(filter: OperationsDefinitionFilter): OperationsDefinitionAggregateResult
	getBillOfMaterial(id: ID, name: String): BillOfMaterial
	queryBillOfMaterial(filter: BillOfMaterialFilter, order: BillOfMaterialOrder, first: Int, offset: Int): [BillOfMaterial]
	aggregateBillOfMaterial(filter: BillOfMaterialFilter): BillOfMaterialAggregateResult
	getOperationsSegment(id: ID!): OperationsSegment
	queryOperationsSegment(filter: OperationsSegmentFilter, order: OperationsSegmentOrder, first: Int, offset: Int): [OperationsSegment]
	aggregateOperationsSegment(filter: OperationsSegmentFilter): OperationsSegmentAggregateResult
	getTransitionEventRuleset(id: ID!): TransitionEventRuleset
	queryTransitionEventRuleset(filter: TransitionEventRulesetFilter, order: TransitionEventRulesetOrder, first: Int, offset: Int): [TransitionEventRuleset]
	aggregateTransitionEventRuleset(filter: TransitionEventRulesetFilter): TransitionEventRulesetAggregateResult
	getStateEventRuleset(id: ID!): StateEventRuleset
	queryStateEventRuleset(filter: StateEventRulesetFilter, order: StateEventRulesetOrder, first: Int, offset: Int): [StateEventRuleset]
	aggregateStateEventRuleset(filter: StateEventRulesetFilter): StateEventRulesetAggregateResult
	getMaterialEventRuleset(id: ID!): MaterialEventRuleset
	queryMaterialEventRuleset(filter: MaterialEventRulesetFilter, order: MaterialEventRulesetOrder, first: Int, offset: Int): [MaterialEventRuleset]
	aggregateMaterialEventRuleset(filter: MaterialEventRulesetFilter): MaterialEventRulesetAggregateResult
	getOrderStartRuleset(id: ID!): OrderStartRuleset
	queryOrderStartRuleset(filter: OrderStartRulesetFilter, order: OrderStartRulesetOrder, first: Int, offset: Int): [OrderStartRuleset]
	aggregateOrderStartRuleset(filter: OrderStartRulesetFilter): OrderStartRulesetAggregateResult
	getSegmentDependency(id: ID!): SegmentDependency
	querySegmentDependency(filter: SegmentDependencyFilter, order: SegmentDependencyOrder, first: Int, offset: Int): [SegmentDependency]
	aggregateSegmentDependency(filter: SegmentDependencyFilter): SegmentDependencyAggregateResult
	getJobOrder(id: ID, name: String): JobOrder
	queryJobOrder(filter: JobOrderFilter, order: JobOrderOrder, first: Int, offset: Int): [JobOrder]
	aggregateJobOrder(filter: JobOrderFilter): JobOrderAggregateResult
	getJobResponse(id: ID!): JobResponse
	queryJobResponse(filter: JobResponseFilter, order: JobResponseOrder, first: Int, offset: Int): [JobResponse]
	aggregateJobResponse(filter: JobResponseFilter): JobResponseAggregateResult
	getPersonnelActual(id: ID!): PersonnelActual
	queryPersonnelActual(filter: PersonnelActualFilter, order: PersonnelActualOrder, first: Int, offset: Int): [PersonnelActual]
	aggregatePersonnelActual(filter: PersonnelActualFilter): PersonnelActualAggregateResult
	getEquipmentActual(id: ID!): EquipmentActual
	queryEquipmentActual(filter: EquipmentActualFilter, order: EquipmentActualOrder, first: Int, offset: Int): [EquipmentActual]
	aggregateEquipmentActual(filter: EquipmentActualFilter): EquipmentActualAggregateResult
	getMaterialActual(id: ID!): MaterialActual
	queryMaterialActual(filter: MaterialActualFilter, order: MaterialActualOrder, first: Int, offset: Int): [MaterialActual]
	aggregateMaterialActual(filter: MaterialActualFilter): MaterialActualAggregateResult
	getEventLog(id: ID!): EventLog
	queryEventLog(filter: EventLogFilter, order: EventLogOrder, first: Int, offset: Int): [EventLog]
	aggregateEventLog(filter: EventLogFilter): EventLogAggregateResult
	getQuantityLog(id: ID!): QuantityLog
	queryQuantityLog(filter: QuantityLogFilter, order: QuantityLogOrder, first: Int, offset: Int): [QuantityLog]
	aggregateQuantityLog(filter: QuantityLogFilter): QuantityLogAggregateResult
	getEquipmentSpecification(id: ID!): EquipmentSpecification
	queryEquipmentSpecification(filter: EquipmentSpecificationFilter, order: EquipmentSpecificationOrder, first: Int, offset: Int): [EquipmentSpecification]
	aggregateEquipmentSpecification(filter: EquipmentSpecificationFilter): EquipmentSpecificationAggregateResult
	getMaterialSpecification(id: ID!): MaterialSpecification
	queryMaterialSpecification(filter: MaterialSpecificationFilter, order: MaterialSpecificationOrder, first: Int, offset: Int): [MaterialSpecification]
	aggregateMaterialSpecification(filter: MaterialSpecificationFilter): MaterialSpecificationAggregateResult
	getPersonnelSpecification(id: ID!): PersonnelSpecification
	queryPersonnelSpecification(filter: PersonnelSpecificationFilter, order: PersonnelSpecificationOrder, first: Int, offset: Int): [PersonnelSpecification]
	aggregatePersonnelSpecification(filter: PersonnelSpecificationFilter): PersonnelSpecificationAggregateResult
	getParameterSpecification(id: ID!): ParameterSpecification
	queryParameterSpecification(filter: ParameterSpecificationFilter, order: ParameterSpecificationOrder, first: Int, offset: Int): [ParameterSpecification]
	aggregateParameterSpecification(filter: ParameterSpecificationFilter): ParameterSpecificationAggregateResult
	getEquipment(id: ID!): Equipment
	queryEquipment(filter: EquipmentFilter, order: EquipmentOrder, first: Int, offset: Int): [Equipment]
	aggregateEquipment(filter: EquipmentFilter): EquipmentAggregateResult
	getEquipmentNameAlias(id: ID!): EquipmentNameAlias
	queryEquipmentNameAlias(filter: EquipmentNameAliasFilter, order: EquipmentNameAliasOrder, first: Int, offset: Int): [EquipmentNameAlias]
	aggregateEquipmentNameAlias(filter: EquipmentNameAliasFilter): EquipmentNameAliasAggregateResult
	getPropertyNameAlias(id: ID!): PropertyNameAlias
	queryPropertyNameAlias(filter: PropertyNameAliasFilter, order: PropertyNameAliasOrder, first: Int, offset: Int): [PropertyNameAlias]
	aggregatePropertyNameAlias(filter: PropertyNameAliasFilter): PropertyNameAliasAggregateResult
	getPropertyValueAlias(id: ID!): PropertyValueAlias
	queryPropertyValueAlias(filter: PropertyValueAliasFilter, order: PropertyValueAliasOrder, first: Int, offset: Int): [PropertyValueAlias]
	aggregatePropertyValueAlias(filter: PropertyValueAliasFilter): PropertyValueAliasAggregateResult
	getEquipmentReasonOverride(id: ID!): EquipmentReasonOverride
	queryEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter, order: EquipmentReasonOverrideOrder, first: Int, offset: Int): [EquipmentReasonOverride]
	aggregateEquipmentReasonOverride(filter: EquipmentReasonOverrideFilter): EquipmentReasonOverrideAggregateResult
	getEquipmentClass(id: ID!): EquipmentClass
	queryEquipmentClass(filter: EquipmentClassFilter, order: EquipmentClassOrder, first: Int, offset: Int): [EquipmentClass]
	aggregateEquipmentClass(filter: EquipmentClassFilter): EquipmentClassAggregateResult
	getProperty(id: ID!): Property
	queryProperty(filter: PropertyFilter, order: PropertyOrder, first: Int, offset: Int): [Property]
	aggregateProperty(filter: PropertyFilter): PropertyAggregateResult
	getEquipmentPropertyOverride(id: ID!): EquipmentPropertyOverride
	queryEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter, order: EquipmentPropertyOverrideOrder, first: Int, offset: Int): [EquipmentPropertyOverride]
	aggregateEquipmentPropertyOverride(filter: EquipmentPropertyOverrideFilter): EquipmentPropertyOverrideAggregateResult
	getEventDefinition(id: ID!): EventDefinition
	queryEventDefinition(filter: EventDefinitionFilter, order: EventDefinitionOrder, first: Int, offset: Int): [EventDefinition]
	aggregateEventDefinition(filter: EventDefinitionFilter): EventDefinitionAggregateResult
	getPayloadFieldDefinition(id: ID!): PayloadFieldDefinition
	queryPayloadFieldDefinition(filter: PayloadFieldDefinitionFilter, order: PayloadFieldDefinitionOrder, first: Int, offset: Int): [PayloadFieldDefinition]
	aggregatePayloadFieldDefinition(filter: PayloadFieldDefinitionFilter): PayloadFieldDefinitionAggregateResult
	getReason(id: ID!): Reason
	queryReason(filter: ReasonFilter, order: ReasonOrder, first: Int, offset: Int): [Reason]
	aggregateReason(filter: ReasonFilter): ReasonAggregateResult
	getMaterialClass(id: ID, code: String): MaterialClass
	queryMaterialClass(filter: MaterialClassFilter, order: MaterialClassOrder, first: Int, offset: Int): [MaterialClass]
	aggregateMaterialClass(filter: MaterialClassFilter): MaterialClassAggregateResult
	getMaterialDefinition(id: ID, code: String): MaterialDefinition
	queryMaterialDefinition(filter: MaterialDefinitionFilter, order: MaterialDefinitionOrder, first: Int, offset: Int): [MaterialDefinition]
	aggregateMaterialDefinition(filter: MaterialDefinitionFilter): MaterialDefinitionAggregateResult
	getMaterialLot(id: ID, code: String): MaterialLot
	queryMaterialLot(filter: MaterialLotFilter, order: MaterialLotOrder, first: Int, offset: Int): [MaterialLot]
	aggregateMaterialLot(filter: MaterialLotFilter): MaterialLotAggregateResult
	getMaterialSubLot(id: ID, code: String): MaterialSubLot
	queryMaterialSubLot(filter: MaterialSubLotFilter, order: MaterialSubLotOrder, first: Int, offset: Int): [MaterialSubLot]
	aggregateMaterialSubLot(filter: MaterialSubLotFilter): MaterialSubLotAggregateResult
	getMaterialUnit(id: ID, serialNumber: String): MaterialUnit
	queryMaterialUnit(filter: MaterialUnitFilter, order: MaterialUnitOrder, first: Int, offset: Int): [MaterialUnit]
	aggregateMaterialUnit(filter: MaterialUnitFilter): MaterialUnitAggregateResult
	getUnitOfMeasure(id: ID, code: String): UnitOfMeasure
	queryUnitOfMeasure(filter: UnitOfMeasureFilter, order: UnitOfMeasureOrder, first: Int, offset: Int): [UnitOfMeasure]
	aggregateUnitOfMeasure(filter: UnitOfMeasureFilter): UnitOfMeasureAggregateResult
	getUnitOfMeasureConversion(id: ID!): UnitOfMeasureConversion
	queryUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter, order: UnitOfMeasureConversionOrder, first: Int, offset: Int): [UnitOfMeasureConversion]
	aggregateUnitOfMeasureConversion(filter: UnitOfMeasureConversionFilter): UnitOfMeasureConversionAggregateResult
	getMaterialStatus(id: ID, code: String): MaterialStatus
	queryMaterialStatus(filter: MaterialStatusFilter, order: MaterialStatusOrder, first: Int, offset: Int): [MaterialStatus]
	aggregateMaterialStatus(filter: MaterialStatusFilter): MaterialStatusAggregateResult
	getPersonnelClass(id: ID, name: String): PersonnelClass
	queryPersonnelClass(filter: PersonnelClassFilter, order: PersonnelClassOrder, first: Int, offset: Int): [PersonnelClass]
	aggregatePersonnelClass(filter: PersonnelClassFilter): PersonnelClassAggregateResult
	getPerson(id: ID, name: String): Person
	queryPerson(filter: PersonFilter, order: PersonOrder, first: Int, offset: Int): [Person]
	aggregatePerson(filter: PersonFilter): PersonAggregateResult
	getTestSpecification(id: ID!): TestSpecification
	queryTestSpecification(filter: TestSpecificationFilter, order: TestSpecificationOrder, first: Int, offset: Int): [TestSpecification]
	aggregateTestSpecification(filter: TestSpecificationFilter): TestSpecificationAggregateResult
	getTestResult(id: ID!): TestResult
	queryTestResult(filter: TestResultFilter, order: TestResultOrder, first: Int, offset: Int): [TestResult]
	aggregateTestResult(filter: TestResultFilter): TestResultAggregateResult
	getWorkCalendarDefinitionEntry(id: ID!): WorkCalendarDefinitionEntry
	queryWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter, order: WorkCalendarDefinitionEntryOrder, first: Int, offset: Int): [WorkCalendarDefinitionEntry]
	aggregateWorkCalendarDefinitionEntry(filter: WorkCalendarDefinitionEntryFilter): WorkCalendarDefinitionEntryAggregateResult
	getWorkCalendarEntry(id: ID!): WorkCalendarEntry
	queryWorkCalendarEntry(filter: WorkCalendarEntryFilter, order: WorkCalendarEntryOrder, first: Int, offset: Int): [WorkCalendarEntry]
	aggregateWorkCalendarEntry(filter: WorkCalendarEntryFilter): WorkCalendarEntryAggregateResult
	getWorkCalendar(id: ID, name: String): WorkCalendar
	queryWorkCalendar(filter: WorkCalendarFilter, order: WorkCalendarOrder, first: Int, offset: Int): [WorkCalendar]
	aggregateWorkCalendar(filter: WorkCalendarFilter): WorkCalendarAggregateResult
	getWorkflowSpecification(id: ID!): WorkflowSpecification
	queryWorkflowSpecification(filter: WorkflowSpecificationFilter, order: WorkflowSpecificationOrder, first: Int, offset: Int): [WorkflowSpecification]
	aggregateWorkflowSpecification(filter: WorkflowSpecificationFilter): WorkflowSpecificationAggregateResult
	getWorkflowInstance(id: ID!): WorkflowInstance
	queryWorkflowInstance(filter: WorkflowInstanceFilter, order: WorkflowInstanceOrder, first: Int, offset: Int): [WorkflowInstance]
	aggregateWorkflowInstance(filter: WorkflowInstanceFilter): WorkflowInstanceAggregateResult
	getWorkflowInstanceProperty(id: ID, key: String): WorkflowInstanceProperty
	queryWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter, order: WorkflowInstancePropertyOrder, first: Int, offset: Int): [WorkflowInstanceProperty]
	aggregateWorkflowInstanceProperty(filter: WorkflowInstancePropertyFilter): WorkflowInstancePropertyAggregateResult
	getWorkflowNode(id: ID!): WorkflowNode
	queryWorkflowNode(filter: WorkflowNodeFilter, order: WorkflowNodeOrder, first: Int, offset: Int): [WorkflowNode]
	aggregateWorkflowNode(filter: WorkflowNodeFilter): WorkflowNodeAggregateResult
	getWorkflowNodeInstance(id: ID!): WorkflowNodeInstance
	queryWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter, order: WorkflowNodeInstanceOrder, first: Int, offset: Int): [WorkflowNodeInstance]
	aggregateWorkflowNodeInstance(filter: WorkflowNodeInstanceFilter): WorkflowNodeInstanceAggregateResult
	getWorkflowNodeEvent(id: ID!): WorkflowNodeEvent
	queryWorkflowNodeEvent(filter: WorkflowNodeEventFilter, order: WorkflowNodeEventOrder, first: Int, offset: Int): [WorkflowNodeEvent]
	aggregateWorkflowNodeEvent(filter: WorkflowNodeEventFilter): WorkflowNodeEventAggregateResult
	getWorkflowNodeType(id: ID!): WorkflowNodeType
	queryWorkflowNodeType(filter: WorkflowNodeTypeFilter, order: WorkflowNodeTypeOrder, first: Int, offset: Int): [WorkflowNodeType]
	aggregateWorkflowNodeType(filter: WorkflowNodeTypeFilter): WorkflowNodeTypeAggregateResult
	getWorkflowConnection(id: ID!): WorkflowConnection
	queryWorkflowConnection(filter: WorkflowConnectionFilter, order: WorkflowConnectionOrder, first: Int, offset: Int): [WorkflowConnection]
	aggregateWorkflowConnection(filter: WorkflowConnectionFilter): WorkflowConnectionAggregateResult
	getWorkflowConnectionType(id: ID!): WorkflowConnectionType
	queryWorkflowConnectionType(filter: WorkflowConnectionTypeFilter, order: WorkflowConnectionTypeOrder, first: Int, offset: Int): [WorkflowConnectionType]
	aggregateWorkflowConnectionType(filter: WorkflowConnectionTypeFilter): WorkflowConnectionTypeAggregateResult
	getWorkflowProperty(id: ID!): WorkflowProperty
	queryWorkflowProperty(filter: WorkflowPropertyFilter, order: WorkflowPropertyOrder, first: Int, offset: Int): [WorkflowProperty]
	aggregateWorkflowProperty(filter: WorkflowPropertyFilter): WorkflowPropertyAggregateResult
	getWorkflowPropertyInstance(id: ID!): WorkflowPropertyInstance
	queryWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter, order: WorkflowPropertyInstanceOrder, first: Int, offset: Int): [WorkflowPropertyInstance]
	aggregateWorkflowPropertyInstance(filter: WorkflowPropertyInstanceFilter): WorkflowPropertyInstanceAggregateResult
	getWorkflowPropertyValue(id: ID!): WorkflowPropertyValue
	queryWorkflowPropertyValue(filter: WorkflowPropertyValueFilter, order: WorkflowPropertyValueOrder, first: Int, offset: Int): [WorkflowPropertyValue]
	aggregateWorkflowPropertyValue(filter: WorkflowPropertyValueFilter): WorkflowPropertyValueAggregateResult
	getForm(id: ID, name: String): Form
	queryForm(filter: FormFilter, order: FormOrder, first: Int, offset: Int): [Form]
	aggregateForm(filter: FormFilter): FormAggregateResult
}

